

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat May 25 17:42:04 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,inline
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    25  0000                     
    26                           ; Version 1.45
    27                           ; Generated 16/11/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F2550 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	idataCOMRAM
    62  000982                     __pidataCOMRAM:
    63                           	opt stack 0
    64                           
    65                           ;initializer for loop@direccion
    66  000982  05                 	db	5
    67  0000                     _LATCbits	set	3979
    68  0000                     _PORTCbits	set	3970
    69  0000                     _PORTBbits	set	3969
    70  0000                     _PORTAbits	set	3968
    71  0000                     _LATAbits	set	3977
    72  0000                     _INTCONbits	set	4082
    73  0000                     _PIE1bits	set	3997
    74  0000                     _RCONbits	set	4048
    75  0000                     _PIE2	set	4000
    76  0000                     _PIE1	set	3997
    77  0000                     _INTCON3	set	4080
    78  0000                     _CCP2CONbits	set	4026
    79  0000                     _CCPR2L	set	4027
    80  0000                     _CCP1CONbits	set	4029
    81  0000                     _CCPR1L	set	4030
    82  0000                     _PR2	set	4043
    83  0000                     _T2CONbits	set	4042
    84  0000                     _T2CON	set	4042
    85  0000                     _TRISCbits	set	3988
    86  0000                     _TRISBbits	set	3987
    87  0000                     _TRISAbits	set	3986
    88  0000                     _UCFGbits	set	3951
    89  0000                     _UCONbits	set	3949
    90  0000                     _ADCON1bits	set	4033
    91  0000                     _TMR2IF	set	31985
    92                           
    93                           ; #config settings
    94  0000                     
    95                           	psect	cinit
    96  000916                     __pcinit:
    97                           	opt stack 0
    98  000916                     start_initialization:
    99                           	opt stack 0
   100  000916                     __initialization:
   101                           	opt stack 0
   102                           
   103                           ; Initialize objects allocated to COMRAM (1 bytes)
   104                           ; load TBLPTR registers with __pidataCOMRAM
   105  000916  0E82               	movlw	low __pidataCOMRAM
   106  000918  6EF6               	movwf	tblptrl,c
   107  00091A  0E09               	movlw	high __pidataCOMRAM
   108  00091C  6EF7               	movwf	tblptrh,c
   109  00091E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   110  000920  6EF8               	movwf	tblptru,c
   111  000922  0009               	tblrd		*+	;fetch initializer
   112  000924  CFF5 F04B          	movff	tablat,__pdataCOMRAM
   113                           
   114                           ; Clear objects allocated to COMRAM (9 bytes)
   115  000928  EE00  F042         	lfsr	0,__pbssCOMRAM
   116  00092C  0E09               	movlw	9
   117  00092E                     clear_0:
   118  00092E  6AEE               	clrf	postinc0,c
   119  000930  06E8               	decf	wreg,f,c
   120  000932  E1FD               	bnz	clear_0
   121  000934                     end_of_initialization:
   122                           	opt stack 0
   123  000934                     __end_of__initialization:
   124                           	opt stack 0
   125  000934  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   126  000936  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   127  000938  0E00               	movlw	low (__Lmediumconst shr (0+16))
   128  00093A  6EF8               	movwf	tblptru,c
   129  00093C  0100               	movlb	0
   130  00093E  EFBC  F004         	goto	_main	;jump to C main() function
   131                           tblptru	equ	0xFF8
   132                           tblptrh	equ	0xFF7
   133                           tblptrl	equ	0xFF6
   134                           tablat	equ	0xFF5
   135                           postinc0	equ	0xFEE
   136                           wreg	equ	0xFE8
   137                           
   138                           	psect	bssCOMRAM
   139  000042                     __pbssCOMRAM:
   140                           	opt stack 0
   141  000042                     _millisCounter:
   142                           	opt stack 0
   143  000042                     	ds	4
   144  000046                     loop@m:
   145                           	opt stack 0
   146  000046                     	ds	4
   147  00004A                     loop@estado:
   148                           	opt stack 0
   149  00004A                     	ds	1
   150                           tblptru	equ	0xFF8
   151                           tblptrh	equ	0xFF7
   152                           tblptrl	equ	0xFF6
   153                           tablat	equ	0xFF5
   154                           postinc0	equ	0xFEE
   155                           wreg	equ	0xFE8
   156                           
   157                           	psect	dataCOMRAM
   158  00004B                     __pdataCOMRAM:
   159                           	opt stack 0
   160  00004B                     loop@direccion:
   161                           	opt stack 0
   162  00004B                     	ds	1
   163                           tblptru	equ	0xFF8
   164                           tblptrh	equ	0xFF7
   165                           tblptrl	equ	0xFF6
   166                           tablat	equ	0xFF5
   167                           postinc0	equ	0xFEE
   168                           wreg	equ	0xFE8
   169                           
   170                           	psect	cstackBANK0
   171  000060                     __pcstackBANK0:
   172                           	opt stack 0
   173  000060                     _setMotores$851:
   174                           	opt stack 0
   175                           
   176                           ; 2 bytes @ 0x0
   177  000060                     	ds	2
   178  000062                     _setMotores$852:
   179                           	opt stack 0
   180                           
   181                           ; 2 bytes @ 0x2
   182  000062                     	ds	2
   183  000064                     setMotores@dutyI:
   184                           	opt stack 0
   185                           
   186                           ; 2 bytes @ 0x4
   187  000064                     	ds	2
   188  000066                     setMotores@dutyD:
   189                           	opt stack 0
   190                           
   191                           ; 2 bytes @ 0x6
   192  000066                     	ds	2
   193  000068                     ??_loop:
   194                           
   195                           ; 1 bytes @ 0x8
   196  000068                     	ds	5
   197                           tblptru	equ	0xFF8
   198                           tblptrh	equ	0xFF7
   199                           tblptrl	equ	0xFF6
   200                           tablat	equ	0xFF5
   201                           postinc0	equ	0xFEE
   202                           wreg	equ	0xFE8
   203                           
   204                           	psect	cstackCOMRAM
   205  000001                     __pcstackCOMRAM:
   206                           	opt stack 0
   207  000001                     ??_ISR:
   208  000001                     
   209                           ; 1 bytes @ 0x0
   210  000001                     	ds	18
   211  000013                     ?___ftpack:
   212                           	opt stack 0
   213  000013                     ?_millis:
   214                           	opt stack 0
   215  000013                     ___ftpack@arg:
   216                           	opt stack 0
   217                           
   218                           ; 3 bytes @ 0x12
   219  000013                     	ds	3
   220  000016                     ___ftpack@exp:
   221                           	opt stack 0
   222                           
   223                           ; 1 bytes @ 0x15
   224  000016                     	ds	1
   225  000017                     ___ftpack@sign:
   226                           	opt stack 0
   227                           
   228                           ; 1 bytes @ 0x16
   229  000017                     	ds	1
   230  000018                     ??___ftpack:
   231                           
   232                           ; 1 bytes @ 0x17
   233  000018                     	ds	3
   234  00001B                     ?___lwtoft:
   235                           	opt stack 0
   236  00001B                     ___lwtoft@c:
   237                           	opt stack 0
   238                           
   239                           ; 2 bytes @ 0x1A
   240  00001B                     	ds	3
   241  00001E                     ?___ftmul:
   242                           	opt stack 0
   243  00001E                     ___ftmul@f1:
   244                           	opt stack 0
   245                           
   246                           ; 3 bytes @ 0x1D
   247  00001E                     	ds	3
   248  000021                     ___ftmul@f2:
   249                           	opt stack 0
   250                           
   251                           ; 3 bytes @ 0x20
   252  000021                     	ds	3
   253  000024                     ??___ftmul:
   254                           
   255                           ; 1 bytes @ 0x23
   256  000024                     	ds	3
   257  000027                     ___ftmul@exp:
   258                           	opt stack 0
   259                           
   260                           ; 1 bytes @ 0x26
   261  000027                     	ds	1
   262  000028                     ___ftmul@f3_as_product:
   263                           	opt stack 0
   264                           
   265                           ; 3 bytes @ 0x27
   266  000028                     	ds	3
   267  00002B                     ___ftmul@cntr:
   268                           	opt stack 0
   269                           
   270                           ; 1 bytes @ 0x2A
   271  00002B                     	ds	1
   272  00002C                     ___ftmul@sign:
   273                           	opt stack 0
   274                           
   275                           ; 1 bytes @ 0x2B
   276  00002C                     	ds	1
   277  00002D                     ?___fttol:
   278                           	opt stack 0
   279  00002D                     ___fttol@f1:
   280                           	opt stack 0
   281                           
   282                           ; 3 bytes @ 0x2C
   283  00002D                     	ds	4
   284  000031                     ??___fttol:
   285                           
   286                           ; 1 bytes @ 0x30
   287  000031                     	ds	5
   288  000036                     ___fttol@sign1:
   289                           	opt stack 0
   290                           
   291                           ; 1 bytes @ 0x35
   292  000036                     	ds	1
   293  000037                     ___fttol@lval:
   294                           	opt stack 0
   295                           
   296                           ; 4 bytes @ 0x36
   297  000037                     	ds	4
   298  00003B                     ___fttol@exp1:
   299                           	opt stack 0
   300                           
   301                           ; 1 bytes @ 0x3A
   302  00003B                     	ds	1
   303  00003C                     setMotores@speedI:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x3B
   307  00003C                     	ds	2
   308  00003E                     setMotores@speedD:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x3D
   312  00003E                     	ds	2
   313  000040                     ??_setMotores:
   314                           
   315                           ; 1 bytes @ 0x3F
   316  000040                     	ds	2
   317  000042                     tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           
   324                           ; 1 bytes @ 0x41
   325 ;;
   326 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   327 ;;
   328 ;; *************** function _main *****************
   329 ;; Defined at:
   330 ;;		line 305 in file "main.c"
   331 ;; Parameters:    Size  Location     Type
   332 ;;		None
   333 ;; Auto vars:     Size  Location     Type
   334 ;;		None
   335 ;; Return value:  Size  Location     Type
   336 ;;                  1    wreg      void 
   337 ;; Registers used:
   338 ;;		wreg, status,2, status,0, cstack
   339 ;; Tracked objects:
   340 ;;		On entry : 0/0
   341 ;;		On exit  : 0/0
   342 ;;		Unchanged: 0/0
   343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   344 ;;      Params:         0       0       0       0       0       0       0       0       0
   345 ;;      Locals:         0       0       0       0       0       0       0       0       0
   346 ;;      Temps:          0       0       0       0       0       0       0       0       0
   347 ;;      Totals:         0       0       0       0       0       0       0       0       0
   348 ;;Total ram usage:        0 bytes
   349 ;; Hardware stack levels required when called:    5
   350 ;; This function calls:
   351 ;;		_init
   352 ;;		_loop
   353 ;; This function is called by:
   354 ;;		Startup code after reset
   355 ;; This function uses a non-reentrant model
   356 ;;
   357                           
   358                           	psect	text0
   359  000978                     __ptext0:
   360                           	opt stack 0
   361  000978                     _main:
   362                           	opt stack 26
   363                           
   364                           ;main.c: 306: init();
   365                           
   366                           ;incstack = 0
   367  000978  EC3F  F004         	call	_init	;wreg free
   368  00097C                     l147:
   369  00097C  EC09  F000         	call	_loop	;wreg free
   370  000980  D7FD               	goto	l147
   371  000982                     __end_of_main:
   372                           	opt stack 0
   373                           tblptru	equ	0xFF8
   374                           tblptrh	equ	0xFF7
   375                           tblptrl	equ	0xFF6
   376                           tablat	equ	0xFF5
   377                           postinc0	equ	0xFEE
   378                           wreg	equ	0xFE8
   379                           
   380 ;; *************** function _loop *****************
   381 ;; Defined at:
   382 ;;		line 73 in file "main.c"
   383 ;; Parameters:    Size  Location     Type
   384 ;;		None
   385 ;; Auto vars:     Size  Location     Type
   386 ;;		None
   387 ;; Return value:  Size  Location     Type
   388 ;;                  1    wreg      void 
   389 ;; Registers used:
   390 ;;		wreg, status,2, status,0, cstack
   391 ;; Tracked objects:
   392 ;;		On entry : 0/0
   393 ;;		On exit  : 0/0
   394 ;;		Unchanged: 0/0
   395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   396 ;;      Params:         0       0       0       0       0       0       0       0       0
   397 ;;      Locals:         0       0       0       0       0       0       0       0       0
   398 ;;      Temps:          0       5       0       0       0       0       0       0       0
   399 ;;      Totals:         0       5       0       0       0       0       0       0       0
   400 ;;Total ram usage:        5 bytes
   401 ;; Hardware stack levels used:    1
   402 ;; Hardware stack levels required when called:    4
   403 ;; This function calls:
   404 ;;		_millis
   405 ;;		_setMotores
   406 ;; This function is called by:
   407 ;;		_main
   408 ;; This function uses a non-reentrant model
   409 ;;
   410                           
   411                           	psect	text1
   412  000012                     __ptext1:
   413                           	opt stack 0
   414  000012                     _loop:
   415                           	opt stack 26
   416                           
   417                           ;main.c: 74: static unsigned long m = 0;
   418                           ;main.c: 75: static char estado = MENU;
   419                           ;main.c: 76: static char direccion = DER;
   420                           ;main.c: 78: switch(estado){
   421                           
   422                           ;incstack = 0
   423  000012  D181               	goto	l66
   424  000014                     
   425                           ;main.c: 81: estado = LIMPIAR;
   426  000014  0E01               	movlw	1
   427  000016  6E4A               	movwf	loop@estado,c
   428                           
   429                           ;main.c: 82: break;
   430  000018  0012               	return	
   431  00001A                     
   432                           ;main.c: 90: m = millis();
   433  00001A  ECB3  F004         	call	_millis	;wreg free
   434  00001E  C013  F046         	movff	?_millis,loop@m
   435  000022  C014  F047         	movff	?_millis+1,loop@m+1
   436  000026  C015  F048         	movff	?_millis+2,loop@m+2
   437  00002A  C016  F049         	movff	?_millis+3,loop@m+3
   438                           
   439                           ;main.c: 91: direccion = DER;
   440  00002E  0E05               	movlw	5
   441  000030  6E4B               	movwf	loop@direccion,c
   442                           
   443                           ;main.c: 92: estado = ESPERA;
   444  000032  0E02               	movlw	2
   445  000034  6E4A               	movwf	loop@estado,c
   446  000036  B280               	btfsc	3968,1,c	;volatile
   447  000038  0012               	return	
   448  00003A  D7EF               	goto	l72
   449  00003C                     
   450                           ;main.c: 102: m = millis();
   451  00003C  ECB3  F004         	call	_millis	;wreg free
   452  000040  C013  F046         	movff	?_millis,loop@m
   453  000044  C014  F047         	movff	?_millis+1,loop@m+1
   454  000048  C015  F048         	movff	?_millis+2,loop@m+2
   455  00004C  C016  F049         	movff	?_millis+3,loop@m+3
   456                           
   457                           ;main.c: 103: direccion = IZQ;
   458  000050  0E08               	movlw	8
   459  000052  6E4B               	movwf	loop@direccion,c
   460                           
   461                           ;main.c: 104: estado = ESPERA;
   462  000054  0E02               	movlw	2
   463  000056  6E4A               	movwf	loop@estado,c
   464  000058  BA80               	btfsc	3968,5,c	;volatile
   465  00005A  0012               	return	
   466  00005C  D7EF               	goto	l76
   467  00005E                     l79:
   468                           
   469                           ;main.c: 119: }
   470                           ;main.c: 121: LATAbits.LA2 = 1;
   471  00005E  8489               	bsf	3977,2,c	;volatile
   472                           
   473                           ;main.c: 122: LATAbits.LA3 = 0;
   474  000060  9689               	bcf	3977,3,c	;volatile
   475                           
   476                           ;main.c: 123: LATAbits.LA4 = 1;
   477  000062  8889               	bsf	3977,4,c	;volatile
   478                           
   479                           ;main.c: 124: setMotores(1000, 1000);
   480  000064  0E03               	movlw	3
   481  000066  6E3D               	movwf	setMotores@speedI+1,c
   482  000068  0EE8               	movlw	232
   483  00006A  6E3C               	movwf	setMotores@speedI,c
   484  00006C  0E03               	movlw	3
   485  00006E  6E3F               	movwf	setMotores@speedD+1,c
   486  000070  0EE8               	movlw	232
   487  000072  6E3E               	movwf	setMotores@speedD,c
   488  000074  ECB7  F001         	call	_setMotores	;wreg free
   489                           
   490                           ;main.c: 125: break;
   491  000078  0012               	return	
   492  00007A                     
   493                           ;main.c: 128: if(millis() > (m + 4970U)){
   494  00007A  ECB3  F004         	call	_millis	;wreg free
   495  00007E  0E6A               	movlw	106
   496  000080  2446               	addwf	loop@m,w,c
   497  000082  0100               	movlb	0	; () banked
   498  000084  6F68               	movwf	??_loop& (0+255),b
   499  000086  0E13               	movlw	19
   500  000088  2047               	addwfc	loop@m+1,w,c
   501  00008A  6F69               	movwf	(??_loop+1)& (0+255),b
   502  00008C  0E00               	movlw	0
   503  00008E  2048               	addwfc	loop@m+2,w,c
   504  000090  6F6A               	movwf	(??_loop+2)& (0+255),b
   505  000092  0E00               	movlw	0
   506  000094  2049               	addwfc	loop@m+3,w,c
   507  000096  6F6B               	movwf	(??_loop+3)& (0+255),b
   508  000098  5013               	movf	?_millis,w,c
   509  00009A  5D68               	subwf	??_loop& (0+255),w,b
   510  00009C  5014               	movf	?_millis+1,w,c
   511  00009E  5969               	subwfb	(??_loop+1)& (0+255),w,b
   512  0000A0  5015               	movf	?_millis+2,w,c
   513  0000A2  596A               	subwfb	(??_loop+2)& (0+255),w,b
   514  0000A4  5016               	movf	?_millis+3,w,c
   515  0000A6  596B               	subwfb	(??_loop+3)& (0+255),w,b
   516  0000A8  B0D8               	btfsc	status,0,c
   517  0000AA  D006               	goto	l81
   518                           
   519                           ; BSR set to: 0
   520                           ;main.c: 129: estado = ANALISIS;
   521  0000AC  0E03               	movlw	3
   522  0000AE  6E4A               	movwf	loop@estado,c
   523                           
   524                           ; BSR set to: 0
   525                           ;main.c: 130: LATAbits.LA2 = 0;
   526  0000B0  9489               	bcf	3977,2,c	;volatile
   527                           
   528                           ; BSR set to: 0
   529                           ;main.c: 131: LATAbits.LA3 = 0;
   530  0000B2  9689               	bcf	3977,3,c	;volatile
   531                           
   532                           ; BSR set to: 0
   533                           ;main.c: 132: LATAbits.LA4 = 1;
   534  0000B4  8889               	bsf	3977,4,c	;volatile
   535                           
   536                           ;main.c: 133: break;
   537  0000B6  0012               	return	
   538  0000B8                     l81:
   539                           
   540                           ; BSR set to: 0
   541                           ;main.c: 134: }
   542                           ;main.c: 136: setMotores(0, 0);
   543                           
   544                           ; BSR set to: 0
   545  0000B8  0E00               	movlw	0
   546  0000BA  6E3D               	movwf	setMotores@speedI+1,c
   547  0000BC  0E00               	movlw	0
   548  0000BE  6E3C               	movwf	setMotores@speedI,c
   549  0000C0  0E00               	movlw	0
   550  0000C2  6E3F               	movwf	setMotores@speedD+1,c
   551  0000C4  0E00               	movlw	0
   552  0000C6  6E3E               	movwf	setMotores@speedD,c
   553  0000C8  ECB7  F001         	call	_setMotores	;wreg free
   554                           
   555                           ;main.c: 137: LATAbits.LA2 = 1;
   556  0000CC  8489               	bsf	3977,2,c	;volatile
   557                           
   558                           ;main.c: 138: LATAbits.LA3 = (unsigned)(millis() > (m + (4970U / 2)));
   559  0000CE  ECB3  F004         	call	_millis	;wreg free
   560  0000D2  0EB5               	movlw	181
   561  0000D4  2446               	addwf	loop@m,w,c
   562  0000D6  0100               	movlb	0	; () banked
   563  0000D8  6F68               	movwf	??_loop& (0+255),b
   564  0000DA  0E09               	movlw	9
   565  0000DC  2047               	addwfc	loop@m+1,w,c
   566  0000DE  6F69               	movwf	(??_loop+1)& (0+255),b
   567  0000E0  0E00               	movlw	0
   568  0000E2  2048               	addwfc	loop@m+2,w,c
   569  0000E4  6F6A               	movwf	(??_loop+2)& (0+255),b
   570  0000E6  0E00               	movlw	0
   571  0000E8  2049               	addwfc	loop@m+3,w,c
   572  0000EA  6F6B               	movwf	(??_loop+3)& (0+255),b
   573  0000EC  5013               	movf	?_millis,w,c
   574  0000EE  5D68               	subwf	??_loop& (0+255),w,b
   575  0000F0  5014               	movf	?_millis+1,w,c
   576  0000F2  5969               	subwfb	(??_loop+1)& (0+255),w,b
   577  0000F4  5015               	movf	?_millis+2,w,c
   578  0000F6  596A               	subwfb	(??_loop+2)& (0+255),w,b
   579  0000F8  5016               	movf	?_millis+3,w,c
   580  0000FA  596B               	subwfb	(??_loop+3)& (0+255),w,b
   581  0000FC  B0D8               	btfsc	status,0,c
   582  0000FE  D003               	goto	u1590
   583  000100  6B6C               	clrf	(??_loop+4)& (0+255),b
   584  000102  2B6C               	incf	(??_loop+4)& (0+255),f,b
   585  000104  D002               	goto	u1608
   586  000106                     u1590:
   587  000106  0100               	movlb	0	; () banked
   588  000108  6B6C               	clrf	(??_loop+4)& (0+255),b
   589  00010A                     u1608:
   590  00010A  476C               	rlncf	(??_loop+4)& (0+255),f,b
   591  00010C  476C               	rlncf	(??_loop+4)& (0+255),f,b
   592  00010E  476C               	rlncf	(??_loop+4)& (0+255),f,b
   593  000110  5089               	movf	3977,w,c	;volatile
   594  000112  196C               	xorwf	(??_loop+4)& (0+255),w,b
   595  000114  0BF7               	andlw	-9
   596  000116  196C               	xorwf	(??_loop+4)& (0+255),w,b
   597  000118  6E89               	movwf	3977,c	;volatile
   598                           
   599                           ; BSR set to: 0
   600                           ;main.c: 139: LATAbits.LA4 = 0;
   601  00011A  9889               	bcf	3977,4,c	;volatile
   602                           
   603                           ;main.c: 140: break;
   604  00011C  0012               	return	
   605  00011E                     l82:
   606                           
   607                           ;main.c: 143: if((unsigned)!PORTBbits.RB3 || (unsigned)!PORTCbits.RC6){
   608  00011E  A681               	btfss	3969,3,c	;volatile
   609  000120  D002               	goto	u1620
   610  000122  BC82               	btfsc	3970,6,c	;volatile
   611  000124  D00D               	goto	l83
   612  000126                     u1620:
   613                           
   614                           ;main.c: 144: estado = ATRAS;
   615  000126  0E0B               	movlw	11
   616  000128  6E4A               	movwf	loop@estado,c
   617                           
   618                           ;main.c: 145: m = millis();
   619  00012A  ECB3  F004         	call	_millis	;wreg free
   620  00012E  C013  F046         	movff	?_millis,loop@m
   621  000132  C014  F047         	movff	?_millis+1,loop@m+1
   622  000136  C015  F048         	movff	?_millis+2,loop@m+2
   623  00013A  C016  F049         	movff	?_millis+3,loop@m+3
   624                           
   625                           ;main.c: 146: break;
   626  00013E  0012               	return	
   627  000140                     l83:
   628                           
   629                           ;main.c: 147: }
   630                           ;main.c: 150: estado = ATAQUE;
   631  000140  0E04               	movlw	4
   632  000142  6E4A               	movwf	loop@estado,c
   633                           
   634                           ;main.c: 151: break;
   635  000144  0012               	return	
   636  000146                     
   637                           ;main.c: 196: setMotores(1000, 1000);
   638  000146  0E03               	movlw	3
   639  000148  6E3D               	movwf	setMotores@speedI+1,c
   640  00014A  0EE8               	movlw	232
   641  00014C  6E3C               	movwf	setMotores@speedI,c
   642  00014E  0E03               	movlw	3
   643  000150  6E3F               	movwf	setMotores@speedD+1,c
   644  000152  0EE8               	movlw	232
   645  000154  6E3E               	movwf	setMotores@speedD,c
   646  000156  ECB7  F001         	call	_setMotores	;wreg free
   647                           
   648                           ;main.c: 197: estado = ANALISIS;
   649  00015A  0E03               	movlw	3
   650  00015C  6E4A               	movwf	loop@estado,c
   651                           
   652                           ;main.c: 198: break;
   653  00015E  0012               	return	
   654  000160                     
   655                           ;main.c: 201: setMotores(1000, 1000 / 2);
   656  000160  0E03               	movlw	3
   657  000162  6E3D               	movwf	setMotores@speedI+1,c
   658  000164  0EE8               	movlw	232
   659  000166  6E3C               	movwf	setMotores@speedI,c
   660  000168  0E01               	movlw	1
   661  00016A  6E3F               	movwf	setMotores@speedD+1,c
   662  00016C  0EF4               	movlw	244
   663  00016E  6E3E               	movwf	setMotores@speedD,c
   664  000170  ECB7  F001         	call	_setMotores	;wreg free
   665                           
   666                           ;main.c: 202: direccion = DER;
   667  000174  0E05               	movlw	5
   668  000176  6E4B               	movwf	loop@direccion,c
   669                           
   670                           ;main.c: 203: estado = ANALISIS;
   671  000178  0E03               	movlw	3
   672  00017A  6E4A               	movwf	loop@estado,c
   673                           
   674                           ;main.c: 204: break;
   675  00017C  0012               	return	
   676  00017E                     
   677                           ;main.c: 207: setMotores(1000 / 2, 1000);
   678  00017E  0E01               	movlw	1
   679  000180  6E3D               	movwf	setMotores@speedI+1,c
   680  000182  0EF4               	movlw	244
   681  000184  6E3C               	movwf	setMotores@speedI,c
   682  000186  0E03               	movlw	3
   683  000188  6E3F               	movwf	setMotores@speedD+1,c
   684  00018A  0EE8               	movlw	232
   685  00018C  6E3E               	movwf	setMotores@speedD,c
   686  00018E  ECB7  F001         	call	_setMotores	;wreg free
   687                           
   688                           ;main.c: 208: direccion = IZQ;
   689  000192  0E08               	movlw	8
   690  000194  6E4B               	movwf	loop@direccion,c
   691                           
   692                           ;main.c: 209: estado = ANALISIS;
   693  000196  0E03               	movlw	3
   694  000198  6E4A               	movwf	loop@estado,c
   695                           
   696                           ;main.c: 210: break;
   697  00019A  0012               	return	
   698  00019C                     
   699                           ;main.c: 213: if(millis() > (m + 200U)){
   700  00019C  ECB3  F004         	call	_millis	;wreg free
   701  0001A0  0EC8               	movlw	200
   702  0001A2  2446               	addwf	loop@m,w,c
   703  0001A4  0100               	movlb	0	; () banked
   704  0001A6  6F68               	movwf	??_loop& (0+255),b
   705  0001A8  0E00               	movlw	0
   706  0001AA  2047               	addwfc	loop@m+1,w,c
   707  0001AC  6F69               	movwf	(??_loop+1)& (0+255),b
   708  0001AE  0E00               	movlw	0
   709  0001B0  2048               	addwfc	loop@m+2,w,c
   710  0001B2  6F6A               	movwf	(??_loop+2)& (0+255),b
   711  0001B4  0E00               	movlw	0
   712  0001B6  2049               	addwfc	loop@m+3,w,c
   713  0001B8  6F6B               	movwf	(??_loop+3)& (0+255),b
   714  0001BA  5013               	movf	?_millis,w,c
   715  0001BC  5D68               	subwf	??_loop& (0+255),w,b
   716  0001BE  5014               	movf	?_millis+1,w,c
   717  0001C0  5969               	subwfb	(??_loop+1)& (0+255),w,b
   718  0001C2  5015               	movf	?_millis+2,w,c
   719  0001C4  596A               	subwfb	(??_loop+2)& (0+255),w,b
   720  0001C6  5016               	movf	?_millis+3,w,c
   721  0001C8  596B               	subwfb	(??_loop+3)& (0+255),w,b
   722  0001CA  B0D8               	btfsc	status,0,c
   723  0001CC  D00F               	goto	l90
   724                           
   725                           ; BSR set to: 0
   726                           ;main.c: 214: estado = ANALISIS;
   727  0001CE  0E03               	movlw	3
   728  0001D0  6E4A               	movwf	loop@estado,c
   729                           
   730                           ;main.c: 217: estado = DERCIEGO;
   731  0001D2  0E0D               	movlw	13
   732  0001D4  6E4A               	movwf	loop@estado,c
   733                           
   734                           ; BSR set to: 0
   735                           ;main.c: 218: m = millis();
   736  0001D6  ECB3  F004         	call	_millis	;wreg free
   737  0001DA  C013  F046         	movff	?_millis,loop@m
   738  0001DE  C014  F047         	movff	?_millis+1,loop@m+1
   739  0001E2  C015  F048         	movff	?_millis+2,loop@m+2
   740  0001E6  C016  F049         	movff	?_millis+3,loop@m+3
   741                           
   742                           ;main.c: 221: break;
   743  0001EA  0012               	return	
   744  0001EC                     l90:
   745                           
   746                           ;main.c: 222: }
   747                           ;main.c: 224: setMotores(-1000, -1000);
   748  0001EC  0EFC               	movlw	252
   749  0001EE  6E3D               	movwf	setMotores@speedI+1,c
   750  0001F0  0E18               	movlw	24
   751  0001F2  6E3C               	movwf	setMotores@speedI,c
   752  0001F4  0EFC               	movlw	252
   753  0001F6  6E3F               	movwf	setMotores@speedD+1,c
   754  0001F8  0E18               	movlw	24
   755  0001FA  6E3E               	movwf	setMotores@speedD,c
   756  0001FC  ECB7  F001         	call	_setMotores	;wreg free
   757                           
   758                           ;main.c: 225: break;
   759  000200  0012               	return	
   760  000202                     
   761                           ;main.c: 228: setMotores(0, 1000);
   762  000202  0E00               	movlw	0
   763  000204  6E3D               	movwf	setMotores@speedI+1,c
   764  000206  0E00               	movlw	0
   765  000208  6E3C               	movwf	setMotores@speedI,c
   766  00020A  0E03               	movlw	3
   767  00020C  6E3F               	movwf	setMotores@speedD+1,c
   768  00020E  0EE8               	movlw	232
   769  000210  6E3E               	movwf	setMotores@speedD,c
   770  000212  ECB7  F001         	call	_setMotores	;wreg free
   771                           
   772                           ;main.c: 229: direccion = IZQ;
   773  000216  0E08               	movlw	8
   774  000218  6E4B               	movwf	loop@direccion,c
   775                           
   776                           ;main.c: 230: estado = ANALISIS;
   777  00021A  0E03               	movlw	3
   778  00021C  6E4A               	movwf	loop@estado,c
   779                           
   780                           ;main.c: 231: break;
   781  00021E  0012               	return	
   782  000220                     
   783                           ;main.c: 234: setMotores(1000, 0);
   784  000220  0E03               	movlw	3
   785  000222  6E3D               	movwf	setMotores@speedI+1,c
   786  000224  0EE8               	movlw	232
   787  000226  6E3C               	movwf	setMotores@speedI,c
   788  000228  0E00               	movlw	0
   789  00022A  6E3F               	movwf	setMotores@speedD+1,c
   790  00022C  0E00               	movlw	0
   791  00022E  6E3E               	movwf	setMotores@speedD,c
   792  000230  ECB7  F001         	call	_setMotores	;wreg free
   793                           
   794                           ;main.c: 235: direccion = DER;
   795  000234  0E05               	movlw	5
   796  000236  6E4B               	movwf	loop@direccion,c
   797                           
   798                           ;main.c: 236: estado = ANALISIS;
   799  000238  0E03               	movlw	3
   800  00023A  6E4A               	movwf	loop@estado,c
   801                           
   802                           ;main.c: 237: break;
   803  00023C  0012               	return	
   804  00023E                     
   805                           ;main.c: 240: setMotores(-700, 700);
   806  00023E  0EFD               	movlw	253
   807  000240  6E3D               	movwf	setMotores@speedI+1,c
   808  000242  0E44               	movlw	68
   809  000244  6E3C               	movwf	setMotores@speedI,c
   810  000246  0E02               	movlw	2
   811  000248  6E3F               	movwf	setMotores@speedD+1,c
   812  00024A  0EBC               	movlw	188
   813  00024C  6E3E               	movwf	setMotores@speedD,c
   814  00024E  ECB7  F001         	call	_setMotores	;wreg free
   815                           
   816                           ;main.c: 241: direccion = IZQ;
   817  000252  0E08               	movlw	8
   818  000254  6E4B               	movwf	loop@direccion,c
   819                           
   820                           ;main.c: 242: estado = ANALISIS;
   821  000256  0E03               	movlw	3
   822  000258  6E4A               	movwf	loop@estado,c
   823                           
   824                           ;main.c: 243: break;
   825  00025A  0012               	return	
   826  00025C                     
   827                           ;main.c: 246: setMotores(700, -700);
   828  00025C  0E02               	movlw	2
   829  00025E  6E3D               	movwf	setMotores@speedI+1,c
   830  000260  0EBC               	movlw	188
   831  000262  6E3C               	movwf	setMotores@speedI,c
   832  000264  0EFD               	movlw	253
   833  000266  6E3F               	movwf	setMotores@speedD+1,c
   834  000268  0E44               	movlw	68
   835  00026A  6E3E               	movwf	setMotores@speedD,c
   836  00026C  ECB7  F001         	call	_setMotores	;wreg free
   837                           
   838                           ;main.c: 247: direccion = DER;
   839  000270  0E05               	movlw	5
   840  000272  6E4B               	movwf	loop@direccion,c
   841                           
   842                           ;main.c: 248: estado = ANALISIS;
   843  000274  0E03               	movlw	3
   844  000276  6E4A               	movwf	loop@estado,c
   845                           
   846                           ;main.c: 249: break;
   847  000278  0012               	return	
   848  00027A                     
   849                           ;main.c: 252: if(millis() > (m + 500U)){
   850  00027A  ECB3  F004         	call	_millis	;wreg free
   851  00027E  0EF4               	movlw	244
   852  000280  2446               	addwf	loop@m,w,c
   853  000282  0100               	movlb	0	; () banked
   854  000284  6F68               	movwf	??_loop& (0+255),b
   855  000286  0E01               	movlw	1
   856  000288  2047               	addwfc	loop@m+1,w,c
   857  00028A  6F69               	movwf	(??_loop+1)& (0+255),b
   858  00028C  0E00               	movlw	0
   859  00028E  2048               	addwfc	loop@m+2,w,c
   860  000290  6F6A               	movwf	(??_loop+2)& (0+255),b
   861  000292  0E00               	movlw	0
   862  000294  2049               	addwfc	loop@m+3,w,c
   863  000296  6F6B               	movwf	(??_loop+3)& (0+255),b
   864  000298  5013               	movf	?_millis,w,c
   865  00029A  5D68               	subwf	??_loop& (0+255),w,b
   866  00029C  5014               	movf	?_millis+1,w,c
   867  00029E  5969               	subwfb	(??_loop+1)& (0+255),w,b
   868  0002A0  5015               	movf	?_millis+2,w,c
   869  0002A2  596A               	subwfb	(??_loop+2)& (0+255),w,b
   870  0002A4  5016               	movf	?_millis+3,w,c
   871  0002A6  596B               	subwfb	(??_loop+3)& (0+255),w,b
   872  0002A8  B0D8               	btfsc	status,0,c
   873  0002AA  D003               	goto	l96
   874                           
   875                           ; BSR set to: 0
   876                           ;main.c: 253: estado = ANALISIS;
   877  0002AC  0E03               	movlw	3
   878  0002AE  6E4A               	movwf	loop@estado,c
   879                           
   880                           ;main.c: 254: break;
   881  0002B0  0012               	return	
   882  0002B2                     l96:
   883                           
   884                           ; BSR set to: 0
   885                           ;main.c: 255: }
   886                           ;main.c: 257: setMotores(700, -700);
   887                           
   888                           ; BSR set to: 0
   889  0002B2  0E02               	movlw	2
   890  0002B4  6E3D               	movwf	setMotores@speedI+1,c
   891  0002B6  0EBC               	movlw	188
   892  0002B8  6E3C               	movwf	setMotores@speedI,c
   893  0002BA  0EFD               	movlw	253
   894  0002BC  6E3F               	movwf	setMotores@speedD+1,c
   895  0002BE  0E44               	movlw	68
   896  0002C0  6E3E               	movwf	setMotores@speedD,c
   897  0002C2  ECB7  F001         	call	_setMotores	;wreg free
   898                           
   899                           ;main.c: 258: break;
   900  0002C6  0012               	return	
   901  0002C8                     
   902                           ;main.c: 261: LATAbits.LA2 = (unsigned)!PORTBbits.RB3;
   903  0002C8  B681               	btfsc	3969,3,c	;volatile
   904  0002CA  D004               	goto	u1650
   905  0002CC  0100               	movlb	0	; () banked
   906  0002CE  6B68               	clrf	??_loop& (0+255),b
   907  0002D0  2B68               	incf	??_loop& (0+255),f,b
   908  0002D2  D002               	goto	u1668
   909  0002D4                     u1650:
   910  0002D4  0100               	movlb	0	; () banked
   911  0002D6  6B68               	clrf	??_loop& (0+255),b
   912  0002D8                     u1668:
   913  0002D8  4768               	rlncf	??_loop& (0+255),f,b
   914  0002DA  4768               	rlncf	??_loop& (0+255),f,b
   915  0002DC  5089               	movf	3977,w,c	;volatile
   916  0002DE  1968               	xorwf	??_loop& (0+255),w,b
   917  0002E0  0BFB               	andlw	-5
   918  0002E2  1968               	xorwf	??_loop& (0+255),w,b
   919  0002E4  6E89               	movwf	3977,c	;volatile
   920                           
   921                           ;main.c: 262: LATAbits.LA4 = (unsigned)!PORTCbits.RC6;
   922  0002E6  BC82               	btfsc	3970,6,c	;volatile
   923  0002E8  D003               	goto	u1670
   924  0002EA  6B68               	clrf	??_loop& (0+255),b
   925  0002EC  2B68               	incf	??_loop& (0+255),f,b
   926  0002EE  D002               	goto	u1688
   927  0002F0                     u1670:
   928  0002F0  0100               	movlb	0	; () banked
   929  0002F2  6B68               	clrf	??_loop& (0+255),b
   930  0002F4                     u1688:
   931  0002F4  3B68               	swapf	??_loop& (0+255),f,b
   932  0002F6  5089               	movf	3977,w,c	;volatile
   933  0002F8  1968               	xorwf	??_loop& (0+255),w,b
   934  0002FA  0BEF               	andlw	-17
   935  0002FC  1968               	xorwf	??_loop& (0+255),w,b
   936  0002FE  6E89               	movwf	3977,c	;volatile
   937                           
   938                           ; BSR set to: 0
   939                           ;main.c: 263: LATAbits.LA3 = 1;
   940  000300  8689               	bsf	3977,3,c	;volatile
   941                           
   942                           ; BSR set to: 0
   943                           ;main.c: 264: if((unsigned)!PORTAbits.RA1 || (unsigned)!PORTAbits.RA5){
   944  000302  A280               	btfss	3968,1,c	;volatile
   945  000304  D002               	goto	u1700
   946                           
   947                           ; BSR set to: 0
   948  000306  BA80               	btfsc	3968,5,c	;volatile
   949  000308  0012               	return	
   950  00030A                     u1700:
   951                           
   952                           ; BSR set to: 0
   953                           
   954                           ; BSR set to: 0
   955                           ;main.c: 265: while((unsigned)!PORTAbits.RA1 || (unsigned)!PORTAbits.RA5);
   956  00030A  B280               	btfsc	3968,1,c	;volatile
   957  00030C  AA80               	btfss	3968,5,c	;volatile
   958  00030E  D7FD               	goto	u1700
   959                           
   960                           ;main.c: 266: estado = 0;
   961  000310  0E00               	movlw	0
   962  000312  6E4A               	movwf	loop@estado,c
   963                           
   964                           ;main.c: 269: }
   965                           
   966                           ;main.c: 267: }
   967                           ;main.c: 268: break;
   968  000314  0012               	return	
   969  000316                     l66:
   970  000316  504A               	movf	loop@estado,w,c
   971                           
   972                           ; Switch size 1, requested type "space"
   973                           ; Number of cases is 14, Range of values is 0 to 13
   974                           ; switch strategies available:
   975                           ; Name         Instructions Cycles
   976                           ; simple_byte           43    22 (average)
   977                           ;	Chosen strategy is simple_byte
   978  000318  0A00               	xorlw	0	; case 0
   979  00031A  B4D8               	btfsc	status,2,c
   980  00031C  D67B               	goto	l67
   981  00031E  0A01               	xorlw	1	; case 1
   982  000320  B4D8               	btfsc	status,2,c
   983  000322  D69D               	goto	l79
   984  000324  0A03               	xorlw	3	; case 2
   985  000326  B4D8               	btfsc	status,2,c
   986  000328  D6A8               	goto	l80
   987  00032A  0A01               	xorlw	1	; case 3
   988  00032C  B4D8               	btfsc	status,2,c
   989  00032E  D6F7               	goto	l82
   990  000330  0A07               	xorlw	7	; case 4
   991  000332  B4D8               	btfsc	status,2,c
   992  000334  D708               	goto	l86
   993  000336  0A01               	xorlw	1	; case 5
   994  000338  B4D8               	btfsc	status,2,c
   995  00033A  D790               	goto	l94
   996  00033C  0A03               	xorlw	3	; case 6
   997  00033E  B4D8               	btfsc	status,2,c
   998  000340  D76F               	goto	l92
   999  000342  0A01               	xorlw	1	; case 7
  1000  000344  B4D8               	btfsc	status,2,c
  1001  000346  D70C               	goto	l87
  1002  000348  0A0F               	xorlw	15	; case 8
  1003  00034A  B4D8               	btfsc	status,2,c
  1004  00034C  D778               	goto	l93
  1005  00034E  0A01               	xorlw	1	; case 9
  1006  000350  B4D8               	btfsc	status,2,c
  1007  000352  D757               	goto	l91
  1008  000354  0A03               	xorlw	3	; case 10
  1009  000356  B4D8               	btfsc	status,2,c
  1010  000358  D712               	goto	l88
  1011  00035A  0A01               	xorlw	1	; case 11
  1012  00035C  B4D8               	btfsc	status,2,c
  1013  00035E  D71E               	goto	l89
  1014  000360  0A07               	xorlw	7	; case 12
  1015  000362  B4D8               	btfsc	status,2,c
  1016  000364  D7B1               	goto	l97
  1017  000366  0A01               	xorlw	1	; case 13
  1018  000368  A4D8               	btfss	status,2,c
  1019  00036A  0012               	return	
  1020  00036C  D786               	goto	l95
  1021  00036E                     __end_of_loop:
  1022                           	opt stack 0
  1023                           tblptru	equ	0xFF8
  1024                           tblptrh	equ	0xFF7
  1025                           tblptrl	equ	0xFF6
  1026                           tablat	equ	0xFF5
  1027                           postinc0	equ	0xFEE
  1028                           wreg	equ	0xFE8
  1029                           status	equ	0xFD8
  1030                           
  1031 ;; *************** function _millis *****************
  1032 ;; Defined at:
  1033 ;;		line 295 in file "main.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;		None
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;		None
  1038 ;; Return value:  Size  Location     Type
  1039 ;;                  4   18[COMRAM] unsigned long 
  1040 ;; Registers used:
  1041 ;;		None
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1047 ;;      Params:         4       0       0       0       0       0       0       0       0
  1048 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1049 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1050 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1051 ;;Total ram usage:        4 bytes
  1052 ;; Hardware stack levels used:    1
  1053 ;; Hardware stack levels required when called:    1
  1054 ;; This function calls:
  1055 ;;		Nothing
  1056 ;; This function is called by:
  1057 ;;		_loop
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           	psect	text2
  1062  000966                     __ptext2:
  1063                           	opt stack 0
  1064  000966                     _millis:
  1065                           	opt stack 28
  1066                           
  1067                           ;main.c: 296: return millisCounter;
  1068                           
  1069                           ;incstack = 0
  1070  000966  C042  F013         	movff	_millisCounter,?_millis
  1071  00096A  C043  F014         	movff	_millisCounter+1,?_millis+1
  1072  00096E  C044  F015         	movff	_millisCounter+2,?_millis+2
  1073  000972  C045  F016         	movff	_millisCounter+3,?_millis+3
  1074  000976  0012               	return		;funcret
  1075  000978                     __end_of_millis:
  1076                           	opt stack 0
  1077                           tblptru	equ	0xFF8
  1078                           tblptrh	equ	0xFF7
  1079                           tblptrl	equ	0xFF6
  1080                           tablat	equ	0xFF5
  1081                           postinc0	equ	0xFEE
  1082                           wreg	equ	0xFE8
  1083                           status	equ	0xFD8
  1084                           
  1085 ;; *************** function _init *****************
  1086 ;; Defined at:
  1087 ;;		line 13 in file "main.c"
  1088 ;; Parameters:    Size  Location     Type
  1089 ;;		None
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;		None
  1092 ;; Return value:  Size  Location     Type
  1093 ;;                  1    wreg      void 
  1094 ;; Registers used:
  1095 ;;		wreg, status,2, status,0, cstack
  1096 ;; Tracked objects:
  1097 ;;		On entry : 0/0
  1098 ;;		On exit  : 0/0
  1099 ;;		Unchanged: 0/0
  1100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1101 ;;      Params:         0       0       0       0       0       0       0       0       0
  1102 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1103 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1104 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1105 ;;Total ram usage:        0 bytes
  1106 ;; Hardware stack levels used:    1
  1107 ;; Hardware stack levels required when called:    4
  1108 ;; This function calls:
  1109 ;;		_setMotores
  1110 ;; This function is called by:
  1111 ;;		_main
  1112 ;; This function uses a non-reentrant model
  1113 ;;
  1114                           
  1115                           	psect	text3
  1116  00087E                     __ptext3:
  1117                           	opt stack 0
  1118  00087E                     _init:
  1119                           	opt stack 26
  1120                           
  1121                           ;main.c: 15: ADCON1bits.PCFG = 0b1111;
  1122                           
  1123                           ;incstack = 0
  1124  00087E  80C1               	bsf	4033,0,c	;volatile
  1125  000880  82C1               	bsf	4033,1,c	;volatile
  1126  000882  84C1               	bsf	4033,2,c	;volatile
  1127  000884  86C1               	bsf	4033,3,c	;volatile
  1128                           
  1129                           ;main.c: 18: UCONbits.USBEN = 0;
  1130  000886  966D               	bcf	3949,3,c	;volatile
  1131                           
  1132                           ;main.c: 19: UCFGbits.UTRDIS = 1;
  1133  000888  866F               	bsf	3951,3,c	;volatile
  1134                           
  1135                           ;main.c: 22: TRISAbits.RA1 = INPUT;
  1136  00088A  8292               	bsf	3986,1,c	;volatile
  1137                           
  1138                           ;main.c: 23: TRISAbits.RA5 = INPUT;
  1139  00088C  8A92               	bsf	3986,5,c	;volatile
  1140                           
  1141                           ;main.c: 24: TRISAbits.RA2 = OUTPUT;
  1142  00088E  9492               	bcf	3986,2,c	;volatile
  1143                           
  1144                           ;main.c: 25: TRISAbits.RA3 = OUTPUT;
  1145  000890  9692               	bcf	3986,3,c	;volatile
  1146                           
  1147                           ;main.c: 26: TRISAbits.RA4 = OUTPUT;
  1148  000892  9892               	bcf	3986,4,c	;volatile
  1149                           
  1150                           ;main.c: 27: TRISBbits.RB5 = INPUT;
  1151  000894  8A93               	bsf	3987,5,c	;volatile
  1152                           
  1153                           ;main.c: 28: TRISBbits.RB4 = INPUT;
  1154  000896  8893               	bsf	3987,4,c	;volatile
  1155                           
  1156                           ;main.c: 29: TRISBbits.RB1 = INPUT;
  1157  000898  8293               	bsf	3987,1,c	;volatile
  1158                           
  1159                           ;main.c: 32: TRISBbits.RB3 = INPUT;
  1160  00089A  8693               	bsf	3987,3,c	;volatile
  1161                           
  1162                           ;main.c: 33: TRISCbits.RC6 = INPUT;
  1163  00089C  8C94               	bsf	3988,6,c	;volatile
  1164                           
  1165                           ;main.c: 34: TRISCbits.RC1 = OUTPUT;
  1166  00089E  9294               	bcf	3988,1,c	;volatile
  1167                           
  1168                           ;main.c: 35: TRISCbits.RC2 = OUTPUT;
  1169  0008A0  9494               	bcf	3988,2,c	;volatile
  1170                           
  1171                           ;main.c: 36: TRISCbits.RC0 = OUTPUT;
  1172  0008A2  9094               	bcf	3988,0,c	;volatile
  1173                           
  1174                           ;main.c: 37: TRISAbits.RA0 = OUTPUT;
  1175  0008A4  9092               	bcf	3986,0,c	;volatile
  1176                           
  1177                           ;main.c: 40: T2CON = 0;
  1178  0008A6  0E00               	movlw	0
  1179  0008A8  6ECA               	movwf	4042,c	;volatile
  1180                           
  1181                           ;main.c: 41: T2CONbits.TOUTPS=11;
  1182  0008AA  50CA               	movf	4042,w,c	;volatile
  1183  0008AC  0B87               	andlw	-121
  1184  0008AE  0958               	iorlw	88
  1185  0008B0  6ECA               	movwf	4042,c	;volatile
  1186                           
  1187                           ;main.c: 42: T2CONbits.T2CKPS=1;
  1188  0008B2  50CA               	movf	4042,w,c	;volatile
  1189  0008B4  0BFC               	andlw	-4
  1190  0008B6  0901               	iorlw	1
  1191  0008B8  6ECA               	movwf	4042,c	;volatile
  1192                           
  1193                           ;main.c: 43: PR2=249;
  1194  0008BA  0EF9               	movlw	249
  1195  0008BC  6ECB               	movwf	4043,c	;volatile
  1196                           
  1197                           ;main.c: 44: T2CONbits.TMR2ON=1;
  1198  0008BE  84CA               	bsf	4042,2,c	;volatile
  1199                           
  1200                           ;main.c: 47: CCPR1L=0;
  1201  0008C0  0E00               	movlw	0
  1202  0008C2  6EBE               	movwf	4030,c	;volatile
  1203                           
  1204                           ;main.c: 48: CCP1CONbits.DC1B=0;
  1205  0008C4  0ECF               	movlw	-49
  1206  0008C6  16BD               	andwf	4029,f,c	;volatile
  1207                           
  1208                           ;main.c: 49: CCP1CONbits.CCP1M=12;
  1209  0008C8  50BD               	movf	4029,w,c	;volatile
  1210  0008CA  0BF0               	andlw	-16
  1211  0008CC  090C               	iorlw	12
  1212  0008CE  6EBD               	movwf	4029,c	;volatile
  1213                           
  1214                           ;main.c: 50: CCPR2L=0;
  1215  0008D0  0E00               	movlw	0
  1216  0008D2  6EBB               	movwf	4027,c	;volatile
  1217                           
  1218                           ;main.c: 51: CCP2CONbits.DC2B=0;
  1219  0008D4  0ECF               	movlw	-49
  1220  0008D6  16BA               	andwf	4026,f,c	;volatile
  1221                           
  1222                           ;main.c: 52: CCP2CONbits.CCP2M=12;
  1223  0008D8  50BA               	movf	4026,w,c	;volatile
  1224  0008DA  0BF0               	andlw	-16
  1225  0008DC  090C               	iorlw	12
  1226  0008DE  6EBA               	movwf	4026,c	;volatile
  1227                           
  1228                           ;main.c: 55: INTCON3=0;
  1229  0008E0  0E00               	movlw	0
  1230  0008E2  6EF0               	movwf	intcon3,c	;volatile
  1231                           
  1232                           ;main.c: 56: PIE1=0;
  1233  0008E4  0E00               	movlw	0
  1234  0008E6  6E9D               	movwf	3997,c	;volatile
  1235                           
  1236                           ;main.c: 57: PIE2=0;
  1237  0008E8  0E00               	movlw	0
  1238  0008EA  6EA0               	movwf	4000,c	;volatile
  1239                           
  1240                           ;main.c: 58: RCONbits.IPEN=0;
  1241  0008EC  9ED0               	bcf	4048,7,c	;volatile
  1242                           
  1243                           ;main.c: 59: PIE1bits.TMR2IE=1;
  1244  0008EE  829D               	bsf	3997,1,c	;volatile
  1245                           
  1246                           ;main.c: 60: INTCONbits.PEIE_GIEL=1;
  1247  0008F0  8CF2               	bsf	intcon,6,c	;volatile
  1248                           
  1249                           ;main.c: 61: INTCONbits.GIE_GIEH=1;
  1250  0008F2  8EF2               	bsf	intcon,7,c	;volatile
  1251                           
  1252                           ;main.c: 62: RCONbits.IPEN = 0;
  1253  0008F4  9ED0               	bcf	4048,7,c	;volatile
  1254                           
  1255                           ;main.c: 63: INTCONbits.PEIE = 1;
  1256  0008F6  8CF2               	bsf	intcon,6,c	;volatile
  1257                           
  1258                           ;main.c: 64: INTCONbits.GIE = 1;
  1259  0008F8  8EF2               	bsf	intcon,7,c	;volatile
  1260                           
  1261                           ;main.c: 67: setMotores(0, 0);
  1262  0008FA  0E00               	movlw	0
  1263  0008FC  6E3D               	movwf	setMotores@speedI+1,c
  1264  0008FE  0E00               	movlw	0
  1265  000900  6E3C               	movwf	setMotores@speedI,c
  1266  000902  0E00               	movlw	0
  1267  000904  6E3F               	movwf	setMotores@speedD+1,c
  1268  000906  0E00               	movlw	0
  1269  000908  6E3E               	movwf	setMotores@speedD,c
  1270  00090A  ECB7  F001         	call	_setMotores	;wreg free
  1271                           
  1272                           ;main.c: 68: LATAbits.LA2 = 0;
  1273  00090E  9489               	bcf	3977,2,c	;volatile
  1274                           
  1275                           ;main.c: 69: LATAbits.LA3 = 0;
  1276  000910  9689               	bcf	3977,3,c	;volatile
  1277                           
  1278                           ;main.c: 70: LATAbits.LA4 = 0;
  1279  000912  9889               	bcf	3977,4,c	;volatile
  1280  000914  0012               	return		;funcret
  1281  000916                     __end_of_init:
  1282                           	opt stack 0
  1283                           tblptru	equ	0xFF8
  1284                           tblptrh	equ	0xFF7
  1285                           tblptrl	equ	0xFF6
  1286                           tablat	equ	0xFF5
  1287                           intcon	equ	0xFF2
  1288                           intcon3	equ	0xFF0
  1289                           postinc0	equ	0xFEE
  1290                           wreg	equ	0xFE8
  1291                           status	equ	0xFD8
  1292                           
  1293 ;; *************** function _setMotores *****************
  1294 ;; Defined at:
  1295 ;;		line 272 in file "main.c"
  1296 ;; Parameters:    Size  Location     Type
  1297 ;;  speedI          2   59[COMRAM] int 
  1298 ;;  speedD          2   61[COMRAM] int 
  1299 ;; Auto vars:     Size  Location     Type
  1300 ;;  dutyD           2    6[BANK0 ] unsigned int 
  1301 ;;  dutyI           2    4[BANK0 ] unsigned int 
  1302 ;; Return value:  Size  Location     Type
  1303 ;;                  1    wreg      void 
  1304 ;; Registers used:
  1305 ;;		wreg, status,2, status,0, cstack
  1306 ;; Tracked objects:
  1307 ;;		On entry : 0/0
  1308 ;;		On exit  : 0/0
  1309 ;;		Unchanged: 0/0
  1310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1311 ;;      Params:         4       0       0       0       0       0       0       0       0
  1312 ;;      Locals:         0       8       0       0       0       0       0       0       0
  1313 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1314 ;;      Totals:         6       8       0       0       0       0       0       0       0
  1315 ;;Total ram usage:       14 bytes
  1316 ;; Hardware stack levels used:    1
  1317 ;; Hardware stack levels required when called:    3
  1318 ;; This function calls:
  1319 ;;		___ftmul
  1320 ;;		___fttol
  1321 ;;		___lwtoft
  1322 ;; This function is called by:
  1323 ;;		_init
  1324 ;;		_loop
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           	psect	text4
  1329  00036E                     __ptext4:
  1330                           	opt stack 0
  1331  00036E                     _setMotores:
  1332                           	opt stack 26
  1333                           
  1334                           ;main.c: 273: speedD = -speedD;
  1335                           
  1336                           ;incstack = 0
  1337  00036E  6C3E               	negf	setMotores@speedD,c
  1338  000370  1E3F               	comf	setMotores@speedD+1,f,c
  1339  000372  B0D8               	btfsc	status,0,c
  1340  000374  2A3F               	incf	setMotores@speedD+1,f,c
  1341                           
  1342                           ;main.c: 275: speedI = (speedI > 1000 ? 1000 : (speedI < -1000 ? -1000 : speedI));
  1343  000376  BE3D               	btfsc	setMotores@speedI+1,7,c
  1344  000378  D006               	goto	u1380
  1345  00037A  0EE9               	movlw	233
  1346  00037C  5C3C               	subwf	setMotores@speedI,w,c
  1347  00037E  0E03               	movlw	3
  1348  000380  583D               	subwfb	setMotores@speedI+1,w,c
  1349  000382  B0D8               	btfsc	status,0,c
  1350  000384  D017               	goto	l108
  1351  000386                     u1380:
  1352  000386  AE3D               	btfss	setMotores@speedI+1,7,c
  1353  000388  D006               	goto	u1390
  1354  00038A  0E18               	movlw	24
  1355  00038C  5C3C               	subwf	setMotores@speedI,w,c
  1356  00038E  0EFC               	movlw	252
  1357  000390  583D               	subwfb	setMotores@speedI+1,w,c
  1358  000392  A0D8               	btfss	status,0,c
  1359  000394  D005               	goto	l112
  1360  000396                     u1390:
  1361  000396  C03C  F060         	movff	setMotores@speedI,_setMotores$851
  1362  00039A  C03D  F061         	movff	setMotores@speedI+1,_setMotores$851+1
  1363  00039E  D005               	goto	l114
  1364  0003A0                     l112:
  1365  0003A0  0EFC               	movlw	252
  1366  0003A2  0100               	movlb	0	; () banked
  1367  0003A4  6F61               	movwf	(_setMotores$851+1)& (0+255),b
  1368  0003A6  0E18               	movlw	24
  1369  0003A8  6F60               	movwf	_setMotores$851& (0+255),b
  1370  0003AA                     l114:
  1371                           
  1372                           ; BSR set to: 0
  1373  0003AA  C060  F03C         	movff	_setMotores$851,setMotores@speedI
  1374  0003AE  C061  F03D         	movff	_setMotores$851+1,setMotores@speedI+1
  1375  0003B2  D004               	goto	l110
  1376  0003B4                     l108:
  1377  0003B4  0E03               	movlw	3
  1378  0003B6  6E3D               	movwf	setMotores@speedI+1,c
  1379  0003B8  0EE8               	movlw	232
  1380  0003BA  6E3C               	movwf	setMotores@speedI,c
  1381  0003BC                     l110:
  1382                           
  1383                           ;main.c: 276: speedD = (speedD > 1000 ? 1000 : (speedD < -1000 ? -1000 : speedD));
  1384  0003BC  BE3F               	btfsc	setMotores@speedD+1,7,c
  1385  0003BE  D006               	goto	u1400
  1386  0003C0  0EE9               	movlw	233
  1387  0003C2  5C3E               	subwf	setMotores@speedD,w,c
  1388  0003C4  0E03               	movlw	3
  1389  0003C6  583F               	subwfb	setMotores@speedD+1,w,c
  1390  0003C8  B0D8               	btfsc	status,0,c
  1391  0003CA  D017               	goto	l116
  1392  0003CC                     u1400:
  1393  0003CC  AE3F               	btfss	setMotores@speedD+1,7,c
  1394  0003CE  D006               	goto	u1410
  1395  0003D0  0E18               	movlw	24
  1396  0003D2  5C3E               	subwf	setMotores@speedD,w,c
  1397  0003D4  0EFC               	movlw	252
  1398  0003D6  583F               	subwfb	setMotores@speedD+1,w,c
  1399  0003D8  A0D8               	btfss	status,0,c
  1400  0003DA  D005               	goto	l120
  1401  0003DC                     u1410:
  1402  0003DC  C03E  F062         	movff	setMotores@speedD,_setMotores$852
  1403  0003E0  C03F  F063         	movff	setMotores@speedD+1,_setMotores$852+1
  1404  0003E4  D005               	goto	l122
  1405  0003E6                     l120:
  1406  0003E6  0EFC               	movlw	252
  1407  0003E8  0100               	movlb	0	; () banked
  1408  0003EA  6F63               	movwf	(_setMotores$852+1)& (0+255),b
  1409  0003EC  0E18               	movlw	24
  1410  0003EE  6F62               	movwf	_setMotores$852& (0+255),b
  1411  0003F0                     l122:
  1412                           
  1413                           ; BSR set to: 0
  1414  0003F0  C062  F03E         	movff	_setMotores$852,setMotores@speedD
  1415  0003F4  C063  F03F         	movff	_setMotores$852+1,setMotores@speedD+1
  1416  0003F8  D004               	goto	l118
  1417  0003FA                     l116:
  1418  0003FA  0E03               	movlw	3
  1419  0003FC  6E3F               	movwf	setMotores@speedD+1,c
  1420  0003FE  0EE8               	movlw	232
  1421  000400  6E3E               	movwf	setMotores@speedD,c
  1422  000402                     l118:
  1423                           
  1424                           ;main.c: 278: LATAbits.LA0 = (unsigned)(speedI < 0);
  1425  000402  AE3D               	btfss	setMotores@speedI+1,7,c
  1426  000404  D003               	goto	u1420
  1427  000406  6A40               	clrf	??_setMotores& (0+255),c
  1428  000408  2A40               	incf	??_setMotores& (0+255),f,c
  1429  00040A  D001               	goto	u1438
  1430  00040C                     u1420:
  1431  00040C  6A40               	clrf	??_setMotores& (0+255),c
  1432  00040E                     u1438:
  1433  00040E  5089               	movf	3977,w,c	;volatile
  1434  000410  1840               	xorwf	??_setMotores,w,c
  1435  000412  0BFE               	andlw	-2
  1436  000414  1840               	xorwf	??_setMotores,w,c
  1437  000416  6E89               	movwf	3977,c	;volatile
  1438                           
  1439                           ;main.c: 279: LATCbits.LC0 = (unsigned)(speedD < 0);
  1440  000418  AE3F               	btfss	setMotores@speedD+1,7,c
  1441  00041A  D003               	goto	u1440
  1442  00041C  6A40               	clrf	??_setMotores& (0+255),c
  1443  00041E  2A40               	incf	??_setMotores& (0+255),f,c
  1444  000420  D001               	goto	u1458
  1445  000422                     u1440:
  1446  000422  6A40               	clrf	??_setMotores& (0+255),c
  1447  000424                     u1458:
  1448  000424  508B               	movf	3979,w,c	;volatile
  1449  000426  1840               	xorwf	??_setMotores,w,c
  1450  000428  0BFE               	andlw	-2
  1451  00042A  1840               	xorwf	??_setMotores,w,c
  1452  00042C  6E8B               	movwf	3979,c	;volatile
  1453                           
  1454                           ;main.c: 281: unsigned int dutyI = (unsigned)(speedI < 0 ? 1000+speedI : speedI);
  1455  00042E  BE3D               	btfsc	setMotores@speedI+1,7,c
  1456  000430  D005               	goto	l124
  1457  000432  C03C  F064         	movff	setMotores@speedI,setMotores@dutyI
  1458  000436  C03D  F065         	movff	setMotores@speedI+1,setMotores@dutyI+1
  1459  00043A  D007               	goto	l126
  1460  00043C                     l124:
  1461  00043C  0EE8               	movlw	232
  1462  00043E  243C               	addwf	setMotores@speedI,w,c
  1463  000440  0100               	movlb	0	; () banked
  1464  000442  6F64               	movwf	setMotores@dutyI& (0+255),b
  1465  000444  0E03               	movlw	3
  1466  000446  203D               	addwfc	setMotores@speedI+1,w,c
  1467  000448  6F65               	movwf	(setMotores@dutyI+1)& (0+255),b
  1468  00044A                     l126:
  1469                           
  1470                           ;main.c: 282: unsigned int dutyD = (unsigned)(speedD < 0 ? 1000+speedD : speedD);
  1471  00044A  BE3F               	btfsc	setMotores@speedD+1,7,c
  1472  00044C  D005               	goto	l128
  1473  00044E  C03E  F066         	movff	setMotores@speedD,setMotores@dutyD
  1474  000452  C03F  F067         	movff	setMotores@speedD+1,setMotores@dutyD+1
  1475  000456  D007               	goto	l130
  1476  000458                     l128:
  1477  000458  0EE8               	movlw	232
  1478  00045A  243E               	addwf	setMotores@speedD,w,c
  1479  00045C  0100               	movlb	0	; () banked
  1480  00045E  6F66               	movwf	setMotores@dutyD& (0+255),b
  1481  000460  0E03               	movlw	3
  1482  000462  203F               	addwfc	setMotores@speedD+1,w,c
  1483  000464  6F67               	movwf	(setMotores@dutyD+1)& (0+255),b
  1484  000466                     l130:
  1485                           
  1486                           ;main.c: 284: dutyI *= 1.023;
  1487                           
  1488                           ; BSR set to: 0
  1489  000466  0EF2               	movlw	242
  1490  000468  6E21               	movwf	___ftmul@f2,c
  1491  00046A  0E82               	movlw	130
  1492  00046C  6E22               	movwf	___ftmul@f2+1,c
  1493  00046E  0E3F               	movlw	63
  1494  000470  6E23               	movwf	___ftmul@f2+2,c
  1495  000472  C064  F01B         	movff	setMotores@dutyI,___lwtoft@c
  1496  000476  C065  F01C         	movff	setMotores@dutyI+1,___lwtoft@c+1
  1497  00047A  ECA1  F004         	call	___lwtoft	;wreg free
  1498  00047E  C01B  F01E         	movff	?___lwtoft,___ftmul@f1
  1499  000482  C01C  F01F         	movff	?___lwtoft+1,___ftmul@f1+1
  1500  000486  C01D  F020         	movff	?___lwtoft+2,___ftmul@f1+2
  1501  00048A  EC1A  F003         	call	___ftmul	;wreg free
  1502  00048E  C01E  F02D         	movff	?___ftmul,___fttol@f1
  1503  000492  C01F  F02E         	movff	?___ftmul+1,___fttol@f1+1
  1504  000496  C020  F02F         	movff	?___ftmul+2,___fttol@f1+2
  1505  00049A  ECA0  F002         	call	___fttol	;wreg free
  1506  00049E  C02D  F064         	movff	?___fttol,setMotores@dutyI
  1507  0004A2  C02E  F065         	movff	?___fttol+1,setMotores@dutyI+1
  1508                           
  1509                           ;main.c: 285: dutyD *= 1.023;
  1510  0004A6  0EF2               	movlw	242
  1511  0004A8  6E21               	movwf	___ftmul@f2,c
  1512  0004AA  0E82               	movlw	130
  1513  0004AC  6E22               	movwf	___ftmul@f2+1,c
  1514  0004AE  0E3F               	movlw	63
  1515  0004B0  6E23               	movwf	___ftmul@f2+2,c
  1516  0004B2  C066  F01B         	movff	setMotores@dutyD,___lwtoft@c
  1517  0004B6  C067  F01C         	movff	setMotores@dutyD+1,___lwtoft@c+1
  1518  0004BA  ECA1  F004         	call	___lwtoft	;wreg free
  1519  0004BE  C01B  F01E         	movff	?___lwtoft,___ftmul@f1
  1520  0004C2  C01C  F01F         	movff	?___lwtoft+1,___ftmul@f1+1
  1521  0004C6  C01D  F020         	movff	?___lwtoft+2,___ftmul@f1+2
  1522  0004CA  EC1A  F003         	call	___ftmul	;wreg free
  1523  0004CE  C01E  F02D         	movff	?___ftmul,___fttol@f1
  1524  0004D2  C01F  F02E         	movff	?___ftmul+1,___fttol@f1+1
  1525  0004D6  C020  F02F         	movff	?___ftmul+2,___fttol@f1+2
  1526  0004DA  ECA0  F002         	call	___fttol	;wreg free
  1527  0004DE  C02D  F066         	movff	?___fttol,setMotores@dutyD
  1528  0004E2  C02E  F067         	movff	?___fttol+1,setMotores@dutyD+1
  1529                           
  1530                           ;main.c: 287: CCPR1L = dutyI / 4;
  1531  0004E6  C064  F040         	movff	setMotores@dutyI,??_setMotores
  1532  0004EA  C065  F041         	movff	setMotores@dutyI+1,??_setMotores+1
  1533  0004EE  90D8               	bcf	status,0,c
  1534  0004F0  3241               	rrcf	??_setMotores+1,f,c
  1535  0004F2  3240               	rrcf	??_setMotores,f,c
  1536  0004F4  90D8               	bcf	status,0,c
  1537  0004F6  3241               	rrcf	??_setMotores+1,f,c
  1538  0004F8  3240               	rrcf	??_setMotores,f,c
  1539  0004FA  5040               	movf	??_setMotores,w,c
  1540  0004FC  6EBE               	movwf	4030,c	;volatile
  1541                           
  1542                           ;main.c: 288: CCPR2L = dutyD / 4;
  1543  0004FE  C066  F040         	movff	setMotores@dutyD,??_setMotores
  1544  000502  C067  F041         	movff	setMotores@dutyD+1,??_setMotores+1
  1545  000506  90D8               	bcf	status,0,c
  1546  000508  3241               	rrcf	??_setMotores+1,f,c
  1547  00050A  3240               	rrcf	??_setMotores,f,c
  1548  00050C  90D8               	bcf	status,0,c
  1549  00050E  3241               	rrcf	??_setMotores+1,f,c
  1550  000510  3240               	rrcf	??_setMotores,f,c
  1551  000512  5040               	movf	??_setMotores,w,c
  1552  000514  6EBB               	movwf	4027,c	;volatile
  1553                           
  1554                           ;main.c: 289: CCP1CONbits.DC1B = dutyI % 4;
  1555  000516  C064  F040         	movff	setMotores@dutyI,??_setMotores
  1556  00051A  0E03               	movlw	3
  1557  00051C  1640               	andwf	??_setMotores,f,c
  1558  00051E  3A40               	swapf	??_setMotores,f,c
  1559  000520  50BD               	movf	4029,w,c	;volatile
  1560  000522  1840               	xorwf	??_setMotores,w,c
  1561  000524  0BCF               	andlw	-49
  1562  000526  1840               	xorwf	??_setMotores,w,c
  1563  000528  6EBD               	movwf	4029,c	;volatile
  1564                           
  1565                           ;main.c: 290: CCP2CONbits.DC2B = dutyD % 4;
  1566  00052A  C066  F040         	movff	setMotores@dutyD,??_setMotores
  1567  00052E  0E03               	movlw	3
  1568  000530  1640               	andwf	??_setMotores,f,c
  1569  000532  3A40               	swapf	??_setMotores,f,c
  1570  000534  50BA               	movf	4026,w,c	;volatile
  1571  000536  1840               	xorwf	??_setMotores,w,c
  1572  000538  0BCF               	andlw	-49
  1573  00053A  1840               	xorwf	??_setMotores,w,c
  1574  00053C  6EBA               	movwf	4026,c	;volatile
  1575  00053E  0012               	return		;funcret
  1576  000540                     __end_of_setMotores:
  1577                           	opt stack 0
  1578                           tblptru	equ	0xFF8
  1579                           tblptrh	equ	0xFF7
  1580                           tblptrl	equ	0xFF6
  1581                           tablat	equ	0xFF5
  1582                           intcon	equ	0xFF2
  1583                           intcon3	equ	0xFF0
  1584                           postinc0	equ	0xFEE
  1585                           wreg	equ	0xFE8
  1586                           status	equ	0xFD8
  1587                           
  1588 ;; *************** function ___lwtoft *****************
  1589 ;; Defined at:
  1590 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  1591 ;; Parameters:    Size  Location     Type
  1592 ;;  c               2   26[COMRAM] unsigned int 
  1593 ;; Auto vars:     Size  Location     Type
  1594 ;;		None
  1595 ;; Return value:  Size  Location     Type
  1596 ;;                  3   26[COMRAM] float 
  1597 ;; Registers used:
  1598 ;;		wreg, status,2, status,0, cstack
  1599 ;; Tracked objects:
  1600 ;;		On entry : 0/0
  1601 ;;		On exit  : 0/0
  1602 ;;		Unchanged: 0/0
  1603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1604 ;;      Params:         3       0       0       0       0       0       0       0       0
  1605 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1606 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1607 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1608 ;;Total ram usage:        3 bytes
  1609 ;; Hardware stack levels used:    1
  1610 ;; Hardware stack levels required when called:    2
  1611 ;; This function calls:
  1612 ;;		___ftpack
  1613 ;; This function is called by:
  1614 ;;		_setMotores
  1615 ;; This function uses a non-reentrant model
  1616 ;;
  1617                           
  1618                           	psect	text5
  1619  000942                     __ptext5:
  1620                           	opt stack 0
  1621  000942                     ___lwtoft:
  1622                           	opt stack 26
  1623                           
  1624                           ;incstack = 0
  1625  000942  C01B  F013         	movff	___lwtoft@c,___ftpack@arg
  1626  000946  C01C  F014         	movff	___lwtoft@c+1,___ftpack@arg+1
  1627  00094A  6A15               	clrf	___ftpack@arg+2,c
  1628  00094C  0E8E               	movlw	142
  1629  00094E  6E16               	movwf	___ftpack@exp,c
  1630  000950  0E00               	movlw	0
  1631  000952  6E17               	movwf	___ftpack@sign,c
  1632  000954  EC94  F003         	call	___ftpack	;wreg free
  1633  000958  C013  F01B         	movff	?___ftpack,?___lwtoft
  1634  00095C  C014  F01C         	movff	?___ftpack+1,?___lwtoft+1
  1635  000960  C015  F01D         	movff	?___ftpack+2,?___lwtoft+2
  1636  000964  0012               	return	
  1637  000966                     __end_of___lwtoft:
  1638                           	opt stack 0
  1639                           tblptru	equ	0xFF8
  1640                           tblptrh	equ	0xFF7
  1641                           tblptrl	equ	0xFF6
  1642                           tablat	equ	0xFF5
  1643                           intcon	equ	0xFF2
  1644                           intcon3	equ	0xFF0
  1645                           postinc0	equ	0xFEE
  1646                           wreg	equ	0xFE8
  1647                           status	equ	0xFD8
  1648                           
  1649 ;; *************** function ___fttol *****************
  1650 ;; Defined at:
  1651 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;  f1              3   44[COMRAM] float 
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;  lval            4   54[COMRAM] unsigned long 
  1656 ;;  exp1            1   58[COMRAM] unsigned char 
  1657 ;;  sign1           1   53[COMRAM] unsigned char 
  1658 ;; Return value:  Size  Location     Type
  1659 ;;                  4   44[COMRAM] long 
  1660 ;; Registers used:
  1661 ;;		wreg, status,2, status,0
  1662 ;; Tracked objects:
  1663 ;;		On entry : 0/0
  1664 ;;		On exit  : 0/0
  1665 ;;		Unchanged: 0/0
  1666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1667 ;;      Params:         4       0       0       0       0       0       0       0       0
  1668 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1669 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1670 ;;      Totals:        15       0       0       0       0       0       0       0       0
  1671 ;;Total ram usage:       15 bytes
  1672 ;; Hardware stack levels used:    1
  1673 ;; Hardware stack levels required when called:    1
  1674 ;; This function calls:
  1675 ;;		Nothing
  1676 ;; This function is called by:
  1677 ;;		_setMotores
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           	psect	text6
  1682  000540                     __ptext6:
  1683                           	opt stack 0
  1684  000540                     ___fttol:
  1685                           	opt stack 27
  1686                           
  1687                           ;incstack = 0
  1688  000540  C02F  F031         	movff	___fttol@f1+2,??___fttol
  1689  000544  6A32               	clrf	(??___fttol+1)& (0+255),c
  1690  000546  6A33               	clrf	(??___fttol+2)& (0+255),c
  1691  000548  342E               	rlcf	___fttol@f1+1,w,c
  1692  00054A  3631               	rlcf	??___fttol& (0+255),f,c
  1693  00054C  E301               	bnc	u1301
  1694  00054E  8032               	bsf	(??___fttol+1)& (0+255),0,c
  1695  000550                     u1301:
  1696  000550  5031               	movf	??___fttol,w,c
  1697  000552  6E3B               	movwf	___fttol@exp1,c
  1698  000554  503B               	movf	___fttol@exp1,w,c
  1699  000556  A4D8               	btfss	status,2,c
  1700  000558  D009               	goto	l465
  1701  00055A  0E00               	movlw	0
  1702  00055C  6E2D               	movwf	?___fttol,c
  1703  00055E  0E00               	movlw	0
  1704  000560  6E2E               	movwf	?___fttol+1,c
  1705  000562  0E00               	movlw	0
  1706  000564  6E2F               	movwf	?___fttol+2,c
  1707  000566  0E00               	movlw	0
  1708  000568  6E30               	movwf	?___fttol+3,c
  1709  00056A  0012               	return	
  1710  00056C                     l465:
  1711  00056C  0E17               	movlw	23
  1712  00056E  6E31               	movwf	??___fttol& (0+255),c
  1713  000570  C02D  F032         	movff	___fttol@f1,??___fttol+1
  1714  000574  C02E  F033         	movff	___fttol@f1+1,??___fttol+2
  1715  000578  C02F  F034         	movff	___fttol@f1+2,??___fttol+3
  1716  00057C  2831               	incf	??___fttol,w,c
  1717  00057E  6E35               	movwf	(??___fttol+4)& (0+255),c
  1718  000580  D004               	goto	u1320
  1719  000582                     u1325:
  1720  000582  90D8               	bcf	status,0,c
  1721  000584  3234               	rrcf	??___fttol+3,f,c
  1722  000586  3233               	rrcf	??___fttol+2,f,c
  1723  000588  3232               	rrcf	??___fttol+1,f,c
  1724  00058A                     u1320:
  1725  00058A  2E35               	decfsz	(??___fttol+4)& (0+255),f,c
  1726  00058C  D7FA               	goto	u1325
  1727  00058E  5032               	movf	??___fttol+1,w,c
  1728  000590  6E36               	movwf	___fttol@sign1,c
  1729  000592  8E2E               	bsf	___fttol@f1+1,7,c
  1730  000594  0EFF               	movlw	255
  1731  000596  162D               	andwf	___fttol@f1,f,c
  1732  000598  0EFF               	movlw	255
  1733  00059A  162E               	andwf	___fttol@f1+1,f,c
  1734  00059C  0E00               	movlw	0
  1735  00059E  162F               	andwf	___fttol@f1+2,f,c
  1736  0005A0  502D               	movf	___fttol@f1,w,c
  1737  0005A2  6E37               	movwf	___fttol@lval,c
  1738  0005A4  502E               	movf	___fttol@f1+1,w,c
  1739  0005A6  6E38               	movwf	___fttol@lval+1,c
  1740  0005A8  502F               	movf	___fttol@f1+2,w,c
  1741  0005AA  6E39               	movwf	___fttol@lval+2,c
  1742  0005AC  6A3A               	clrf	___fttol@lval+3,c
  1743  0005AE  0E8E               	movlw	142
  1744  0005B0  5E3B               	subwf	___fttol@exp1,f,c
  1745  0005B2  AE3B               	btfss	___fttol@exp1,7,c
  1746  0005B4  D016               	goto	l467
  1747  0005B6  503B               	movf	___fttol@exp1,w,c
  1748  0005B8  0A80               	xorlw	128
  1749  0005BA  0F8F               	addlw	143
  1750  0005BC  B0D8               	btfsc	status,0,c
  1751  0005BE  D009               	goto	l468
  1752  0005C0  0E00               	movlw	0
  1753  0005C2  6E2D               	movwf	?___fttol,c
  1754  0005C4  0E00               	movlw	0
  1755  0005C6  6E2E               	movwf	?___fttol+1,c
  1756  0005C8  0E00               	movlw	0
  1757  0005CA  6E2F               	movwf	?___fttol+2,c
  1758  0005CC  0E00               	movlw	0
  1759  0005CE  6E30               	movwf	?___fttol+3,c
  1760  0005D0  0012               	return	
  1761  0005D2                     l468:
  1762  0005D2  90D8               	bcf	status,0,c
  1763  0005D4  323A               	rrcf	___fttol@lval+3,f,c
  1764  0005D6  3239               	rrcf	___fttol@lval+2,f,c
  1765  0005D8  3238               	rrcf	___fttol@lval+1,f,c
  1766  0005DA  3237               	rrcf	___fttol@lval,f,c
  1767  0005DC  3E3B               	incfsz	___fttol@exp1,f,c
  1768  0005DE  D7F9               	goto	l468
  1769  0005E0  D015               	goto	u1360
  1770  0005E2                     l467:
  1771  0005E2  0E17               	movlw	23
  1772  0005E4  643B               	cpfsgt	___fttol@exp1,c
  1773  0005E6  D00F               	goto	l473
  1774  0005E8  0E00               	movlw	0
  1775  0005EA  6E2D               	movwf	?___fttol,c
  1776  0005EC  0E00               	movlw	0
  1777  0005EE  6E2E               	movwf	?___fttol+1,c
  1778  0005F0  0E00               	movlw	0
  1779  0005F2  6E2F               	movwf	?___fttol+2,c
  1780  0005F4  0E00               	movlw	0
  1781  0005F6  6E30               	movwf	?___fttol+3,c
  1782  0005F8  0012               	return	
  1783  0005FA  90D8               	bcf	status,0,c
  1784  0005FC  3637               	rlcf	___fttol@lval,f,c
  1785  0005FE  3638               	rlcf	___fttol@lval+1,f,c
  1786  000600  3639               	rlcf	___fttol@lval+2,f,c
  1787  000602  363A               	rlcf	___fttol@lval+3,f,c
  1788  000604  063B               	decf	___fttol@exp1,f,c
  1789  000606                     l473:
  1790  000606  503B               	movf	___fttol@exp1,w,c
  1791  000608  A4D8               	btfss	status,2,c
  1792  00060A  D7F7               	goto	l474
  1793  00060C                     u1360:
  1794  00060C  5036               	movf	___fttol@sign1,w,c
  1795  00060E  B4D8               	btfsc	status,2,c
  1796  000610  D008               	goto	l476
  1797  000612  1E3A               	comf	___fttol@lval+3,f,c
  1798  000614  1E39               	comf	___fttol@lval+2,f,c
  1799  000616  1E38               	comf	___fttol@lval+1,f,c
  1800  000618  6C37               	negf	___fttol@lval,c
  1801  00061A  0E00               	movlw	0
  1802  00061C  2238               	addwfc	___fttol@lval+1,f,c
  1803  00061E  2239               	addwfc	___fttol@lval+2,f,c
  1804  000620  223A               	addwfc	___fttol@lval+3,f,c
  1805  000622                     l476:
  1806  000622  C037  F02D         	movff	___fttol@lval,?___fttol
  1807  000626  C038  F02E         	movff	___fttol@lval+1,?___fttol+1
  1808  00062A  C039  F02F         	movff	___fttol@lval+2,?___fttol+2
  1809  00062E  C03A  F030         	movff	___fttol@lval+3,?___fttol+3
  1810  000632  0012               	return	
  1811  000634                     __end_of___fttol:
  1812                           	opt stack 0
  1813                           tblptru	equ	0xFF8
  1814                           tblptrh	equ	0xFF7
  1815                           tblptrl	equ	0xFF6
  1816                           tablat	equ	0xFF5
  1817                           intcon	equ	0xFF2
  1818                           intcon3	equ	0xFF0
  1819                           postinc0	equ	0xFEE
  1820                           wreg	equ	0xFE8
  1821                           status	equ	0xFD8
  1822                           
  1823 ;; *************** function ___ftmul *****************
  1824 ;; Defined at:
  1825 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  1826 ;; Parameters:    Size  Location     Type
  1827 ;;  f1              3   29[COMRAM] float 
  1828 ;;  f2              3   32[COMRAM] float 
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;  f3_as_produc    3   39[COMRAM] unsigned um
  1831 ;;  sign            1   43[COMRAM] unsigned char 
  1832 ;;  cntr            1   42[COMRAM] unsigned char 
  1833 ;;  exp             1   38[COMRAM] unsigned char 
  1834 ;; Return value:  Size  Location     Type
  1835 ;;                  3   29[COMRAM] float 
  1836 ;; Registers used:
  1837 ;;		wreg, status,2, status,0, cstack
  1838 ;; Tracked objects:
  1839 ;;		On entry : 0/0
  1840 ;;		On exit  : 0/0
  1841 ;;		Unchanged: 0/0
  1842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1843 ;;      Params:         6       0       0       0       0       0       0       0       0
  1844 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1845 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1846 ;;      Totals:        15       0       0       0       0       0       0       0       0
  1847 ;;Total ram usage:       15 bytes
  1848 ;; Hardware stack levels used:    1
  1849 ;; Hardware stack levels required when called:    2
  1850 ;; This function calls:
  1851 ;;		___ftpack
  1852 ;; This function is called by:
  1853 ;;		_setMotores
  1854 ;; This function uses a non-reentrant model
  1855 ;;
  1856                           
  1857                           	psect	text7
  1858  000634                     __ptext7:
  1859                           	opt stack 0
  1860  000634                     ___ftmul:
  1861                           	opt stack 26
  1862                           
  1863                           ;incstack = 0
  1864  000634  C020  F024         	movff	___ftmul@f1+2,??___ftmul
  1865  000638  6A25               	clrf	(??___ftmul+1)& (0+255),c
  1866  00063A  6A26               	clrf	(??___ftmul+2)& (0+255),c
  1867  00063C  341F               	rlcf	___ftmul@f1+1,w,c
  1868  00063E  3624               	rlcf	??___ftmul& (0+255),f,c
  1869  000640  E301               	bnc	u1241
  1870  000642  8025               	bsf	(??___ftmul+1)& (0+255),0,c
  1871  000644                     u1241:
  1872  000644  5024               	movf	??___ftmul,w,c
  1873  000646  6E27               	movwf	___ftmul@exp,c
  1874  000648  5027               	movf	___ftmul@exp,w,c
  1875  00064A  A4D8               	btfss	status,2,c
  1876  00064C  D007               	goto	l444
  1877  00064E  0E00               	movlw	0
  1878  000650  6E1E               	movwf	?___ftmul,c
  1879  000652  0E00               	movlw	0
  1880  000654  6E1F               	movwf	?___ftmul+1,c
  1881  000656  0E00               	movlw	0
  1882  000658  6E20               	movwf	?___ftmul+2,c
  1883  00065A  0012               	return	
  1884  00065C                     l444:
  1885  00065C  C023  F024         	movff	___ftmul@f2+2,??___ftmul
  1886  000660  6A25               	clrf	(??___ftmul+1)& (0+255),c
  1887  000662  6A26               	clrf	(??___ftmul+2)& (0+255),c
  1888  000664  3422               	rlcf	___ftmul@f2+1,w,c
  1889  000666  3624               	rlcf	??___ftmul& (0+255),f,c
  1890  000668  E301               	bnc	u1261
  1891  00066A  8025               	bsf	(??___ftmul+1)& (0+255),0,c
  1892  00066C                     u1261:
  1893  00066C  5024               	movf	??___ftmul,w,c
  1894  00066E  6E2C               	movwf	___ftmul@sign,c
  1895  000670  502C               	movf	___ftmul@sign,w,c
  1896  000672  A4D8               	btfss	status,2,c
  1897  000674  D007               	goto	l446
  1898  000676  0E00               	movlw	0
  1899  000678  6E1E               	movwf	?___ftmul,c
  1900  00067A  0E00               	movlw	0
  1901  00067C  6E1F               	movwf	?___ftmul+1,c
  1902  00067E  0E00               	movlw	0
  1903  000680  6E20               	movwf	?___ftmul+2,c
  1904  000682  0012               	return	
  1905  000684                     l446:
  1906  000684  502C               	movf	___ftmul@sign,w,c
  1907  000686  0F7B               	addlw	123
  1908  000688  2627               	addwf	___ftmul@exp,f,c
  1909  00068A  C020  F02C         	movff	___ftmul@f1+2,___ftmul@sign
  1910  00068E  5023               	movf	___ftmul@f2+2,w,c
  1911  000690  1A2C               	xorwf	___ftmul@sign,f,c
  1912  000692  0E80               	movlw	128
  1913  000694  162C               	andwf	___ftmul@sign,f,c
  1914  000696  8E1F               	bsf	___ftmul@f1+1,7,c
  1915  000698  8E22               	bsf	___ftmul@f2+1,7,c
  1916  00069A  0EFF               	movlw	255
  1917  00069C  1621               	andwf	___ftmul@f2,f,c
  1918  00069E  0EFF               	movlw	255
  1919  0006A0  1622               	andwf	___ftmul@f2+1,f,c
  1920  0006A2  0E00               	movlw	0
  1921  0006A4  1623               	andwf	___ftmul@f2+2,f,c
  1922  0006A6  0E00               	movlw	0
  1923  0006A8  6E28               	movwf	___ftmul@f3_as_product,c
  1924  0006AA  0E00               	movlw	0
  1925  0006AC  6E29               	movwf	___ftmul@f3_as_product+1,c
  1926  0006AE  0E00               	movlw	0
  1927  0006B0  6E2A               	movwf	___ftmul@f3_as_product+2,c
  1928  0006B2  0E07               	movlw	7
  1929  0006B4  6E2B               	movwf	___ftmul@cntr,c
  1930  0006B6  A01E               	btfss	___ftmul@f1,0,c
  1931  0006B8  D006               	goto	l448
  1932  0006BA  5021               	movf	___ftmul@f2,w,c
  1933  0006BC  2628               	addwf	___ftmul@f3_as_product,f,c
  1934  0006BE  5022               	movf	___ftmul@f2+1,w,c
  1935  0006C0  2229               	addwfc	___ftmul@f3_as_product+1,f,c
  1936  0006C2  5023               	movf	___ftmul@f2+2,w,c
  1937  0006C4  222A               	addwfc	___ftmul@f3_as_product+2,f,c
  1938  0006C6                     l448:
  1939  0006C6  90D8               	bcf	status,0,c
  1940  0006C8  3220               	rrcf	___ftmul@f1+2,f,c
  1941  0006CA  321F               	rrcf	___ftmul@f1+1,f,c
  1942  0006CC  321E               	rrcf	___ftmul@f1,f,c
  1943  0006CE  90D8               	bcf	status,0,c
  1944  0006D0  3621               	rlcf	___ftmul@f2,f,c
  1945  0006D2  3622               	rlcf	___ftmul@f2+1,f,c
  1946  0006D4  3623               	rlcf	___ftmul@f2+2,f,c
  1947  0006D6  2E2B               	decfsz	___ftmul@cntr,f,c
  1948  0006D8  D7EE               	goto	l447
  1949  0006DA  0E09               	movlw	9
  1950  0006DC  6E2B               	movwf	___ftmul@cntr,c
  1951  0006DE  A01E               	btfss	___ftmul@f1,0,c
  1952  0006E0  D006               	goto	l451
  1953  0006E2  5021               	movf	___ftmul@f2,w,c
  1954  0006E4  2628               	addwf	___ftmul@f3_as_product,f,c
  1955  0006E6  5022               	movf	___ftmul@f2+1,w,c
  1956  0006E8  2229               	addwfc	___ftmul@f3_as_product+1,f,c
  1957  0006EA  5023               	movf	___ftmul@f2+2,w,c
  1958  0006EC  222A               	addwfc	___ftmul@f3_as_product+2,f,c
  1959  0006EE                     l451:
  1960  0006EE  90D8               	bcf	status,0,c
  1961  0006F0  3220               	rrcf	___ftmul@f1+2,f,c
  1962  0006F2  321F               	rrcf	___ftmul@f1+1,f,c
  1963  0006F4  321E               	rrcf	___ftmul@f1,f,c
  1964  0006F6  90D8               	bcf	status,0,c
  1965  0006F8  322A               	rrcf	___ftmul@f3_as_product+2,f,c
  1966  0006FA  3229               	rrcf	___ftmul@f3_as_product+1,f,c
  1967  0006FC  3228               	rrcf	___ftmul@f3_as_product,f,c
  1968  0006FE  2E2B               	decfsz	___ftmul@cntr,f,c
  1969  000700  D7EE               	goto	l450
  1970  000702  C028  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  1971  000706  C029  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  1972  00070A  C02A  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  1973  00070E  C027  F016         	movff	___ftmul@exp,___ftpack@exp
  1974  000712  C02C  F017         	movff	___ftmul@sign,___ftpack@sign
  1975  000716  EC94  F003         	call	___ftpack	;wreg free
  1976  00071A  C013  F01E         	movff	?___ftpack,?___ftmul
  1977  00071E  C014  F01F         	movff	?___ftpack+1,?___ftmul+1
  1978  000722  C015  F020         	movff	?___ftpack+2,?___ftmul+2
  1979  000726  0012               	return	
  1980  000728                     __end_of___ftmul:
  1981                           	opt stack 0
  1982                           tblptru	equ	0xFF8
  1983                           tblptrh	equ	0xFF7
  1984                           tblptrl	equ	0xFF6
  1985                           tablat	equ	0xFF5
  1986                           intcon	equ	0xFF2
  1987                           intcon3	equ	0xFF0
  1988                           postinc0	equ	0xFEE
  1989                           wreg	equ	0xFE8
  1990                           status	equ	0xFD8
  1991                           
  1992 ;; *************** function ___ftpack *****************
  1993 ;; Defined at:
  1994 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;  arg             3   18[COMRAM] unsigned um
  1997 ;;  exp             1   21[COMRAM] unsigned char 
  1998 ;;  sign            1   22[COMRAM] unsigned char 
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;		None
  2001 ;; Return value:  Size  Location     Type
  2002 ;;                  3   18[COMRAM] float 
  2003 ;; Registers used:
  2004 ;;		wreg, status,2, status,0
  2005 ;; Tracked objects:
  2006 ;;		On entry : 0/0
  2007 ;;		On exit  : 0/0
  2008 ;;		Unchanged: 0/0
  2009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2010 ;;      Params:         5       0       0       0       0       0       0       0       0
  2011 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2012 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2013 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2014 ;;Total ram usage:        8 bytes
  2015 ;; Hardware stack levels used:    1
  2016 ;; Hardware stack levels required when called:    1
  2017 ;; This function calls:
  2018 ;;		Nothing
  2019 ;; This function is called by:
  2020 ;;		___ftmul
  2021 ;;		___lwtoft
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           	psect	text8
  2026  000728                     __ptext8:
  2027                           	opt stack 0
  2028  000728                     ___ftpack:
  2029                           	opt stack 26
  2030                           
  2031                           ;incstack = 0
  2032  000728  5016               	movf	___ftpack@exp,w,c
  2033  00072A  B4D8               	btfsc	status,2,c
  2034  00072C  D005               	goto	u1170
  2035  00072E  5013               	movf	___ftpack@arg,w,c
  2036  000730  1014               	iorwf	___ftpack@arg+1,w,c
  2037  000732  1015               	iorwf	___ftpack@arg+2,w,c
  2038  000734  A4D8               	btfss	status,2,c
  2039  000736  D00C               	goto	l365
  2040  000738                     u1170:
  2041  000738  0E00               	movlw	0
  2042  00073A  6E13               	movwf	?___ftpack,c
  2043  00073C  0E00               	movlw	0
  2044  00073E  6E14               	movwf	?___ftpack+1,c
  2045  000740  0E00               	movlw	0
  2046  000742  6E15               	movwf	?___ftpack+2,c
  2047  000744  0012               	return	
  2048  000746  2A16               	incf	___ftpack@exp,f,c
  2049  000748  90D8               	bcf	status,0,c
  2050  00074A  3215               	rrcf	___ftpack@arg+2,f,c
  2051  00074C  3214               	rrcf	___ftpack@arg+1,f,c
  2052  00074E  3213               	rrcf	___ftpack@arg,f,c
  2053  000750                     l365:
  2054  000750  0E00               	movlw	0
  2055  000752  1413               	andwf	___ftpack@arg,w,c
  2056  000754  6E18               	movwf	??___ftpack& (0+255),c
  2057  000756  0E00               	movlw	0
  2058  000758  1414               	andwf	___ftpack@arg+1,w,c
  2059  00075A  6E19               	movwf	(??___ftpack+1)& (0+255),c
  2060  00075C  0EFE               	movlw	254
  2061  00075E  1415               	andwf	___ftpack@arg+2,w,c
  2062  000760  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  2063  000762  5018               	movf	??___ftpack,w,c
  2064  000764  1019               	iorwf	??___ftpack+1,w,c
  2065  000766  101A               	iorwf	??___ftpack+2,w,c
  2066  000768  B4D8               	btfsc	status,2,c
  2067  00076A  D00C               	goto	l368
  2068  00076C  D7EC               	goto	l366
  2069  00076E  2A16               	incf	___ftpack@exp,f,c
  2070  000770  0E01               	movlw	1
  2071  000772  2613               	addwf	___ftpack@arg,f,c
  2072  000774  0E00               	movlw	0
  2073  000776  2214               	addwfc	___ftpack@arg+1,f,c
  2074  000778  0E00               	movlw	0
  2075  00077A  2215               	addwfc	___ftpack@arg+2,f,c
  2076  00077C  90D8               	bcf	status,0,c
  2077  00077E  3215               	rrcf	___ftpack@arg+2,f,c
  2078  000780  3214               	rrcf	___ftpack@arg+1,f,c
  2079  000782  3213               	rrcf	___ftpack@arg,f,c
  2080  000784                     l368:
  2081  000784  0E00               	movlw	0
  2082  000786  1413               	andwf	___ftpack@arg,w,c
  2083  000788  6E18               	movwf	??___ftpack& (0+255),c
  2084  00078A  0E00               	movlw	0
  2085  00078C  1414               	andwf	___ftpack@arg+1,w,c
  2086  00078E  6E19               	movwf	(??___ftpack+1)& (0+255),c
  2087  000790  0EFF               	movlw	255
  2088  000792  1415               	andwf	___ftpack@arg+2,w,c
  2089  000794  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  2090  000796  5018               	movf	??___ftpack,w,c
  2091  000798  1019               	iorwf	??___ftpack+1,w,c
  2092  00079A  101A               	iorwf	??___ftpack+2,w,c
  2093  00079C  B4D8               	btfsc	status,2,c
  2094  00079E  D006               	goto	l371
  2095  0007A0  D7E6               	goto	l369
  2096  0007A2  0616               	decf	___ftpack@exp,f,c
  2097  0007A4  90D8               	bcf	status,0,c
  2098  0007A6  3613               	rlcf	___ftpack@arg,f,c
  2099  0007A8  3614               	rlcf	___ftpack@arg+1,f,c
  2100  0007AA  3615               	rlcf	___ftpack@arg+2,f,c
  2101  0007AC                     l371:
  2102  0007AC  BE14               	btfsc	___ftpack@arg+1,7,c
  2103  0007AE  D003               	goto	u1210
  2104  0007B0  0E02               	movlw	2
  2105  0007B2  6016               	cpfslt	___ftpack@exp,c
  2106  0007B4  D7F6               	goto	l372
  2107  0007B6                     u1210:
  2108  0007B6  A016               	btfss	___ftpack@exp,0,c
  2109  0007B8  9E14               	bcf	___ftpack@arg+1,7,c
  2110  0007BA  90D8               	bcf	status,0,c
  2111  0007BC  3216               	rrcf	___ftpack@exp,f,c
  2112  0007BE  5016               	movf	___ftpack@exp,w,c
  2113  0007C0  1215               	iorwf	___ftpack@arg+2,f,c
  2114  0007C2  5017               	movf	___ftpack@sign,w,c
  2115  0007C4  A4D8               	btfss	status,2,c
  2116  0007C6  8E15               	bsf	___ftpack@arg+2,7,c
  2117  0007C8  C013  F013         	movff	___ftpack@arg,?___ftpack
  2118  0007CC  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  2119  0007D0  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  2120  0007D4  0012               	return	
  2121  0007D6                     __end_of___ftpack:
  2122                           	opt stack 0
  2123                           tblptru	equ	0xFF8
  2124                           tblptrh	equ	0xFF7
  2125                           tblptrl	equ	0xFF6
  2126                           tablat	equ	0xFF5
  2127                           intcon	equ	0xFF2
  2128                           intcon3	equ	0xFF0
  2129                           postinc0	equ	0xFEE
  2130                           wreg	equ	0xFE8
  2131                           status	equ	0xFD8
  2132                           
  2133 ;; *************** function _ISR *****************
  2134 ;; Defined at:
  2135 ;;		line 299 in file "main.c"
  2136 ;; Parameters:    Size  Location     Type
  2137 ;;		None
  2138 ;; Auto vars:     Size  Location     Type
  2139 ;;		None
  2140 ;; Return value:  Size  Location     Type
  2141 ;;                  1    wreg      void 
  2142 ;; Registers used:
  2143 ;;		wreg, status,2, status,0
  2144 ;; Tracked objects:
  2145 ;;		On entry : 0/0
  2146 ;;		On exit  : 0/0
  2147 ;;		Unchanged: 0/0
  2148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2149 ;;      Params:         0       0       0       0       0       0       0       0       0
  2150 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2151 ;;      Temps:         18       0       0       0       0       0       0       0       0
  2152 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2153 ;;Total ram usage:       18 bytes
  2154 ;; Hardware stack levels used:    1
  2155 ;; This function calls:
  2156 ;;		Nothing
  2157 ;; This function is called by:
  2158 ;;		Interrupt level 2
  2159 ;; This function uses a non-reentrant model
  2160 ;;
  2161                           
  2162                           	psect	intcode
  2163  000008                     __pintcode:
  2164                           	opt stack 0
  2165  000008                     _ISR:
  2166                           	opt stack 26
  2167                           
  2168                           ;incstack = 0
  2169  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2170  00000A  EDEB  F003         	call	int_func,f	;refresh shadow registers
  2171                           tblptru	equ	0xFF8
  2172                           tblptrh	equ	0xFF7
  2173                           tblptrl	equ	0xFF6
  2174                           tablat	equ	0xFF5
  2175                           intcon	equ	0xFF2
  2176                           intcon3	equ	0xFF0
  2177                           postinc0	equ	0xFEE
  2178                           wreg	equ	0xFE8
  2179                           status	equ	0xFD8
  2180                           
  2181                           	psect	intcode_body
  2182  0007D6                     __pintcode_body:
  2183                           	opt stack 26
  2184  0007D6                     int_func:
  2185                           	opt stack 26
  2186  0007D6  0006               	pop		; remove dummy address from shadow register refresh
  2187  0007D8  CFFA F001          	movff	pclath,??_ISR
  2188  0007DC  CFFB F002          	movff	pclatu,??_ISR+1
  2189  0007E0  CFE9 F003          	movff	fsr0l,??_ISR+2
  2190  0007E4  CFEA F004          	movff	fsr0h,??_ISR+3
  2191  0007E8  CFE1 F005          	movff	fsr1l,??_ISR+4
  2192  0007EC  CFE2 F006          	movff	fsr1h,??_ISR+5
  2193  0007F0  CFD9 F007          	movff	fsr2l,??_ISR+6
  2194  0007F4  CFDA F008          	movff	fsr2h,??_ISR+7
  2195  0007F8  CFF3 F009          	movff	prodl,??_ISR+8
  2196  0007FC  CFF4 F00A          	movff	prodh,??_ISR+9
  2197  000800  CFF6 F00B          	movff	tblptrl,??_ISR+10
  2198  000804  CFF7 F00C          	movff	tblptrh,??_ISR+11
  2199  000808  CFF8 F00D          	movff	tblptru,??_ISR+12
  2200  00080C  CFF5 F00E          	movff	tablat,??_ISR+13
  2201  000810  C04C  F00F         	movff	btemp,??_ISR+14
  2202  000814  C04D  F010         	movff	btemp+1,??_ISR+15
  2203  000818  C04E  F011         	movff	btemp+2,??_ISR+16
  2204  00081C  C04F  F012         	movff	btemp+3,??_ISR+17
  2205                           
  2206                           ;main.c: 300: if(!TMR2IF) return;
  2207  000820  A29E               	btfss	3998,1,c	;volatile
  2208  000822  D007               	goto	i2l142
  2209                           
  2210                           ;main.c: 301: TMR2IF = 0;
  2211  000824  929E               	bcf	3998,1,c	;volatile
  2212                           
  2213                           ;main.c: 302: millisCounter++;
  2214  000826  0E01               	movlw	1
  2215  000828  2642               	addwf	_millisCounter,f,c
  2216  00082A  0E00               	movlw	0
  2217  00082C  2243               	addwfc	_millisCounter+1,f,c
  2218  00082E  2244               	addwfc	_millisCounter+2,f,c
  2219  000830  2245               	addwfc	_millisCounter+3,f,c
  2220  000832                     i2l142:
  2221  000832  C012  F04F         	movff	??_ISR+17,btemp+3
  2222  000836  C011  F04E         	movff	??_ISR+16,btemp+2
  2223  00083A  C010  F04D         	movff	??_ISR+15,btemp+1
  2224  00083E  C00F  F04C         	movff	??_ISR+14,btemp
  2225  000842  C00E  FFF5         	movff	??_ISR+13,tablat
  2226  000846  C00D  FFF8         	movff	??_ISR+12,tblptru
  2227  00084A  C00C  FFF7         	movff	??_ISR+11,tblptrh
  2228  00084E  C00B  FFF6         	movff	??_ISR+10,tblptrl
  2229  000852  C00A  FFF4         	movff	??_ISR+9,prodh
  2230  000856  C009  FFF3         	movff	??_ISR+8,prodl
  2231  00085A  C008  FFDA         	movff	??_ISR+7,fsr2h
  2232  00085E  C007  FFD9         	movff	??_ISR+6,fsr2l
  2233  000862  C006  FFE2         	movff	??_ISR+5,fsr1h
  2234  000866  C005  FFE1         	movff	??_ISR+4,fsr1l
  2235  00086A  C004  FFEA         	movff	??_ISR+3,fsr0h
  2236  00086E  C003  FFE9         	movff	??_ISR+2,fsr0l
  2237  000872  C002  FFFB         	movff	??_ISR+1,pclatu
  2238  000876  C001  FFFA         	movff	??_ISR,pclath
  2239  00087A  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2240  00087C  0011               	retfie		f
  2241  00087E                     __end_of_ISR:
  2242                           	opt stack 0
  2243  0000                     pclatu	equ	0xFFB
  2244                           pclath	equ	0xFFA
  2245                           tblptru	equ	0xFF8
  2246                           tblptrh	equ	0xFF7
  2247                           tblptrl	equ	0xFF6
  2248                           tablat	equ	0xFF5
  2249                           prodh	equ	0xFF4
  2250                           prodl	equ	0xFF3
  2251                           intcon	equ	0xFF2
  2252                           intcon3	equ	0xFF0
  2253                           postinc0	equ	0xFEE
  2254                           fsr0h	equ	0xFEA
  2255                           fsr0l	equ	0xFE9
  2256                           wreg	equ	0xFE8
  2257                           fsr1h	equ	0xFE2
  2258                           fsr1l	equ	0xFE1
  2259                           fsr2h	equ	0xFDA
  2260                           fsr2l	equ	0xFD9
  2261                           status	equ	0xFD8
  2262                           pclatu	equ	0xFFB
  2263                           pclath	equ	0xFFA
  2264                           tblptru	equ	0xFF8
  2265                           tblptrh	equ	0xFF7
  2266                           tblptrl	equ	0xFF6
  2267                           tablat	equ	0xFF5
  2268                           prodh	equ	0xFF4
  2269                           prodl	equ	0xFF3
  2270                           intcon	equ	0xFF2
  2271                           intcon3	equ	0xFF0
  2272                           postinc0	equ	0xFEE
  2273                           fsr0h	equ	0xFEA
  2274                           fsr0l	equ	0xFE9
  2275                           wreg	equ	0xFE8
  2276                           fsr1h	equ	0xFE2
  2277                           fsr1l	equ	0xFE1
  2278                           fsr2h	equ	0xFDA
  2279                           fsr2l	equ	0xFD9
  2280                           status	equ	0xFD8
  2281                           
  2282                           	psect	rparam
  2283  0000                     pclatu	equ	0xFFB
  2284                           pclath	equ	0xFFA
  2285                           tblptru	equ	0xFF8
  2286                           tblptrh	equ	0xFF7
  2287                           tblptrl	equ	0xFF6
  2288                           tablat	equ	0xFF5
  2289                           prodh	equ	0xFF4
  2290                           prodl	equ	0xFF3
  2291                           intcon	equ	0xFF2
  2292                           intcon3	equ	0xFF0
  2293                           postinc0	equ	0xFEE
  2294                           fsr0h	equ	0xFEA
  2295                           fsr0l	equ	0xFE9
  2296                           wreg	equ	0xFE8
  2297                           fsr1h	equ	0xFE2
  2298                           fsr1l	equ	0xFE1
  2299                           fsr2h	equ	0xFDA
  2300                           fsr2l	equ	0xFD9
  2301                           status	equ	0xFD8
  2302                           
  2303                           	psect	temp
  2304  00004C                     btemp:
  2305                           	opt stack 0
  2306  00004C                     	ds	1
  2307  0000                     int$flags	set	btemp
  2308  0000                     wtemp6	set	btemp+1
  2309                           pclatu	equ	0xFFB
  2310                           pclath	equ	0xFFA
  2311                           tblptru	equ	0xFF8
  2312                           tblptrh	equ	0xFF7
  2313                           tblptrl	equ	0xFF6
  2314                           tablat	equ	0xFF5
  2315                           prodh	equ	0xFF4
  2316                           prodl	equ	0xFF3
  2317                           intcon	equ	0xFF2
  2318                           intcon3	equ	0xFF0
  2319                           postinc0	equ	0xFEE
  2320                           fsr0h	equ	0xFEA
  2321                           fsr0l	equ	0xFE9
  2322                           wreg	equ	0xFE8
  2323                           fsr1h	equ	0xFE2
  2324                           fsr1l	equ	0xFE1
  2325                           fsr2h	equ	0xFDA
  2326                           fsr2l	equ	0xFD9
  2327                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     65      75
    BANK0           160     13      13
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _loop->_setMotores
    _init->_setMotores
    _setMotores->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lwtoft

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_loop
    _loop->_setMotores
    _init->_setMotores

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   20788
                               _init
                               _loop
 ---------------------------------------------------------------------------------
 (1) _loop                                                 5     5      0   10394
                                              8 BANK0      5     5      0
                             _millis
                         _setMotores
 ---------------------------------------------------------------------------------
 (2) _millis                                               4     0      4       0
                                             18 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   10394
                         _setMotores
 ---------------------------------------------------------------------------------
 (2) _setMotores                                          14    10      4   10394
                                             59 COMRAM     6     2      4
                                              0 BANK0      8     8      0
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    2984
                                             26 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     551
                                             44 COMRAM    15    11      4
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3761
                                             29 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2773
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _setMotores
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
   _loop
     _millis
     _setMotores
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      D       D       5        8.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     41      4B       1       79.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      58      20        0.0%
DATA                 0      0      58       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat May 25 17:42:04 2019

                     l80 007A                       l72 001A                       l81 00B8  
                     l66 0316                       l90 01EC                       l82 011E  
                     l91 0202                       l83 0140                       l67 0014  
                     l92 0220                       l76 003C                       l93 023E  
                     l94 025C                       l86 0146                       l95 027A  
                     l87 0160                       l79 005E                       l96 02B2  
                     l88 017E                       l97 02C8                       l89 019C  
            __CFG_BORV$0 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000                      l110 03BC  
                    l120 03E6                      l112 03A0                      l130 0466  
                    l122 03F0                      l114 03AA                      l124 043C  
                    l116 03FA                      l108 03B4                      l126 044A  
                    l118 0402                      l128 0458                      l147 097C  
                    l450 06DE                      l371 07AC                      l451 06EE  
                    l372 07A2                      l444 065C                      l365 0750  
                    l366 0746                      l446 0684                      l447 06B6  
                    l368 0784                      l448 06C6                      l369 076E  
                    l473 0606                      l465 056C                      l474 05FA  
                    l467 05E2                      l476 0622                      l468 05D2  
           __CFG_CPB$OFF 000000                      _PR2 000FCB             __CFG_CPD$OFF 000000  
                    _ISR 0008             __CFG_BOR$OFF 000000                      wreg 000FE8  
           __CFG_LVP$OFF 000000                     ?_ISR 0001             __CFG_WDT$OFF 000000  
                   u1210 07B6                     u1301 0550                     u1320 058A  
                   u1400 03CC                     u1241 0644                     u1170 0738  
                   u1410 03DC                     u1420 040C                     u1261 066C  
                   u1325 0582                     u1360 060C                     u1440 0422  
                   u1380 0386                     u1700 030A                     u1620 0126  
                   u1438 040E                     u1390 0396                     u1608 010A  
                   u1458 0424                     u1650 02D4                     u1670 02F0  
                   u1590 0106                     _PIE1 000F9D                     _PIE2 000FA0  
                   u1668 02D8                     u1688 02F4                     _main 0978  
           ___ftpack@arg 0013                     _init 087E                     _loop 0012  
           ___ftpack@exp 0016                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 004C                     prodh 000FF4  
                   prodl 000FF3                     start 000E            __CFG_IESO$OFF 000000  
           ___ftmul@cntr 002B             ___param_bank 000000             ___ftmul@sign 002C  
                  ??_ISR 0001             ___fttol@exp1 003B             ___fttol@lval 0037  
          __CFG_PLLDIV$5 000000           __CFG_CCP2MX$ON 000000                    ?_main 0001  
                  ?_init 0001                    ?_loop 0001          __end_of___ftmul 0728  
        __end_of___fttol 0634                    _T2CON 000FCA                    i2l142 0832  
          __CFG_USBDIV$2 000000            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
          ___ftpack@sign 0017                    pclath 000FFA                    tablat 000FF5  
                  loop@m 0046                    status 000FD8                    wtemp6 004D  
         __CFG_MCLRE$OFF 000000          __initialization 0916             __end_of_main 0982  
           __end_of_init 0916             __end_of_loop 036E          setMotores@dutyD 0066  
        setMotores@dutyI 0064                   ??_main 0042            ___fttol@sign1 0036  
                 ??_init 0042                   ??_loop 0068            __activetblptr 000002  
                 _CCPR1L 000FBE                   _CCPR2L 000FBB         __end_of___ftpack 07D6  
       __end_of___lwtoft 0966                   _TMR2IF 007CF1           __CFG_XINST$OFF 000000  
              ??___ftmul 0024                ??___fttol 0031            loop@direccion 004B  
                 _millis 0966                   clear_0 092E    ___ftmul@f3_as_product 0028  
           __pdataCOMRAM 004B                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 0934  
        __CFG_PBADEN$OFF 000000           _setMotores$851 0060           _setMotores$852 0062  
          ___rparam_used 000001               ___ftmul@f1 001E               ___ftmul@f2 0021  
             ___fttol@f1 002D           __pcstackCOMRAM 0001         setMotores@speedD 003E  
       setMotores@speedI 003C               ___lwtoft@c 001B                  ?_millis 0013  
              ?___ftpack 0013                ?___lwtoft 001B                  _INTCON3 000FF0  
        __CFG_VREGEN$OFF 000000                  __Hparam 0000                  __Lparam 0000  
                ___ftmul 0634                  ___fttol 0540          __CFG_STVREN$OFF 000000  
                __pcinit 0916               ??___ftpack 0018          __size_of_millis 0012  
                __ramtop 0800                  __ptext0 0978                  __ptext1 0012  
                __ptext2 0966                  __ptext3 087E                  __ptext4 036E  
                __ptext5 0942                  __ptext6 0540                  __ptext7 0634  
                __ptext8 0728            _millisCounter 0042               ??___lwtoft 001E  
           __size_of_ISR 0876                _T2CONbits 000FCA           __pintcode_body 07D6  
   end_of_initialization 0934            __Lmediumconst 0000                  int_func 07D6  
             _setMotores 036E                  postinc0 000FEE                _PORTAbits 000F80  
              _PORTBbits 000F81                _PORTCbits 000F82                _TRISAbits 000F92  
              _TRISBbits 000F93                _TRISCbits 000F94              _CCP1CONbits 000FBD  
            _CCP2CONbits 000FBA              ___ftmul@exp 0027            __pidataCOMRAM 0982  
         __end_of_millis 0978      start_initialization 0916              __end_of_ISR 087E  
            ?_setMotores 003C         __CFG_LPT1OSC$OFF 000000                 ??_millis 0017  
      __size_of___ftpack 00AE              __pbssCOMRAM 0042        __size_of___lwtoft 0024  
          __pcstackBANK0 0060               loop@estado 004A                __pintcode 0008  
               ?___ftmul 001E                 ?___fttol 002D      __size_of_setMotores 01D2  
               _LATAbits 000F89                 _LATCbits 000F8B                 _PIE1bits 000F9D  
               _UCFGbits 000F6F                 _RCONbits 000FD0         __CFG_WDTPS$32768 000000  
               _UCONbits 000F6D               _ADCON1bits 000FC1                 __Hrparam 0000  
               __Lrparam 0000         __size_of___ftmul 00F4         __size_of___fttol 00F4  
               ___ftpack 0728                 ___lwtoft 0942             ??_setMotores 0040  
          __size_of_main 000A            __size_of_init 0098            __size_of_loop 035C  
               int$flags 004C    __CFG_CPUDIV$OSC1_PLL2 000000               _INTCONbits 000FF2  
     __end_of_setMotores 0540                 intlevel2 0000       __CFG_FOSC$HSPLL_HS 000000  
