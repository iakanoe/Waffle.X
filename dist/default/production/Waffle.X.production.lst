

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon May 27 19:21:52 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,inline
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    25  0000                     
    26                           ; Version 1.45
    27                           ; Generated 16/11/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F2550 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	idataCOMRAM
    62  0009B8                     __pidataCOMRAM:
    63                           	opt stack 0
    64                           
    65                           ;initializer for loop@direccion
    66  0009B8  05                 	db	5
    67  0000                     _LATCbits	set	3979
    68  0000                     _PORTCbits	set	3970
    69  0000                     _PORTBbits	set	3969
    70  0000                     _PORTAbits	set	3968
    71  0000                     _LATAbits	set	3977
    72  0000                     _INTCONbits	set	4082
    73  0000                     _PIE1bits	set	3997
    74  0000                     _RCONbits	set	4048
    75  0000                     _PIE2	set	4000
    76  0000                     _PIE1	set	3997
    77  0000                     _INTCON3	set	4080
    78  0000                     _CCP2CONbits	set	4026
    79  0000                     _CCPR2L	set	4027
    80  0000                     _CCP1CONbits	set	4029
    81  0000                     _CCPR1L	set	4030
    82  0000                     _PR2	set	4043
    83  0000                     _T2CONbits	set	4042
    84  0000                     _T2CON	set	4042
    85  0000                     _TRISCbits	set	3988
    86  0000                     _TRISBbits	set	3987
    87  0000                     _TRISAbits	set	3986
    88  0000                     _UCFGbits	set	3951
    89  0000                     _UCONbits	set	3949
    90  0000                     _ADCON1bits	set	4033
    91  0000                     _TMR2IF	set	31985
    92                           
    93                           ; #config settings
    94  0000                     
    95                           	psect	cinit
    96  00094C                     __pcinit:
    97                           	opt stack 0
    98  00094C                     start_initialization:
    99                           	opt stack 0
   100  00094C                     __initialization:
   101                           	opt stack 0
   102                           
   103                           ; Initialize objects allocated to COMRAM (1 bytes)
   104                           ; load TBLPTR registers with __pidataCOMRAM
   105  00094C  0EB8               	movlw	low __pidataCOMRAM
   106  00094E  6EF6               	movwf	tblptrl,c
   107  000950  0E09               	movlw	high __pidataCOMRAM
   108  000952  6EF7               	movwf	tblptrh,c
   109  000954  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   110  000956  6EF8               	movwf	tblptru,c
   111  000958  0009               	tblrd		*+	;fetch initializer
   112  00095A  CFF5 F04B          	movff	tablat,__pdataCOMRAM
   113                           
   114                           ; Clear objects allocated to COMRAM (9 bytes)
   115  00095E  EE00  F042         	lfsr	0,__pbssCOMRAM
   116  000962  0E09               	movlw	9
   117  000964                     clear_0:
   118  000964  6AEE               	clrf	postinc0,c
   119  000966  06E8               	decf	wreg,f,c
   120  000968  E1FD               	bnz	clear_0
   121  00096A                     end_of_initialization:
   122                           	opt stack 0
   123  00096A                     __end_of__initialization:
   124                           	opt stack 0
   125  00096A  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   126  00096C  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   127  00096E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   128  000970  6EF8               	movwf	tblptru,c
   129  000972  0100               	movlb	0
   130  000974  EFD7  F004         	goto	_main	;jump to C main() function
   131                           tblptru	equ	0xFF8
   132                           tblptrh	equ	0xFF7
   133                           tblptrl	equ	0xFF6
   134                           tablat	equ	0xFF5
   135                           postinc0	equ	0xFEE
   136                           wreg	equ	0xFE8
   137                           
   138                           	psect	bssCOMRAM
   139  000042                     __pbssCOMRAM:
   140                           	opt stack 0
   141  000042                     _millisCounter:
   142                           	opt stack 0
   143  000042                     	ds	4
   144  000046                     loop@m:
   145                           	opt stack 0
   146  000046                     	ds	4
   147  00004A                     loop@estado:
   148                           	opt stack 0
   149  00004A                     	ds	1
   150                           tblptru	equ	0xFF8
   151                           tblptrh	equ	0xFF7
   152                           tblptrl	equ	0xFF6
   153                           tablat	equ	0xFF5
   154                           postinc0	equ	0xFEE
   155                           wreg	equ	0xFE8
   156                           
   157                           	psect	dataCOMRAM
   158  00004B                     __pdataCOMRAM:
   159                           	opt stack 0
   160  00004B                     loop@direccion:
   161                           	opt stack 0
   162  00004B                     	ds	1
   163                           tblptru	equ	0xFF8
   164                           tblptrh	equ	0xFF7
   165                           tblptrl	equ	0xFF6
   166                           tablat	equ	0xFF5
   167                           postinc0	equ	0xFEE
   168                           wreg	equ	0xFE8
   169                           
   170                           	psect	cstackBANK0
   171  000060                     __pcstackBANK0:
   172                           	opt stack 0
   173  000060                     _setMotores$851:
   174                           	opt stack 0
   175                           
   176                           ; 2 bytes @ 0x0
   177  000060                     	ds	2
   178  000062                     _setMotores$852:
   179                           	opt stack 0
   180                           
   181                           ; 2 bytes @ 0x2
   182  000062                     	ds	2
   183  000064                     setMotores@dutyI:
   184                           	opt stack 0
   185                           
   186                           ; 2 bytes @ 0x4
   187  000064                     	ds	2
   188  000066                     setMotores@dutyD:
   189                           	opt stack 0
   190                           
   191                           ; 2 bytes @ 0x6
   192  000066                     	ds	2
   193  000068                     ??_loop:
   194                           
   195                           ; 1 bytes @ 0x8
   196  000068                     	ds	5
   197                           tblptru	equ	0xFF8
   198                           tblptrh	equ	0xFF7
   199                           tblptrl	equ	0xFF6
   200                           tablat	equ	0xFF5
   201                           postinc0	equ	0xFEE
   202                           wreg	equ	0xFE8
   203                           
   204                           	psect	cstackCOMRAM
   205  000001                     __pcstackCOMRAM:
   206                           	opt stack 0
   207  000001                     ??_ISR:
   208  000001                     
   209                           ; 1 bytes @ 0x0
   210  000001                     	ds	18
   211  000013                     ?___ftpack:
   212                           	opt stack 0
   213  000013                     ?_millis:
   214                           	opt stack 0
   215  000013                     ___ftpack@arg:
   216                           	opt stack 0
   217                           
   218                           ; 3 bytes @ 0x12
   219  000013                     	ds	3
   220  000016                     ___ftpack@exp:
   221                           	opt stack 0
   222                           
   223                           ; 1 bytes @ 0x15
   224  000016                     	ds	1
   225  000017                     ___ftpack@sign:
   226                           	opt stack 0
   227                           
   228                           ; 1 bytes @ 0x16
   229  000017                     	ds	1
   230  000018                     ??___ftpack:
   231                           
   232                           ; 1 bytes @ 0x17
   233  000018                     	ds	3
   234  00001B                     ?___lwtoft:
   235                           	opt stack 0
   236  00001B                     ___lwtoft@c:
   237                           	opt stack 0
   238                           
   239                           ; 2 bytes @ 0x1A
   240  00001B                     	ds	3
   241  00001E                     ?___ftmul:
   242                           	opt stack 0
   243  00001E                     ___ftmul@f1:
   244                           	opt stack 0
   245                           
   246                           ; 3 bytes @ 0x1D
   247  00001E                     	ds	3
   248  000021                     ___ftmul@f2:
   249                           	opt stack 0
   250                           
   251                           ; 3 bytes @ 0x20
   252  000021                     	ds	3
   253  000024                     ??___ftmul:
   254                           
   255                           ; 1 bytes @ 0x23
   256  000024                     	ds	3
   257  000027                     ___ftmul@exp:
   258                           	opt stack 0
   259                           
   260                           ; 1 bytes @ 0x26
   261  000027                     	ds	1
   262  000028                     ___ftmul@f3_as_product:
   263                           	opt stack 0
   264                           
   265                           ; 3 bytes @ 0x27
   266  000028                     	ds	3
   267  00002B                     ___ftmul@cntr:
   268                           	opt stack 0
   269                           
   270                           ; 1 bytes @ 0x2A
   271  00002B                     	ds	1
   272  00002C                     ___ftmul@sign:
   273                           	opt stack 0
   274                           
   275                           ; 1 bytes @ 0x2B
   276  00002C                     	ds	1
   277  00002D                     ?___fttol:
   278                           	opt stack 0
   279  00002D                     ___fttol@f1:
   280                           	opt stack 0
   281                           
   282                           ; 3 bytes @ 0x2C
   283  00002D                     	ds	4
   284  000031                     ??___fttol:
   285                           
   286                           ; 1 bytes @ 0x30
   287  000031                     	ds	5
   288  000036                     ___fttol@sign1:
   289                           	opt stack 0
   290                           
   291                           ; 1 bytes @ 0x35
   292  000036                     	ds	1
   293  000037                     ___fttol@lval:
   294                           	opt stack 0
   295                           
   296                           ; 4 bytes @ 0x36
   297  000037                     	ds	4
   298  00003B                     ___fttol@exp1:
   299                           	opt stack 0
   300                           
   301                           ; 1 bytes @ 0x3A
   302  00003B                     	ds	1
   303  00003C                     setMotores@speedI:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x3B
   307  00003C                     	ds	2
   308  00003E                     setMotores@speedD:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x3D
   312  00003E                     	ds	2
   313  000040                     ??_setMotores:
   314                           
   315                           ; 1 bytes @ 0x3F
   316  000040                     	ds	2
   317  000042                     tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           
   324                           ; 1 bytes @ 0x41
   325 ;;
   326 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   327 ;;
   328 ;; *************** function _main *****************
   329 ;; Defined at:
   330 ;;		line 305 in file "main.c"
   331 ;; Parameters:    Size  Location     Type
   332 ;;		None
   333 ;; Auto vars:     Size  Location     Type
   334 ;;		None
   335 ;; Return value:  Size  Location     Type
   336 ;;                  1    wreg      void 
   337 ;; Registers used:
   338 ;;		wreg, status,2, status,0, cstack
   339 ;; Tracked objects:
   340 ;;		On entry : 0/0
   341 ;;		On exit  : 0/0
   342 ;;		Unchanged: 0/0
   343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   344 ;;      Params:         0       0       0       0       0       0       0       0       0
   345 ;;      Locals:         0       0       0       0       0       0       0       0       0
   346 ;;      Temps:          0       0       0       0       0       0       0       0       0
   347 ;;      Totals:         0       0       0       0       0       0       0       0       0
   348 ;;Total ram usage:        0 bytes
   349 ;; Hardware stack levels required when called:    5
   350 ;; This function calls:
   351 ;;		_init
   352 ;;		_loop
   353 ;; This function is called by:
   354 ;;		Startup code after reset
   355 ;; This function uses a non-reentrant model
   356 ;;
   357                           
   358                           	psect	text0
   359  0009AE                     __ptext0:
   360                           	opt stack 0
   361  0009AE                     _main:
   362                           	opt stack 26
   363                           
   364                           ;main.c: 306: init();
   365                           
   366                           ;incstack = 0
   367  0009AE  EC5A  F004         	call	_init	;wreg free
   368  0009B2                     l147:
   369  0009B2  EC09  F000         	call	_loop	;wreg free
   370  0009B6  D7FD               	goto	l147
   371  0009B8                     __end_of_main:
   372                           	opt stack 0
   373                           tblptru	equ	0xFF8
   374                           tblptrh	equ	0xFF7
   375                           tblptrl	equ	0xFF6
   376                           tablat	equ	0xFF5
   377                           postinc0	equ	0xFEE
   378                           wreg	equ	0xFE8
   379                           
   380 ;; *************** function _loop *****************
   381 ;; Defined at:
   382 ;;		line 73 in file "main.c"
   383 ;; Parameters:    Size  Location     Type
   384 ;;		None
   385 ;; Auto vars:     Size  Location     Type
   386 ;;		None
   387 ;; Return value:  Size  Location     Type
   388 ;;                  1    wreg      void 
   389 ;; Registers used:
   390 ;;		wreg, status,2, status,0, cstack
   391 ;; Tracked objects:
   392 ;;		On entry : 0/0
   393 ;;		On exit  : 0/0
   394 ;;		Unchanged: 0/0
   395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   396 ;;      Params:         0       0       0       0       0       0       0       0       0
   397 ;;      Locals:         0       0       0       0       0       0       0       0       0
   398 ;;      Temps:          0       5       0       0       0       0       0       0       0
   399 ;;      Totals:         0       5       0       0       0       0       0       0       0
   400 ;;Total ram usage:        5 bytes
   401 ;; Hardware stack levels used:    1
   402 ;; Hardware stack levels required when called:    4
   403 ;; This function calls:
   404 ;;		_millis
   405 ;;		_setMotores
   406 ;; This function is called by:
   407 ;;		_main
   408 ;; This function uses a non-reentrant model
   409 ;;
   410                           
   411                           	psect	text1
   412  000012                     __ptext1:
   413                           	opt stack 0
   414  000012                     _loop:
   415                           	opt stack 26
   416                           
   417                           ;main.c: 74: static unsigned long m = 0;
   418                           ;main.c: 75: static char estado = MENU;
   419                           ;main.c: 76: static char direccion = DER;
   420                           ;main.c: 78: switch(estado){
   421                           
   422                           ;incstack = 0
   423  000012  D19C               	goto	l66
   424  000014                     l68:
   425                           
   426                           ;main.c: 83: }
   427                           ;main.c: 85: if((unsigned)!PORTAbits.RA1){
   428  000014  B280               	btfsc	3968,1,c	;volatile
   429  000016  D015               	goto	l70
   430                           
   431                           ;main.c: 86: LATAbits.LA2 = 1;
   432  000018  8489               	bsf	3977,2,c	;volatile
   433                           
   434                           ;main.c: 87: LATAbits.LA3 = 1;
   435  00001A  8689               	bsf	3977,3,c	;volatile
   436                           
   437                           ;main.c: 88: LATAbits.LA4 = 1;
   438  00001C  8889               	bsf	3977,4,c	;volatile
   439                           
   440                           ;main.c: 89: while((unsigned)!PORTAbits.RA1){
   441  00001E  D00E               	goto	l71
   442  000020                     
   443                           ;main.c: 90: m = millis();
   444  000020  ECCE  F004         	call	_millis	;wreg free
   445  000024  C013  F046         	movff	?_millis,loop@m
   446  000028  C014  F047         	movff	?_millis+1,loop@m+1
   447  00002C  C015  F048         	movff	?_millis+2,loop@m+2
   448  000030  C016  F049         	movff	?_millis+3,loop@m+3
   449                           
   450                           ;main.c: 91: direccion = DER;
   451  000034  0E05               	movlw	5
   452  000036  6E4B               	movwf	loop@direccion,c
   453                           
   454                           ;main.c: 92: estado = ESPERA;
   455  000038  0E02               	movlw	2
   456  00003A  6E4A               	movwf	loop@estado,c
   457  00003C                     l71:
   458  00003C  B280               	btfsc	3968,1,c	;volatile
   459  00003E  0012               	return	
   460  000040  D7EF               	goto	l72
   461  000042                     l70:
   462                           
   463                           ;main.c: 95: }
   464                           ;main.c: 97: if((unsigned)!PORTAbits.RA5){
   465  000042  BA80               	btfsc	3968,5,c	;volatile
   466  000044  D015               	goto	l74
   467                           
   468                           ;main.c: 98: LATAbits.LA2 = 1;
   469  000046  8489               	bsf	3977,2,c	;volatile
   470                           
   471                           ;main.c: 99: LATAbits.LA3 = 1;
   472  000048  8689               	bsf	3977,3,c	;volatile
   473                           
   474                           ;main.c: 100: LATAbits.LA4 = 1;
   475  00004A  8889               	bsf	3977,4,c	;volatile
   476                           
   477                           ;main.c: 101: while((unsigned)!PORTAbits.RA5){
   478  00004C  D00E               	goto	l75
   479  00004E                     
   480                           ;main.c: 102: m = millis();
   481  00004E  ECCE  F004         	call	_millis	;wreg free
   482  000052  C013  F046         	movff	?_millis,loop@m
   483  000056  C014  F047         	movff	?_millis+1,loop@m+1
   484  00005A  C015  F048         	movff	?_millis+2,loop@m+2
   485  00005E  C016  F049         	movff	?_millis+3,loop@m+3
   486                           
   487                           ;main.c: 103: direccion = IZQ;
   488  000062  0E08               	movlw	8
   489  000064  6E4B               	movwf	loop@direccion,c
   490                           
   491                           ;main.c: 104: estado = ESPERA;
   492  000066  0E02               	movlw	2
   493  000068  6E4A               	movwf	loop@estado,c
   494  00006A                     l75:
   495  00006A  BA80               	btfsc	3968,5,c	;volatile
   496  00006C  0012               	return	
   497  00006E  D7EF               	goto	l76
   498  000070                     l74:
   499                           
   500                           ;main.c: 107: }
   501                           ;main.c: 109: setMotores(0, 0);
   502  000070  0E00               	movlw	0
   503  000072  6E3D               	movwf	setMotores@speedI+1,c
   504  000074  0E00               	movlw	0
   505  000076  6E3C               	movwf	setMotores@speedI,c
   506  000078  0E00               	movlw	0
   507  00007A  6E3F               	movwf	setMotores@speedD+1,c
   508  00007C  0E00               	movlw	0
   509  00007E  6E3E               	movwf	setMotores@speedD,c
   510  000080  ECD2  F001         	call	_setMotores	;wreg free
   511                           
   512                           ;main.c: 110: LATAbits.LA2 = 0;
   513  000084  9489               	bcf	3977,2,c	;volatile
   514                           
   515                           ;main.c: 111: LATAbits.LA3 = (unsigned)!PORTBbits.RB1;
   516  000086  B281               	btfsc	3969,1,c	;volatile
   517  000088  D004               	goto	u1440
   518  00008A  0100               	movlb	0	; () banked
   519  00008C  6B68               	clrf	??_loop& (0+255),b
   520  00008E  2B68               	incf	??_loop& (0+255),f,b
   521  000090  D002               	goto	u1458
   522  000092                     u1440:
   523  000092  0100               	movlb	0	; () banked
   524  000094  6B68               	clrf	??_loop& (0+255),b
   525  000096                     u1458:
   526  000096  4768               	rlncf	??_loop& (0+255),f,b
   527  000098  4768               	rlncf	??_loop& (0+255),f,b
   528  00009A  4768               	rlncf	??_loop& (0+255),f,b
   529  00009C  5089               	movf	3977,w,c	;volatile
   530  00009E  1968               	xorwf	??_loop& (0+255),w,b
   531  0000A0  0BF7               	andlw	-9
   532  0000A2  1968               	xorwf	??_loop& (0+255),w,b
   533  0000A4  6E89               	movwf	3977,c	;volatile
   534                           
   535                           ; BSR set to: 0
   536                           ;main.c: 112: LATAbits.LA4 = 0;
   537  0000A6  9889               	bcf	3977,4,c	;volatile
   538                           
   539                           ;main.c: 113: break;
   540  0000A8  0012               	return	
   541  0000AA                     
   542                           ;main.c: 117: estado = MENU;
   543                           
   544                           ; BSR set to: 0
   545  0000AA  0E00               	movlw	0
   546  0000AC  6E4A               	movwf	loop@estado,c
   547                           
   548                           ;main.c: 118: break;
   549  0000AE  0012               	return	
   550  0000B0                     
   551                           ;main.c: 128: if(millis() > (m + 4970U)){
   552  0000B0  ECCE  F004         	call	_millis	;wreg free
   553  0000B4  0E6A               	movlw	106
   554  0000B6  2446               	addwf	loop@m,w,c
   555  0000B8  0100               	movlb	0	; () banked
   556  0000BA  6F68               	movwf	??_loop& (0+255),b
   557  0000BC  0E13               	movlw	19
   558  0000BE  2047               	addwfc	loop@m+1,w,c
   559  0000C0  6F69               	movwf	(??_loop+1)& (0+255),b
   560  0000C2  0E00               	movlw	0
   561  0000C4  2048               	addwfc	loop@m+2,w,c
   562  0000C6  6F6A               	movwf	(??_loop+2)& (0+255),b
   563  0000C8  0E00               	movlw	0
   564  0000CA  2049               	addwfc	loop@m+3,w,c
   565  0000CC  6F6B               	movwf	(??_loop+3)& (0+255),b
   566  0000CE  5013               	movf	?_millis,w,c
   567  0000D0  5D68               	subwf	??_loop& (0+255),w,b
   568  0000D2  5014               	movf	?_millis+1,w,c
   569  0000D4  5969               	subwfb	(??_loop+1)& (0+255),w,b
   570  0000D6  5015               	movf	?_millis+2,w,c
   571  0000D8  596A               	subwfb	(??_loop+2)& (0+255),w,b
   572  0000DA  5016               	movf	?_millis+3,w,c
   573  0000DC  596B               	subwfb	(??_loop+3)& (0+255),w,b
   574  0000DE  B0D8               	btfsc	status,0,c
   575  0000E0  D006               	goto	l81
   576                           
   577                           ; BSR set to: 0
   578                           ;main.c: 129: estado = ANALISIS;
   579  0000E2  0E03               	movlw	3
   580  0000E4  6E4A               	movwf	loop@estado,c
   581                           
   582                           ; BSR set to: 0
   583                           ;main.c: 130: LATAbits.LA2 = 0;
   584  0000E6  9489               	bcf	3977,2,c	;volatile
   585                           
   586                           ; BSR set to: 0
   587                           ;main.c: 131: LATAbits.LA3 = 0;
   588  0000E8  9689               	bcf	3977,3,c	;volatile
   589                           
   590                           ; BSR set to: 0
   591                           ;main.c: 132: LATAbits.LA4 = 1;
   592  0000EA  8889               	bsf	3977,4,c	;volatile
   593                           
   594                           ;main.c: 133: break;
   595  0000EC  0012               	return	
   596  0000EE                     l81:
   597                           
   598                           ; BSR set to: 0
   599                           ;main.c: 134: }
   600                           ;main.c: 136: setMotores(0, 0);
   601                           
   602                           ; BSR set to: 0
   603  0000EE  0E00               	movlw	0
   604  0000F0  6E3D               	movwf	setMotores@speedI+1,c
   605  0000F2  0E00               	movlw	0
   606  0000F4  6E3C               	movwf	setMotores@speedI,c
   607  0000F6  0E00               	movlw	0
   608  0000F8  6E3F               	movwf	setMotores@speedD+1,c
   609  0000FA  0E00               	movlw	0
   610  0000FC  6E3E               	movwf	setMotores@speedD,c
   611  0000FE  ECD2  F001         	call	_setMotores	;wreg free
   612                           
   613                           ;main.c: 137: LATAbits.LA2 = 1;
   614  000102  8489               	bsf	3977,2,c	;volatile
   615                           
   616                           ;main.c: 138: LATAbits.LA3 = (unsigned)(millis() > (m + (4970U / 2)));
   617  000104  ECCE  F004         	call	_millis	;wreg free
   618  000108  0EB5               	movlw	181
   619  00010A  2446               	addwf	loop@m,w,c
   620  00010C  0100               	movlb	0	; () banked
   621  00010E  6F68               	movwf	??_loop& (0+255),b
   622  000110  0E09               	movlw	9
   623  000112  2047               	addwfc	loop@m+1,w,c
   624  000114  6F69               	movwf	(??_loop+1)& (0+255),b
   625  000116  0E00               	movlw	0
   626  000118  2048               	addwfc	loop@m+2,w,c
   627  00011A  6F6A               	movwf	(??_loop+2)& (0+255),b
   628  00011C  0E00               	movlw	0
   629  00011E  2049               	addwfc	loop@m+3,w,c
   630  000120  6F6B               	movwf	(??_loop+3)& (0+255),b
   631  000122  5013               	movf	?_millis,w,c
   632  000124  5D68               	subwf	??_loop& (0+255),w,b
   633  000126  5014               	movf	?_millis+1,w,c
   634  000128  5969               	subwfb	(??_loop+1)& (0+255),w,b
   635  00012A  5015               	movf	?_millis+2,w,c
   636  00012C  596A               	subwfb	(??_loop+2)& (0+255),w,b
   637  00012E  5016               	movf	?_millis+3,w,c
   638  000130  596B               	subwfb	(??_loop+3)& (0+255),w,b
   639  000132  B0D8               	btfsc	status,0,c
   640  000134  D003               	goto	u1470
   641  000136  6B6C               	clrf	(??_loop+4)& (0+255),b
   642  000138  2B6C               	incf	(??_loop+4)& (0+255),f,b
   643  00013A  D002               	goto	u1488
   644  00013C                     u1470:
   645  00013C  0100               	movlb	0	; () banked
   646  00013E  6B6C               	clrf	(??_loop+4)& (0+255),b
   647  000140                     u1488:
   648  000140  476C               	rlncf	(??_loop+4)& (0+255),f,b
   649  000142  476C               	rlncf	(??_loop+4)& (0+255),f,b
   650  000144  476C               	rlncf	(??_loop+4)& (0+255),f,b
   651  000146  5089               	movf	3977,w,c	;volatile
   652  000148  196C               	xorwf	(??_loop+4)& (0+255),w,b
   653  00014A  0BF7               	andlw	-9
   654  00014C  196C               	xorwf	(??_loop+4)& (0+255),w,b
   655  00014E  6E89               	movwf	3977,c	;volatile
   656                           
   657                           ; BSR set to: 0
   658                           ;main.c: 139: LATAbits.LA4 = 0;
   659  000150  9889               	bcf	3977,4,c	;volatile
   660                           
   661                           ;main.c: 140: break;
   662  000152  0012               	return	
   663  000154                     l82:
   664                           
   665                           ;main.c: 143: if((unsigned)!PORTBbits.RB3 || (unsigned)!PORTCbits.RC6){
   666  000154  A681               	btfss	3969,3,c	;volatile
   667  000156  D002               	goto	u1500
   668  000158  BC82               	btfsc	3970,6,c	;volatile
   669  00015A  D00D               	goto	l83
   670  00015C                     u1500:
   671                           
   672                           ;main.c: 144: estado = ATRAS;
   673  00015C  0E0B               	movlw	11
   674  00015E  6E4A               	movwf	loop@estado,c
   675                           
   676                           ;main.c: 145: m = millis();
   677  000160  ECCE  F004         	call	_millis	;wreg free
   678  000164  C013  F046         	movff	?_millis,loop@m
   679  000168  C014  F047         	movff	?_millis+1,loop@m+1
   680  00016C  C015  F048         	movff	?_millis+2,loop@m+2
   681  000170  C016  F049         	movff	?_millis+3,loop@m+3
   682                           
   683                           ;main.c: 146: break;
   684  000174  0012               	return	
   685  000176                     l83:
   686                           
   687                           ;main.c: 147: }
   688                           ;main.c: 150: estado = ATAQUE;
   689  000176  0E04               	movlw	4
   690  000178  6E4A               	movwf	loop@estado,c
   691                           
   692                           ;main.c: 151: break;
   693  00017A  0012               	return	
   694  00017C                     
   695                           ;main.c: 196: setMotores(1000, 1000);
   696  00017C  0E03               	movlw	3
   697  00017E  6E3D               	movwf	setMotores@speedI+1,c
   698  000180  0EE8               	movlw	232
   699  000182  6E3C               	movwf	setMotores@speedI,c
   700  000184  0E03               	movlw	3
   701  000186  6E3F               	movwf	setMotores@speedD+1,c
   702  000188  0EE8               	movlw	232
   703  00018A  6E3E               	movwf	setMotores@speedD,c
   704  00018C  ECD2  F001         	call	_setMotores	;wreg free
   705                           
   706                           ;main.c: 197: estado = ANALISIS;
   707  000190  0E03               	movlw	3
   708  000192  6E4A               	movwf	loop@estado,c
   709                           
   710                           ;main.c: 198: break;
   711  000194  0012               	return	
   712  000196                     
   713                           ;main.c: 201: setMotores(1000, 1000 / 2);
   714  000196  0E03               	movlw	3
   715  000198  6E3D               	movwf	setMotores@speedI+1,c
   716  00019A  0EE8               	movlw	232
   717  00019C  6E3C               	movwf	setMotores@speedI,c
   718  00019E  0E01               	movlw	1
   719  0001A0  6E3F               	movwf	setMotores@speedD+1,c
   720  0001A2  0EF4               	movlw	244
   721  0001A4  6E3E               	movwf	setMotores@speedD,c
   722  0001A6  ECD2  F001         	call	_setMotores	;wreg free
   723                           
   724                           ;main.c: 202: direccion = DER;
   725  0001AA  0E05               	movlw	5
   726  0001AC  6E4B               	movwf	loop@direccion,c
   727                           
   728                           ;main.c: 203: estado = ANALISIS;
   729  0001AE  0E03               	movlw	3
   730  0001B0  6E4A               	movwf	loop@estado,c
   731                           
   732                           ;main.c: 204: break;
   733  0001B2  0012               	return	
   734  0001B4                     
   735                           ;main.c: 207: setMotores(1000 / 2, 1000);
   736  0001B4  0E01               	movlw	1
   737  0001B6  6E3D               	movwf	setMotores@speedI+1,c
   738  0001B8  0EF4               	movlw	244
   739  0001BA  6E3C               	movwf	setMotores@speedI,c
   740  0001BC  0E03               	movlw	3
   741  0001BE  6E3F               	movwf	setMotores@speedD+1,c
   742  0001C0  0EE8               	movlw	232
   743  0001C2  6E3E               	movwf	setMotores@speedD,c
   744  0001C4  ECD2  F001         	call	_setMotores	;wreg free
   745                           
   746                           ;main.c: 208: direccion = IZQ;
   747  0001C8  0E08               	movlw	8
   748  0001CA  6E4B               	movwf	loop@direccion,c
   749                           
   750                           ;main.c: 209: estado = ANALISIS;
   751  0001CC  0E03               	movlw	3
   752  0001CE  6E4A               	movwf	loop@estado,c
   753                           
   754                           ;main.c: 210: break;
   755  0001D0  0012               	return	
   756  0001D2                     
   757                           ;main.c: 213: if(millis() > (m + 200U)){
   758  0001D2  ECCE  F004         	call	_millis	;wreg free
   759  0001D6  0EC8               	movlw	200
   760  0001D8  2446               	addwf	loop@m,w,c
   761  0001DA  0100               	movlb	0	; () banked
   762  0001DC  6F68               	movwf	??_loop& (0+255),b
   763  0001DE  0E00               	movlw	0
   764  0001E0  2047               	addwfc	loop@m+1,w,c
   765  0001E2  6F69               	movwf	(??_loop+1)& (0+255),b
   766  0001E4  0E00               	movlw	0
   767  0001E6  2048               	addwfc	loop@m+2,w,c
   768  0001E8  6F6A               	movwf	(??_loop+2)& (0+255),b
   769  0001EA  0E00               	movlw	0
   770  0001EC  2049               	addwfc	loop@m+3,w,c
   771  0001EE  6F6B               	movwf	(??_loop+3)& (0+255),b
   772  0001F0  5013               	movf	?_millis,w,c
   773  0001F2  5D68               	subwf	??_loop& (0+255),w,b
   774  0001F4  5014               	movf	?_millis+1,w,c
   775  0001F6  5969               	subwfb	(??_loop+1)& (0+255),w,b
   776  0001F8  5015               	movf	?_millis+2,w,c
   777  0001FA  596A               	subwfb	(??_loop+2)& (0+255),w,b
   778  0001FC  5016               	movf	?_millis+3,w,c
   779  0001FE  596B               	subwfb	(??_loop+3)& (0+255),w,b
   780  000200  B0D8               	btfsc	status,0,c
   781  000202  D00F               	goto	l90
   782                           
   783                           ; BSR set to: 0
   784                           ;main.c: 214: estado = ANALISIS;
   785  000204  0E03               	movlw	3
   786  000206  6E4A               	movwf	loop@estado,c
   787                           
   788                           ;main.c: 217: estado = DERCIEGO;
   789  000208  0E0D               	movlw	13
   790  00020A  6E4A               	movwf	loop@estado,c
   791                           
   792                           ; BSR set to: 0
   793                           ;main.c: 218: m = millis();
   794  00020C  ECCE  F004         	call	_millis	;wreg free
   795  000210  C013  F046         	movff	?_millis,loop@m
   796  000214  C014  F047         	movff	?_millis+1,loop@m+1
   797  000218  C015  F048         	movff	?_millis+2,loop@m+2
   798  00021C  C016  F049         	movff	?_millis+3,loop@m+3
   799                           
   800                           ;main.c: 221: break;
   801  000220  0012               	return	
   802  000222                     l90:
   803                           
   804                           ;main.c: 222: }
   805                           ;main.c: 224: setMotores(-1000, -1000);
   806  000222  0EFC               	movlw	252
   807  000224  6E3D               	movwf	setMotores@speedI+1,c
   808  000226  0E18               	movlw	24
   809  000228  6E3C               	movwf	setMotores@speedI,c
   810  00022A  0EFC               	movlw	252
   811  00022C  6E3F               	movwf	setMotores@speedD+1,c
   812  00022E  0E18               	movlw	24
   813  000230  6E3E               	movwf	setMotores@speedD,c
   814  000232  ECD2  F001         	call	_setMotores	;wreg free
   815                           
   816                           ;main.c: 225: break;
   817  000236  0012               	return	
   818  000238                     
   819                           ;main.c: 228: setMotores(0, 1000);
   820  000238  0E00               	movlw	0
   821  00023A  6E3D               	movwf	setMotores@speedI+1,c
   822  00023C  0E00               	movlw	0
   823  00023E  6E3C               	movwf	setMotores@speedI,c
   824  000240  0E03               	movlw	3
   825  000242  6E3F               	movwf	setMotores@speedD+1,c
   826  000244  0EE8               	movlw	232
   827  000246  6E3E               	movwf	setMotores@speedD,c
   828  000248  ECD2  F001         	call	_setMotores	;wreg free
   829                           
   830                           ;main.c: 229: direccion = IZQ;
   831  00024C  0E08               	movlw	8
   832  00024E  6E4B               	movwf	loop@direccion,c
   833                           
   834                           ;main.c: 230: estado = ANALISIS;
   835  000250  0E03               	movlw	3
   836  000252  6E4A               	movwf	loop@estado,c
   837                           
   838                           ;main.c: 231: break;
   839  000254  0012               	return	
   840  000256                     
   841                           ;main.c: 234: setMotores(1000, 0);
   842  000256  0E03               	movlw	3
   843  000258  6E3D               	movwf	setMotores@speedI+1,c
   844  00025A  0EE8               	movlw	232
   845  00025C  6E3C               	movwf	setMotores@speedI,c
   846  00025E  0E00               	movlw	0
   847  000260  6E3F               	movwf	setMotores@speedD+1,c
   848  000262  0E00               	movlw	0
   849  000264  6E3E               	movwf	setMotores@speedD,c
   850  000266  ECD2  F001         	call	_setMotores	;wreg free
   851                           
   852                           ;main.c: 235: direccion = DER;
   853  00026A  0E05               	movlw	5
   854  00026C  6E4B               	movwf	loop@direccion,c
   855                           
   856                           ;main.c: 236: estado = ANALISIS;
   857  00026E  0E03               	movlw	3
   858  000270  6E4A               	movwf	loop@estado,c
   859                           
   860                           ;main.c: 237: break;
   861  000272  0012               	return	
   862  000274                     
   863                           ;main.c: 240: setMotores(-700, 700);
   864  000274  0EFD               	movlw	253
   865  000276  6E3D               	movwf	setMotores@speedI+1,c
   866  000278  0E44               	movlw	68
   867  00027A  6E3C               	movwf	setMotores@speedI,c
   868  00027C  0E02               	movlw	2
   869  00027E  6E3F               	movwf	setMotores@speedD+1,c
   870  000280  0EBC               	movlw	188
   871  000282  6E3E               	movwf	setMotores@speedD,c
   872  000284  ECD2  F001         	call	_setMotores	;wreg free
   873                           
   874                           ;main.c: 241: direccion = IZQ;
   875  000288  0E08               	movlw	8
   876  00028A  6E4B               	movwf	loop@direccion,c
   877                           
   878                           ;main.c: 242: estado = ANALISIS;
   879  00028C  0E03               	movlw	3
   880  00028E  6E4A               	movwf	loop@estado,c
   881                           
   882                           ;main.c: 243: break;
   883  000290  0012               	return	
   884  000292                     
   885                           ;main.c: 246: setMotores(700, -700);
   886  000292  0E02               	movlw	2
   887  000294  6E3D               	movwf	setMotores@speedI+1,c
   888  000296  0EBC               	movlw	188
   889  000298  6E3C               	movwf	setMotores@speedI,c
   890  00029A  0EFD               	movlw	253
   891  00029C  6E3F               	movwf	setMotores@speedD+1,c
   892  00029E  0E44               	movlw	68
   893  0002A0  6E3E               	movwf	setMotores@speedD,c
   894  0002A2  ECD2  F001         	call	_setMotores	;wreg free
   895                           
   896                           ;main.c: 247: direccion = DER;
   897  0002A6  0E05               	movlw	5
   898  0002A8  6E4B               	movwf	loop@direccion,c
   899                           
   900                           ;main.c: 248: estado = ANALISIS;
   901  0002AA  0E03               	movlw	3
   902  0002AC  6E4A               	movwf	loop@estado,c
   903                           
   904                           ;main.c: 249: break;
   905  0002AE  0012               	return	
   906  0002B0                     
   907                           ;main.c: 252: if(millis() > (m + 500U)){
   908  0002B0  ECCE  F004         	call	_millis	;wreg free
   909  0002B4  0EF4               	movlw	244
   910  0002B6  2446               	addwf	loop@m,w,c
   911  0002B8  0100               	movlb	0	; () banked
   912  0002BA  6F68               	movwf	??_loop& (0+255),b
   913  0002BC  0E01               	movlw	1
   914  0002BE  2047               	addwfc	loop@m+1,w,c
   915  0002C0  6F69               	movwf	(??_loop+1)& (0+255),b
   916  0002C2  0E00               	movlw	0
   917  0002C4  2048               	addwfc	loop@m+2,w,c
   918  0002C6  6F6A               	movwf	(??_loop+2)& (0+255),b
   919  0002C8  0E00               	movlw	0
   920  0002CA  2049               	addwfc	loop@m+3,w,c
   921  0002CC  6F6B               	movwf	(??_loop+3)& (0+255),b
   922  0002CE  5013               	movf	?_millis,w,c
   923  0002D0  5D68               	subwf	??_loop& (0+255),w,b
   924  0002D2  5014               	movf	?_millis+1,w,c
   925  0002D4  5969               	subwfb	(??_loop+1)& (0+255),w,b
   926  0002D6  5015               	movf	?_millis+2,w,c
   927  0002D8  596A               	subwfb	(??_loop+2)& (0+255),w,b
   928  0002DA  5016               	movf	?_millis+3,w,c
   929  0002DC  596B               	subwfb	(??_loop+3)& (0+255),w,b
   930  0002DE  B0D8               	btfsc	status,0,c
   931  0002E0  D003               	goto	l96
   932                           
   933                           ; BSR set to: 0
   934                           ;main.c: 253: estado = ANALISIS;
   935  0002E2  0E03               	movlw	3
   936  0002E4  6E4A               	movwf	loop@estado,c
   937                           
   938                           ;main.c: 254: break;
   939  0002E6  0012               	return	
   940  0002E8                     l96:
   941                           
   942                           ; BSR set to: 0
   943                           ;main.c: 255: }
   944                           ;main.c: 257: setMotores(700, -700);
   945                           
   946                           ; BSR set to: 0
   947  0002E8  0E02               	movlw	2
   948  0002EA  6E3D               	movwf	setMotores@speedI+1,c
   949  0002EC  0EBC               	movlw	188
   950  0002EE  6E3C               	movwf	setMotores@speedI,c
   951  0002F0  0EFD               	movlw	253
   952  0002F2  6E3F               	movwf	setMotores@speedD+1,c
   953  0002F4  0E44               	movlw	68
   954  0002F6  6E3E               	movwf	setMotores@speedD,c
   955  0002F8  ECD2  F001         	call	_setMotores	;wreg free
   956                           
   957                           ;main.c: 258: break;
   958  0002FC  0012               	return	
   959  0002FE                     
   960                           ;main.c: 261: LATAbits.LA2 = (unsigned)!PORTBbits.RB3;
   961  0002FE  B681               	btfsc	3969,3,c	;volatile
   962  000300  D004               	goto	u1530
   963  000302  0100               	movlb	0	; () banked
   964  000304  6B68               	clrf	??_loop& (0+255),b
   965  000306  2B68               	incf	??_loop& (0+255),f,b
   966  000308  D002               	goto	u1548
   967  00030A                     u1530:
   968  00030A  0100               	movlb	0	; () banked
   969  00030C  6B68               	clrf	??_loop& (0+255),b
   970  00030E                     u1548:
   971  00030E  4768               	rlncf	??_loop& (0+255),f,b
   972  000310  4768               	rlncf	??_loop& (0+255),f,b
   973  000312  5089               	movf	3977,w,c	;volatile
   974  000314  1968               	xorwf	??_loop& (0+255),w,b
   975  000316  0BFB               	andlw	-5
   976  000318  1968               	xorwf	??_loop& (0+255),w,b
   977  00031A  6E89               	movwf	3977,c	;volatile
   978                           
   979                           ;main.c: 262: LATAbits.LA4 = (unsigned)!PORTCbits.RC6;
   980  00031C  BC82               	btfsc	3970,6,c	;volatile
   981  00031E  D003               	goto	u1550
   982  000320  6B68               	clrf	??_loop& (0+255),b
   983  000322  2B68               	incf	??_loop& (0+255),f,b
   984  000324  D002               	goto	u1568
   985  000326                     u1550:
   986  000326  0100               	movlb	0	; () banked
   987  000328  6B68               	clrf	??_loop& (0+255),b
   988  00032A                     u1568:
   989  00032A  3B68               	swapf	??_loop& (0+255),f,b
   990  00032C  5089               	movf	3977,w,c	;volatile
   991  00032E  1968               	xorwf	??_loop& (0+255),w,b
   992  000330  0BEF               	andlw	-17
   993  000332  1968               	xorwf	??_loop& (0+255),w,b
   994  000334  6E89               	movwf	3977,c	;volatile
   995                           
   996                           ; BSR set to: 0
   997                           ;main.c: 263: LATAbits.LA3 = 1;
   998  000336  8689               	bsf	3977,3,c	;volatile
   999                           
  1000                           ; BSR set to: 0
  1001                           ;main.c: 264: if((unsigned)!PORTAbits.RA1 || (unsigned)!PORTAbits.RA5){
  1002  000338  A280               	btfss	3968,1,c	;volatile
  1003  00033A  D002               	goto	u1580
  1004                           
  1005                           ; BSR set to: 0
  1006  00033C  BA80               	btfsc	3968,5,c	;volatile
  1007  00033E  0012               	return	
  1008  000340                     u1580:
  1009                           
  1010                           ; BSR set to: 0
  1011                           
  1012                           ; BSR set to: 0
  1013                           ;main.c: 265: while((unsigned)!PORTAbits.RA1 || (unsigned)!PORTAbits.RA5);
  1014  000340  B280               	btfsc	3968,1,c	;volatile
  1015  000342  AA80               	btfss	3968,5,c	;volatile
  1016  000344  D7FD               	goto	u1580
  1017                           
  1018                           ;main.c: 266: estado = 0;
  1019  000346  0E00               	movlw	0
  1020  000348  6E4A               	movwf	loop@estado,c
  1021                           
  1022                           ;main.c: 269: }
  1023                           
  1024                           ;main.c: 267: }
  1025                           ;main.c: 268: break;
  1026  00034A  0012               	return	
  1027  00034C                     l66:
  1028  00034C  504A               	movf	loop@estado,w,c
  1029                           
  1030                           ; Switch size 1, requested type "space"
  1031                           ; Number of cases is 14, Range of values is 0 to 13
  1032                           ; switch strategies available:
  1033                           ; Name         Instructions Cycles
  1034                           ; simple_byte           43    22 (average)
  1035                           ;	Chosen strategy is simple_byte
  1036  00034E  0A00               	xorlw	0	; case 0
  1037  000350  B4D8               	btfsc	status,2,c
  1038  000352  D660               	goto	l68
  1039  000354  0A01               	xorlw	1	; case 1
  1040  000356  B4D8               	btfsc	status,2,c
  1041  000358  D6A8               	goto	l78
  1042  00035A  0A03               	xorlw	3	; case 2
  1043  00035C  B4D8               	btfsc	status,2,c
  1044  00035E  D6A8               	goto	l80
  1045  000360  0A01               	xorlw	1	; case 3
  1046  000362  B4D8               	btfsc	status,2,c
  1047  000364  D6F7               	goto	l82
  1048  000366  0A07               	xorlw	7	; case 4
  1049  000368  B4D8               	btfsc	status,2,c
  1050  00036A  D708               	goto	l86
  1051  00036C  0A01               	xorlw	1	; case 5
  1052  00036E  B4D8               	btfsc	status,2,c
  1053  000370  D790               	goto	l94
  1054  000372  0A03               	xorlw	3	; case 6
  1055  000374  B4D8               	btfsc	status,2,c
  1056  000376  D76F               	goto	l92
  1057  000378  0A01               	xorlw	1	; case 7
  1058  00037A  B4D8               	btfsc	status,2,c
  1059  00037C  D70C               	goto	l87
  1060  00037E  0A0F               	xorlw	15	; case 8
  1061  000380  B4D8               	btfsc	status,2,c
  1062  000382  D778               	goto	l93
  1063  000384  0A01               	xorlw	1	; case 9
  1064  000386  B4D8               	btfsc	status,2,c
  1065  000388  D757               	goto	l91
  1066  00038A  0A03               	xorlw	3	; case 10
  1067  00038C  B4D8               	btfsc	status,2,c
  1068  00038E  D712               	goto	l88
  1069  000390  0A01               	xorlw	1	; case 11
  1070  000392  B4D8               	btfsc	status,2,c
  1071  000394  D71E               	goto	l89
  1072  000396  0A07               	xorlw	7	; case 12
  1073  000398  B4D8               	btfsc	status,2,c
  1074  00039A  D7B1               	goto	l97
  1075  00039C  0A01               	xorlw	1	; case 13
  1076  00039E  A4D8               	btfss	status,2,c
  1077  0003A0  0012               	return	
  1078  0003A2  D786               	goto	l95
  1079  0003A4                     __end_of_loop:
  1080                           	opt stack 0
  1081                           tblptru	equ	0xFF8
  1082                           tblptrh	equ	0xFF7
  1083                           tblptrl	equ	0xFF6
  1084                           tablat	equ	0xFF5
  1085                           postinc0	equ	0xFEE
  1086                           wreg	equ	0xFE8
  1087                           status	equ	0xFD8
  1088                           
  1089 ;; *************** function _millis *****************
  1090 ;; Defined at:
  1091 ;;		line 295 in file "main.c"
  1092 ;; Parameters:    Size  Location     Type
  1093 ;;		None
  1094 ;; Auto vars:     Size  Location     Type
  1095 ;;		None
  1096 ;; Return value:  Size  Location     Type
  1097 ;;                  4   18[COMRAM] unsigned long 
  1098 ;; Registers used:
  1099 ;;		None
  1100 ;; Tracked objects:
  1101 ;;		On entry : 0/0
  1102 ;;		On exit  : 0/0
  1103 ;;		Unchanged: 0/0
  1104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1105 ;;      Params:         4       0       0       0       0       0       0       0       0
  1106 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1107 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1108 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1109 ;;Total ram usage:        4 bytes
  1110 ;; Hardware stack levels used:    1
  1111 ;; Hardware stack levels required when called:    1
  1112 ;; This function calls:
  1113 ;;		Nothing
  1114 ;; This function is called by:
  1115 ;;		_loop
  1116 ;; This function uses a non-reentrant model
  1117 ;;
  1118                           
  1119                           	psect	text2
  1120  00099C                     __ptext2:
  1121                           	opt stack 0
  1122  00099C                     _millis:
  1123                           	opt stack 28
  1124                           
  1125                           ;main.c: 296: return millisCounter;
  1126                           
  1127                           ;incstack = 0
  1128  00099C  C042  F013         	movff	_millisCounter,?_millis
  1129  0009A0  C043  F014         	movff	_millisCounter+1,?_millis+1
  1130  0009A4  C044  F015         	movff	_millisCounter+2,?_millis+2
  1131  0009A8  C045  F016         	movff	_millisCounter+3,?_millis+3
  1132  0009AC  0012               	return		;funcret
  1133  0009AE                     __end_of_millis:
  1134                           	opt stack 0
  1135                           tblptru	equ	0xFF8
  1136                           tblptrh	equ	0xFF7
  1137                           tblptrl	equ	0xFF6
  1138                           tablat	equ	0xFF5
  1139                           postinc0	equ	0xFEE
  1140                           wreg	equ	0xFE8
  1141                           status	equ	0xFD8
  1142                           
  1143 ;; *************** function _init *****************
  1144 ;; Defined at:
  1145 ;;		line 13 in file "main.c"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;		None
  1148 ;; Auto vars:     Size  Location     Type
  1149 ;;		None
  1150 ;; Return value:  Size  Location     Type
  1151 ;;                  1    wreg      void 
  1152 ;; Registers used:
  1153 ;;		wreg, status,2, status,0, cstack
  1154 ;; Tracked objects:
  1155 ;;		On entry : 0/0
  1156 ;;		On exit  : 0/0
  1157 ;;		Unchanged: 0/0
  1158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1159 ;;      Params:         0       0       0       0       0       0       0       0       0
  1160 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1161 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1162 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1163 ;;Total ram usage:        0 bytes
  1164 ;; Hardware stack levels used:    1
  1165 ;; Hardware stack levels required when called:    4
  1166 ;; This function calls:
  1167 ;;		_setMotores
  1168 ;; This function is called by:
  1169 ;;		_main
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173                           	psect	text3
  1174  0008B4                     __ptext3:
  1175                           	opt stack 0
  1176  0008B4                     _init:
  1177                           	opt stack 26
  1178                           
  1179                           ;main.c: 15: ADCON1bits.PCFG = 0b1111;
  1180                           
  1181                           ;incstack = 0
  1182  0008B4  80C1               	bsf	4033,0,c	;volatile
  1183  0008B6  82C1               	bsf	4033,1,c	;volatile
  1184  0008B8  84C1               	bsf	4033,2,c	;volatile
  1185  0008BA  86C1               	bsf	4033,3,c	;volatile
  1186                           
  1187                           ;main.c: 18: UCONbits.USBEN = 0;
  1188  0008BC  966D               	bcf	3949,3,c	;volatile
  1189                           
  1190                           ;main.c: 19: UCFGbits.UTRDIS = 1;
  1191  0008BE  866F               	bsf	3951,3,c	;volatile
  1192                           
  1193                           ;main.c: 22: TRISAbits.RA1 = INPUT;
  1194  0008C0  8292               	bsf	3986,1,c	;volatile
  1195                           
  1196                           ;main.c: 23: TRISAbits.RA5 = INPUT;
  1197  0008C2  8A92               	bsf	3986,5,c	;volatile
  1198                           
  1199                           ;main.c: 24: TRISAbits.RA2 = OUTPUT;
  1200  0008C4  9492               	bcf	3986,2,c	;volatile
  1201                           
  1202                           ;main.c: 25: TRISAbits.RA3 = OUTPUT;
  1203  0008C6  9692               	bcf	3986,3,c	;volatile
  1204                           
  1205                           ;main.c: 26: TRISAbits.RA4 = OUTPUT;
  1206  0008C8  9892               	bcf	3986,4,c	;volatile
  1207                           
  1208                           ;main.c: 27: TRISBbits.RB5 = INPUT;
  1209  0008CA  8A93               	bsf	3987,5,c	;volatile
  1210                           
  1211                           ;main.c: 28: TRISBbits.RB4 = INPUT;
  1212  0008CC  8893               	bsf	3987,4,c	;volatile
  1213                           
  1214                           ;main.c: 29: TRISBbits.RB1 = INPUT;
  1215  0008CE  8293               	bsf	3987,1,c	;volatile
  1216                           
  1217                           ;main.c: 32: TRISBbits.RB3 = INPUT;
  1218  0008D0  8693               	bsf	3987,3,c	;volatile
  1219                           
  1220                           ;main.c: 33: TRISCbits.RC6 = INPUT;
  1221  0008D2  8C94               	bsf	3988,6,c	;volatile
  1222                           
  1223                           ;main.c: 34: TRISCbits.RC1 = OUTPUT;
  1224  0008D4  9294               	bcf	3988,1,c	;volatile
  1225                           
  1226                           ;main.c: 35: TRISCbits.RC2 = OUTPUT;
  1227  0008D6  9494               	bcf	3988,2,c	;volatile
  1228                           
  1229                           ;main.c: 36: TRISCbits.RC0 = OUTPUT;
  1230  0008D8  9094               	bcf	3988,0,c	;volatile
  1231                           
  1232                           ;main.c: 37: TRISAbits.RA0 = OUTPUT;
  1233  0008DA  9092               	bcf	3986,0,c	;volatile
  1234                           
  1235                           ;main.c: 40: T2CON = 0;
  1236  0008DC  0E00               	movlw	0
  1237  0008DE  6ECA               	movwf	4042,c	;volatile
  1238                           
  1239                           ;main.c: 41: T2CONbits.TOUTPS=11;
  1240  0008E0  50CA               	movf	4042,w,c	;volatile
  1241  0008E2  0B87               	andlw	-121
  1242  0008E4  0958               	iorlw	88
  1243  0008E6  6ECA               	movwf	4042,c	;volatile
  1244                           
  1245                           ;main.c: 42: T2CONbits.T2CKPS=1;
  1246  0008E8  50CA               	movf	4042,w,c	;volatile
  1247  0008EA  0BFC               	andlw	-4
  1248  0008EC  0901               	iorlw	1
  1249  0008EE  6ECA               	movwf	4042,c	;volatile
  1250                           
  1251                           ;main.c: 43: PR2=249;
  1252  0008F0  0EF9               	movlw	249
  1253  0008F2  6ECB               	movwf	4043,c	;volatile
  1254                           
  1255                           ;main.c: 44: T2CONbits.TMR2ON=1;
  1256  0008F4  84CA               	bsf	4042,2,c	;volatile
  1257                           
  1258                           ;main.c: 47: CCPR1L=0;
  1259  0008F6  0E00               	movlw	0
  1260  0008F8  6EBE               	movwf	4030,c	;volatile
  1261                           
  1262                           ;main.c: 48: CCP1CONbits.DC1B=0;
  1263  0008FA  0ECF               	movlw	-49
  1264  0008FC  16BD               	andwf	4029,f,c	;volatile
  1265                           
  1266                           ;main.c: 49: CCP1CONbits.CCP1M=12;
  1267  0008FE  50BD               	movf	4029,w,c	;volatile
  1268  000900  0BF0               	andlw	-16
  1269  000902  090C               	iorlw	12
  1270  000904  6EBD               	movwf	4029,c	;volatile
  1271                           
  1272                           ;main.c: 50: CCPR2L=0;
  1273  000906  0E00               	movlw	0
  1274  000908  6EBB               	movwf	4027,c	;volatile
  1275                           
  1276                           ;main.c: 51: CCP2CONbits.DC2B=0;
  1277  00090A  0ECF               	movlw	-49
  1278  00090C  16BA               	andwf	4026,f,c	;volatile
  1279                           
  1280                           ;main.c: 52: CCP2CONbits.CCP2M=12;
  1281  00090E  50BA               	movf	4026,w,c	;volatile
  1282  000910  0BF0               	andlw	-16
  1283  000912  090C               	iorlw	12
  1284  000914  6EBA               	movwf	4026,c	;volatile
  1285                           
  1286                           ;main.c: 55: INTCON3=0;
  1287  000916  0E00               	movlw	0
  1288  000918  6EF0               	movwf	intcon3,c	;volatile
  1289                           
  1290                           ;main.c: 56: PIE1=0;
  1291  00091A  0E00               	movlw	0
  1292  00091C  6E9D               	movwf	3997,c	;volatile
  1293                           
  1294                           ;main.c: 57: PIE2=0;
  1295  00091E  0E00               	movlw	0
  1296  000920  6EA0               	movwf	4000,c	;volatile
  1297                           
  1298                           ;main.c: 58: RCONbits.IPEN=0;
  1299  000922  9ED0               	bcf	4048,7,c	;volatile
  1300                           
  1301                           ;main.c: 59: PIE1bits.TMR2IE=1;
  1302  000924  829D               	bsf	3997,1,c	;volatile
  1303                           
  1304                           ;main.c: 60: INTCONbits.PEIE_GIEL=1;
  1305  000926  8CF2               	bsf	intcon,6,c	;volatile
  1306                           
  1307                           ;main.c: 61: INTCONbits.GIE_GIEH=1;
  1308  000928  8EF2               	bsf	intcon,7,c	;volatile
  1309                           
  1310                           ;main.c: 62: RCONbits.IPEN = 0;
  1311  00092A  9ED0               	bcf	4048,7,c	;volatile
  1312                           
  1313                           ;main.c: 63: INTCONbits.PEIE = 1;
  1314  00092C  8CF2               	bsf	intcon,6,c	;volatile
  1315                           
  1316                           ;main.c: 64: INTCONbits.GIE = 1;
  1317  00092E  8EF2               	bsf	intcon,7,c	;volatile
  1318                           
  1319                           ;main.c: 67: setMotores(0, 0);
  1320  000930  0E00               	movlw	0
  1321  000932  6E3D               	movwf	setMotores@speedI+1,c
  1322  000934  0E00               	movlw	0
  1323  000936  6E3C               	movwf	setMotores@speedI,c
  1324  000938  0E00               	movlw	0
  1325  00093A  6E3F               	movwf	setMotores@speedD+1,c
  1326  00093C  0E00               	movlw	0
  1327  00093E  6E3E               	movwf	setMotores@speedD,c
  1328  000940  ECD2  F001         	call	_setMotores	;wreg free
  1329                           
  1330                           ;main.c: 68: LATAbits.LA2 = 0;
  1331  000944  9489               	bcf	3977,2,c	;volatile
  1332                           
  1333                           ;main.c: 69: LATAbits.LA3 = 0;
  1334  000946  9689               	bcf	3977,3,c	;volatile
  1335                           
  1336                           ;main.c: 70: LATAbits.LA4 = 0;
  1337  000948  9889               	bcf	3977,4,c	;volatile
  1338  00094A  0012               	return		;funcret
  1339  00094C                     __end_of_init:
  1340                           	opt stack 0
  1341                           tblptru	equ	0xFF8
  1342                           tblptrh	equ	0xFF7
  1343                           tblptrl	equ	0xFF6
  1344                           tablat	equ	0xFF5
  1345                           intcon	equ	0xFF2
  1346                           intcon3	equ	0xFF0
  1347                           postinc0	equ	0xFEE
  1348                           wreg	equ	0xFE8
  1349                           status	equ	0xFD8
  1350                           
  1351 ;; *************** function _setMotores *****************
  1352 ;; Defined at:
  1353 ;;		line 272 in file "main.c"
  1354 ;; Parameters:    Size  Location     Type
  1355 ;;  speedI          2   59[COMRAM] int 
  1356 ;;  speedD          2   61[COMRAM] int 
  1357 ;; Auto vars:     Size  Location     Type
  1358 ;;  dutyD           2    6[BANK0 ] unsigned int 
  1359 ;;  dutyI           2    4[BANK0 ] unsigned int 
  1360 ;; Return value:  Size  Location     Type
  1361 ;;                  1    wreg      void 
  1362 ;; Registers used:
  1363 ;;		wreg, status,2, status,0, cstack
  1364 ;; Tracked objects:
  1365 ;;		On entry : 0/0
  1366 ;;		On exit  : 0/0
  1367 ;;		Unchanged: 0/0
  1368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1369 ;;      Params:         4       0       0       0       0       0       0       0       0
  1370 ;;      Locals:         0       8       0       0       0       0       0       0       0
  1371 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1372 ;;      Totals:         6       8       0       0       0       0       0       0       0
  1373 ;;Total ram usage:       14 bytes
  1374 ;; Hardware stack levels used:    1
  1375 ;; Hardware stack levels required when called:    3
  1376 ;; This function calls:
  1377 ;;		___ftmul
  1378 ;;		___fttol
  1379 ;;		___lwtoft
  1380 ;; This function is called by:
  1381 ;;		_init
  1382 ;;		_loop
  1383 ;; This function uses a non-reentrant model
  1384 ;;
  1385                           
  1386                           	psect	text4
  1387  0003A4                     __ptext4:
  1388                           	opt stack 0
  1389  0003A4                     _setMotores:
  1390                           	opt stack 26
  1391                           
  1392                           ;main.c: 273: speedD = -speedD;
  1393                           
  1394                           ;incstack = 0
  1395  0003A4  6C3E               	negf	setMotores@speedD,c
  1396  0003A6  1E3F               	comf	setMotores@speedD+1,f,c
  1397  0003A8  B0D8               	btfsc	status,0,c
  1398  0003AA  2A3F               	incf	setMotores@speedD+1,f,c
  1399                           
  1400                           ;main.c: 275: speedI = (speedI > 1000 ? 1000 : (speedI < -1000 ? -1000 : speedI));
  1401  0003AC  BE3D               	btfsc	setMotores@speedI+1,7,c
  1402  0003AE  D006               	goto	u1300
  1403  0003B0  0EE9               	movlw	233
  1404  0003B2  5C3C               	subwf	setMotores@speedI,w,c
  1405  0003B4  0E03               	movlw	3
  1406  0003B6  583D               	subwfb	setMotores@speedI+1,w,c
  1407  0003B8  B0D8               	btfsc	status,0,c
  1408  0003BA  D017               	goto	l108
  1409  0003BC                     u1300:
  1410  0003BC  AE3D               	btfss	setMotores@speedI+1,7,c
  1411  0003BE  D006               	goto	u1310
  1412  0003C0  0E18               	movlw	24
  1413  0003C2  5C3C               	subwf	setMotores@speedI,w,c
  1414  0003C4  0EFC               	movlw	252
  1415  0003C6  583D               	subwfb	setMotores@speedI+1,w,c
  1416  0003C8  A0D8               	btfss	status,0,c
  1417  0003CA  D005               	goto	l112
  1418  0003CC                     u1310:
  1419  0003CC  C03C  F060         	movff	setMotores@speedI,_setMotores$851
  1420  0003D0  C03D  F061         	movff	setMotores@speedI+1,_setMotores$851+1
  1421  0003D4  D005               	goto	l114
  1422  0003D6                     l112:
  1423  0003D6  0EFC               	movlw	252
  1424  0003D8  0100               	movlb	0	; () banked
  1425  0003DA  6F61               	movwf	(_setMotores$851+1)& (0+255),b
  1426  0003DC  0E18               	movlw	24
  1427  0003DE  6F60               	movwf	_setMotores$851& (0+255),b
  1428  0003E0                     l114:
  1429                           
  1430                           ; BSR set to: 0
  1431  0003E0  C060  F03C         	movff	_setMotores$851,setMotores@speedI
  1432  0003E4  C061  F03D         	movff	_setMotores$851+1,setMotores@speedI+1
  1433  0003E8  D004               	goto	l110
  1434  0003EA                     l108:
  1435  0003EA  0E03               	movlw	3
  1436  0003EC  6E3D               	movwf	setMotores@speedI+1,c
  1437  0003EE  0EE8               	movlw	232
  1438  0003F0  6E3C               	movwf	setMotores@speedI,c
  1439  0003F2                     l110:
  1440                           
  1441                           ;main.c: 276: speedD = (speedD > 1000 ? 1000 : (speedD < -1000 ? -1000 : speedD));
  1442  0003F2  BE3F               	btfsc	setMotores@speedD+1,7,c
  1443  0003F4  D006               	goto	u1320
  1444  0003F6  0EE9               	movlw	233
  1445  0003F8  5C3E               	subwf	setMotores@speedD,w,c
  1446  0003FA  0E03               	movlw	3
  1447  0003FC  583F               	subwfb	setMotores@speedD+1,w,c
  1448  0003FE  B0D8               	btfsc	status,0,c
  1449  000400  D017               	goto	l116
  1450  000402                     u1320:
  1451  000402  AE3F               	btfss	setMotores@speedD+1,7,c
  1452  000404  D006               	goto	u1330
  1453  000406  0E18               	movlw	24
  1454  000408  5C3E               	subwf	setMotores@speedD,w,c
  1455  00040A  0EFC               	movlw	252
  1456  00040C  583F               	subwfb	setMotores@speedD+1,w,c
  1457  00040E  A0D8               	btfss	status,0,c
  1458  000410  D005               	goto	l120
  1459  000412                     u1330:
  1460  000412  C03E  F062         	movff	setMotores@speedD,_setMotores$852
  1461  000416  C03F  F063         	movff	setMotores@speedD+1,_setMotores$852+1
  1462  00041A  D005               	goto	l122
  1463  00041C                     l120:
  1464  00041C  0EFC               	movlw	252
  1465  00041E  0100               	movlb	0	; () banked
  1466  000420  6F63               	movwf	(_setMotores$852+1)& (0+255),b
  1467  000422  0E18               	movlw	24
  1468  000424  6F62               	movwf	_setMotores$852& (0+255),b
  1469  000426                     l122:
  1470                           
  1471                           ; BSR set to: 0
  1472  000426  C062  F03E         	movff	_setMotores$852,setMotores@speedD
  1473  00042A  C063  F03F         	movff	_setMotores$852+1,setMotores@speedD+1
  1474  00042E  D004               	goto	l118
  1475  000430                     l116:
  1476  000430  0E03               	movlw	3
  1477  000432  6E3F               	movwf	setMotores@speedD+1,c
  1478  000434  0EE8               	movlw	232
  1479  000436  6E3E               	movwf	setMotores@speedD,c
  1480  000438                     l118:
  1481                           
  1482                           ;main.c: 278: LATAbits.LA0 = (unsigned)(speedI < 0);
  1483  000438  AE3D               	btfss	setMotores@speedI+1,7,c
  1484  00043A  D003               	goto	u1340
  1485  00043C  6A40               	clrf	??_setMotores& (0+255),c
  1486  00043E  2A40               	incf	??_setMotores& (0+255),f,c
  1487  000440  D001               	goto	u1358
  1488  000442                     u1340:
  1489  000442  6A40               	clrf	??_setMotores& (0+255),c
  1490  000444                     u1358:
  1491  000444  5089               	movf	3977,w,c	;volatile
  1492  000446  1840               	xorwf	??_setMotores,w,c
  1493  000448  0BFE               	andlw	-2
  1494  00044A  1840               	xorwf	??_setMotores,w,c
  1495  00044C  6E89               	movwf	3977,c	;volatile
  1496                           
  1497                           ;main.c: 279: LATCbits.LC0 = (unsigned)(speedD < 0);
  1498  00044E  AE3F               	btfss	setMotores@speedD+1,7,c
  1499  000450  D003               	goto	u1360
  1500  000452  6A40               	clrf	??_setMotores& (0+255),c
  1501  000454  2A40               	incf	??_setMotores& (0+255),f,c
  1502  000456  D001               	goto	u1378
  1503  000458                     u1360:
  1504  000458  6A40               	clrf	??_setMotores& (0+255),c
  1505  00045A                     u1378:
  1506  00045A  508B               	movf	3979,w,c	;volatile
  1507  00045C  1840               	xorwf	??_setMotores,w,c
  1508  00045E  0BFE               	andlw	-2
  1509  000460  1840               	xorwf	??_setMotores,w,c
  1510  000462  6E8B               	movwf	3979,c	;volatile
  1511                           
  1512                           ;main.c: 281: unsigned int dutyI = (unsigned)(speedI < 0 ? 1000+speedI : speedI);
  1513  000464  BE3D               	btfsc	setMotores@speedI+1,7,c
  1514  000466  D005               	goto	l124
  1515  000468  C03C  F064         	movff	setMotores@speedI,setMotores@dutyI
  1516  00046C  C03D  F065         	movff	setMotores@speedI+1,setMotores@dutyI+1
  1517  000470  D007               	goto	l126
  1518  000472                     l124:
  1519  000472  0EE8               	movlw	232
  1520  000474  243C               	addwf	setMotores@speedI,w,c
  1521  000476  0100               	movlb	0	; () banked
  1522  000478  6F64               	movwf	setMotores@dutyI& (0+255),b
  1523  00047A  0E03               	movlw	3
  1524  00047C  203D               	addwfc	setMotores@speedI+1,w,c
  1525  00047E  6F65               	movwf	(setMotores@dutyI+1)& (0+255),b
  1526  000480                     l126:
  1527                           
  1528                           ;main.c: 282: unsigned int dutyD = (unsigned)(speedD < 0 ? 1000+speedD : speedD);
  1529  000480  BE3F               	btfsc	setMotores@speedD+1,7,c
  1530  000482  D005               	goto	l128
  1531  000484  C03E  F066         	movff	setMotores@speedD,setMotores@dutyD
  1532  000488  C03F  F067         	movff	setMotores@speedD+1,setMotores@dutyD+1
  1533  00048C  D007               	goto	l130
  1534  00048E                     l128:
  1535  00048E  0EE8               	movlw	232
  1536  000490  243E               	addwf	setMotores@speedD,w,c
  1537  000492  0100               	movlb	0	; () banked
  1538  000494  6F66               	movwf	setMotores@dutyD& (0+255),b
  1539  000496  0E03               	movlw	3
  1540  000498  203F               	addwfc	setMotores@speedD+1,w,c
  1541  00049A  6F67               	movwf	(setMotores@dutyD+1)& (0+255),b
  1542  00049C                     l130:
  1543                           
  1544                           ;main.c: 284: dutyI *= 1.023;
  1545                           
  1546                           ; BSR set to: 0
  1547  00049C  0EF2               	movlw	242
  1548  00049E  6E21               	movwf	___ftmul@f2,c
  1549  0004A0  0E82               	movlw	130
  1550  0004A2  6E22               	movwf	___ftmul@f2+1,c
  1551  0004A4  0E3F               	movlw	63
  1552  0004A6  6E23               	movwf	___ftmul@f2+2,c
  1553  0004A8  C064  F01B         	movff	setMotores@dutyI,___lwtoft@c
  1554  0004AC  C065  F01C         	movff	setMotores@dutyI+1,___lwtoft@c+1
  1555  0004B0  ECBC  F004         	call	___lwtoft	;wreg free
  1556  0004B4  C01B  F01E         	movff	?___lwtoft,___ftmul@f1
  1557  0004B8  C01C  F01F         	movff	?___lwtoft+1,___ftmul@f1+1
  1558  0004BC  C01D  F020         	movff	?___lwtoft+2,___ftmul@f1+2
  1559  0004C0  EC35  F003         	call	___ftmul	;wreg free
  1560  0004C4  C01E  F02D         	movff	?___ftmul,___fttol@f1
  1561  0004C8  C01F  F02E         	movff	?___ftmul+1,___fttol@f1+1
  1562  0004CC  C020  F02F         	movff	?___ftmul+2,___fttol@f1+2
  1563  0004D0  ECBB  F002         	call	___fttol	;wreg free
  1564  0004D4  C02D  F064         	movff	?___fttol,setMotores@dutyI
  1565  0004D8  C02E  F065         	movff	?___fttol+1,setMotores@dutyI+1
  1566                           
  1567                           ;main.c: 285: dutyD *= 1.023;
  1568  0004DC  0EF2               	movlw	242
  1569  0004DE  6E21               	movwf	___ftmul@f2,c
  1570  0004E0  0E82               	movlw	130
  1571  0004E2  6E22               	movwf	___ftmul@f2+1,c
  1572  0004E4  0E3F               	movlw	63
  1573  0004E6  6E23               	movwf	___ftmul@f2+2,c
  1574  0004E8  C066  F01B         	movff	setMotores@dutyD,___lwtoft@c
  1575  0004EC  C067  F01C         	movff	setMotores@dutyD+1,___lwtoft@c+1
  1576  0004F0  ECBC  F004         	call	___lwtoft	;wreg free
  1577  0004F4  C01B  F01E         	movff	?___lwtoft,___ftmul@f1
  1578  0004F8  C01C  F01F         	movff	?___lwtoft+1,___ftmul@f1+1
  1579  0004FC  C01D  F020         	movff	?___lwtoft+2,___ftmul@f1+2
  1580  000500  EC35  F003         	call	___ftmul	;wreg free
  1581  000504  C01E  F02D         	movff	?___ftmul,___fttol@f1
  1582  000508  C01F  F02E         	movff	?___ftmul+1,___fttol@f1+1
  1583  00050C  C020  F02F         	movff	?___ftmul+2,___fttol@f1+2
  1584  000510  ECBB  F002         	call	___fttol	;wreg free
  1585  000514  C02D  F066         	movff	?___fttol,setMotores@dutyD
  1586  000518  C02E  F067         	movff	?___fttol+1,setMotores@dutyD+1
  1587                           
  1588                           ;main.c: 287: CCPR1L = dutyI / 4;
  1589  00051C  C064  F040         	movff	setMotores@dutyI,??_setMotores
  1590  000520  C065  F041         	movff	setMotores@dutyI+1,??_setMotores+1
  1591  000524  90D8               	bcf	status,0,c
  1592  000526  3241               	rrcf	??_setMotores+1,f,c
  1593  000528  3240               	rrcf	??_setMotores,f,c
  1594  00052A  90D8               	bcf	status,0,c
  1595  00052C  3241               	rrcf	??_setMotores+1,f,c
  1596  00052E  3240               	rrcf	??_setMotores,f,c
  1597  000530  5040               	movf	??_setMotores,w,c
  1598  000532  6EBE               	movwf	4030,c	;volatile
  1599                           
  1600                           ;main.c: 288: CCPR2L = dutyD / 4;
  1601  000534  C066  F040         	movff	setMotores@dutyD,??_setMotores
  1602  000538  C067  F041         	movff	setMotores@dutyD+1,??_setMotores+1
  1603  00053C  90D8               	bcf	status,0,c
  1604  00053E  3241               	rrcf	??_setMotores+1,f,c
  1605  000540  3240               	rrcf	??_setMotores,f,c
  1606  000542  90D8               	bcf	status,0,c
  1607  000544  3241               	rrcf	??_setMotores+1,f,c
  1608  000546  3240               	rrcf	??_setMotores,f,c
  1609  000548  5040               	movf	??_setMotores,w,c
  1610  00054A  6EBB               	movwf	4027,c	;volatile
  1611                           
  1612                           ;main.c: 289: CCP1CONbits.DC1B = dutyI % 4;
  1613  00054C  C064  F040         	movff	setMotores@dutyI,??_setMotores
  1614  000550  0E03               	movlw	3
  1615  000552  1640               	andwf	??_setMotores,f,c
  1616  000554  3A40               	swapf	??_setMotores,f,c
  1617  000556  50BD               	movf	4029,w,c	;volatile
  1618  000558  1840               	xorwf	??_setMotores,w,c
  1619  00055A  0BCF               	andlw	-49
  1620  00055C  1840               	xorwf	??_setMotores,w,c
  1621  00055E  6EBD               	movwf	4029,c	;volatile
  1622                           
  1623                           ;main.c: 290: CCP2CONbits.DC2B = dutyD % 4;
  1624  000560  C066  F040         	movff	setMotores@dutyD,??_setMotores
  1625  000564  0E03               	movlw	3
  1626  000566  1640               	andwf	??_setMotores,f,c
  1627  000568  3A40               	swapf	??_setMotores,f,c
  1628  00056A  50BA               	movf	4026,w,c	;volatile
  1629  00056C  1840               	xorwf	??_setMotores,w,c
  1630  00056E  0BCF               	andlw	-49
  1631  000570  1840               	xorwf	??_setMotores,w,c
  1632  000572  6EBA               	movwf	4026,c	;volatile
  1633  000574  0012               	return		;funcret
  1634  000576                     __end_of_setMotores:
  1635                           	opt stack 0
  1636                           tblptru	equ	0xFF8
  1637                           tblptrh	equ	0xFF7
  1638                           tblptrl	equ	0xFF6
  1639                           tablat	equ	0xFF5
  1640                           intcon	equ	0xFF2
  1641                           intcon3	equ	0xFF0
  1642                           postinc0	equ	0xFEE
  1643                           wreg	equ	0xFE8
  1644                           status	equ	0xFD8
  1645                           
  1646 ;; *************** function ___lwtoft *****************
  1647 ;; Defined at:
  1648 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  1649 ;; Parameters:    Size  Location     Type
  1650 ;;  c               2   26[COMRAM] unsigned int 
  1651 ;; Auto vars:     Size  Location     Type
  1652 ;;		None
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  3   26[COMRAM] float 
  1655 ;; Registers used:
  1656 ;;		wreg, status,2, status,0, cstack
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1662 ;;      Params:         3       0       0       0       0       0       0       0       0
  1663 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1664 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1665 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1666 ;;Total ram usage:        3 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; Hardware stack levels required when called:    2
  1669 ;; This function calls:
  1670 ;;		___ftpack
  1671 ;; This function is called by:
  1672 ;;		_setMotores
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           	psect	text5
  1677  000978                     __ptext5:
  1678                           	opt stack 0
  1679  000978                     ___lwtoft:
  1680                           	opt stack 26
  1681                           
  1682                           ;incstack = 0
  1683  000978  C01B  F013         	movff	___lwtoft@c,___ftpack@arg
  1684  00097C  C01C  F014         	movff	___lwtoft@c+1,___ftpack@arg+1
  1685  000980  6A15               	clrf	___ftpack@arg+2,c
  1686  000982  0E8E               	movlw	142
  1687  000984  6E16               	movwf	___ftpack@exp,c
  1688  000986  0E00               	movlw	0
  1689  000988  6E17               	movwf	___ftpack@sign,c
  1690  00098A  ECAF  F003         	call	___ftpack	;wreg free
  1691  00098E  C013  F01B         	movff	?___ftpack,?___lwtoft
  1692  000992  C014  F01C         	movff	?___ftpack+1,?___lwtoft+1
  1693  000996  C015  F01D         	movff	?___ftpack+2,?___lwtoft+2
  1694  00099A  0012               	return	
  1695  00099C                     __end_of___lwtoft:
  1696                           	opt stack 0
  1697                           tblptru	equ	0xFF8
  1698                           tblptrh	equ	0xFF7
  1699                           tblptrl	equ	0xFF6
  1700                           tablat	equ	0xFF5
  1701                           intcon	equ	0xFF2
  1702                           intcon3	equ	0xFF0
  1703                           postinc0	equ	0xFEE
  1704                           wreg	equ	0xFE8
  1705                           status	equ	0xFD8
  1706                           
  1707 ;; *************** function ___fttol *****************
  1708 ;; Defined at:
  1709 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  1710 ;; Parameters:    Size  Location     Type
  1711 ;;  f1              3   44[COMRAM] float 
  1712 ;; Auto vars:     Size  Location     Type
  1713 ;;  lval            4   54[COMRAM] unsigned long 
  1714 ;;  exp1            1   58[COMRAM] unsigned char 
  1715 ;;  sign1           1   53[COMRAM] unsigned char 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  4   44[COMRAM] long 
  1718 ;; Registers used:
  1719 ;;		wreg, status,2, status,0
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1725 ;;      Params:         4       0       0       0       0       0       0       0       0
  1726 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1727 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1728 ;;      Totals:        15       0       0       0       0       0       0       0       0
  1729 ;;Total ram usage:       15 bytes
  1730 ;; Hardware stack levels used:    1
  1731 ;; Hardware stack levels required when called:    1
  1732 ;; This function calls:
  1733 ;;		Nothing
  1734 ;; This function is called by:
  1735 ;;		_setMotores
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text6
  1740  000576                     __ptext6:
  1741                           	opt stack 0
  1742  000576                     ___fttol:
  1743                           	opt stack 27
  1744                           
  1745                           ;incstack = 0
  1746  000576  C02F  F031         	movff	___fttol@f1+2,??___fttol
  1747  00057A  6A32               	clrf	(??___fttol+1)& (0+255),c
  1748  00057C  6A33               	clrf	(??___fttol+2)& (0+255),c
  1749  00057E  342E               	rlcf	___fttol@f1+1,w,c
  1750  000580  3631               	rlcf	??___fttol& (0+255),f,c
  1751  000582  E301               	bnc	u1221
  1752  000584  8032               	bsf	(??___fttol+1)& (0+255),0,c
  1753  000586                     u1221:
  1754  000586  5031               	movf	??___fttol,w,c
  1755  000588  6E3B               	movwf	___fttol@exp1,c
  1756  00058A  503B               	movf	___fttol@exp1,w,c
  1757  00058C  A4D8               	btfss	status,2,c
  1758  00058E  D009               	goto	l465
  1759  000590  0E00               	movlw	0
  1760  000592  6E2D               	movwf	?___fttol,c
  1761  000594  0E00               	movlw	0
  1762  000596  6E2E               	movwf	?___fttol+1,c
  1763  000598  0E00               	movlw	0
  1764  00059A  6E2F               	movwf	?___fttol+2,c
  1765  00059C  0E00               	movlw	0
  1766  00059E  6E30               	movwf	?___fttol+3,c
  1767  0005A0  0012               	return	
  1768  0005A2                     l465:
  1769  0005A2  0E17               	movlw	23
  1770  0005A4  6E31               	movwf	??___fttol& (0+255),c
  1771  0005A6  C02D  F032         	movff	___fttol@f1,??___fttol+1
  1772  0005AA  C02E  F033         	movff	___fttol@f1+1,??___fttol+2
  1773  0005AE  C02F  F034         	movff	___fttol@f1+2,??___fttol+3
  1774  0005B2  2831               	incf	??___fttol,w,c
  1775  0005B4  6E35               	movwf	(??___fttol+4)& (0+255),c
  1776  0005B6  D004               	goto	u1240
  1777  0005B8                     u1245:
  1778  0005B8  90D8               	bcf	status,0,c
  1779  0005BA  3234               	rrcf	??___fttol+3,f,c
  1780  0005BC  3233               	rrcf	??___fttol+2,f,c
  1781  0005BE  3232               	rrcf	??___fttol+1,f,c
  1782  0005C0                     u1240:
  1783  0005C0  2E35               	decfsz	(??___fttol+4)& (0+255),f,c
  1784  0005C2  D7FA               	goto	u1245
  1785  0005C4  5032               	movf	??___fttol+1,w,c
  1786  0005C6  6E36               	movwf	___fttol@sign1,c
  1787  0005C8  8E2E               	bsf	___fttol@f1+1,7,c
  1788  0005CA  0EFF               	movlw	255
  1789  0005CC  162D               	andwf	___fttol@f1,f,c
  1790  0005CE  0EFF               	movlw	255
  1791  0005D0  162E               	andwf	___fttol@f1+1,f,c
  1792  0005D2  0E00               	movlw	0
  1793  0005D4  162F               	andwf	___fttol@f1+2,f,c
  1794  0005D6  502D               	movf	___fttol@f1,w,c
  1795  0005D8  6E37               	movwf	___fttol@lval,c
  1796  0005DA  502E               	movf	___fttol@f1+1,w,c
  1797  0005DC  6E38               	movwf	___fttol@lval+1,c
  1798  0005DE  502F               	movf	___fttol@f1+2,w,c
  1799  0005E0  6E39               	movwf	___fttol@lval+2,c
  1800  0005E2  6A3A               	clrf	___fttol@lval+3,c
  1801  0005E4  0E8E               	movlw	142
  1802  0005E6  5E3B               	subwf	___fttol@exp1,f,c
  1803  0005E8  AE3B               	btfss	___fttol@exp1,7,c
  1804  0005EA  D016               	goto	l467
  1805  0005EC  503B               	movf	___fttol@exp1,w,c
  1806  0005EE  0A80               	xorlw	128
  1807  0005F0  0F8F               	addlw	143
  1808  0005F2  B0D8               	btfsc	status,0,c
  1809  0005F4  D009               	goto	l468
  1810  0005F6  0E00               	movlw	0
  1811  0005F8  6E2D               	movwf	?___fttol,c
  1812  0005FA  0E00               	movlw	0
  1813  0005FC  6E2E               	movwf	?___fttol+1,c
  1814  0005FE  0E00               	movlw	0
  1815  000600  6E2F               	movwf	?___fttol+2,c
  1816  000602  0E00               	movlw	0
  1817  000604  6E30               	movwf	?___fttol+3,c
  1818  000606  0012               	return	
  1819  000608                     l468:
  1820  000608  90D8               	bcf	status,0,c
  1821  00060A  323A               	rrcf	___fttol@lval+3,f,c
  1822  00060C  3239               	rrcf	___fttol@lval+2,f,c
  1823  00060E  3238               	rrcf	___fttol@lval+1,f,c
  1824  000610  3237               	rrcf	___fttol@lval,f,c
  1825  000612  3E3B               	incfsz	___fttol@exp1,f,c
  1826  000614  D7F9               	goto	l468
  1827  000616  D015               	goto	u1280
  1828  000618                     l467:
  1829  000618  0E17               	movlw	23
  1830  00061A  643B               	cpfsgt	___fttol@exp1,c
  1831  00061C  D00F               	goto	l473
  1832  00061E  0E00               	movlw	0
  1833  000620  6E2D               	movwf	?___fttol,c
  1834  000622  0E00               	movlw	0
  1835  000624  6E2E               	movwf	?___fttol+1,c
  1836  000626  0E00               	movlw	0
  1837  000628  6E2F               	movwf	?___fttol+2,c
  1838  00062A  0E00               	movlw	0
  1839  00062C  6E30               	movwf	?___fttol+3,c
  1840  00062E  0012               	return	
  1841  000630  90D8               	bcf	status,0,c
  1842  000632  3637               	rlcf	___fttol@lval,f,c
  1843  000634  3638               	rlcf	___fttol@lval+1,f,c
  1844  000636  3639               	rlcf	___fttol@lval+2,f,c
  1845  000638  363A               	rlcf	___fttol@lval+3,f,c
  1846  00063A  063B               	decf	___fttol@exp1,f,c
  1847  00063C                     l473:
  1848  00063C  503B               	movf	___fttol@exp1,w,c
  1849  00063E  A4D8               	btfss	status,2,c
  1850  000640  D7F7               	goto	l474
  1851  000642                     u1280:
  1852  000642  5036               	movf	___fttol@sign1,w,c
  1853  000644  B4D8               	btfsc	status,2,c
  1854  000646  D008               	goto	l476
  1855  000648  1E3A               	comf	___fttol@lval+3,f,c
  1856  00064A  1E39               	comf	___fttol@lval+2,f,c
  1857  00064C  1E38               	comf	___fttol@lval+1,f,c
  1858  00064E  6C37               	negf	___fttol@lval,c
  1859  000650  0E00               	movlw	0
  1860  000652  2238               	addwfc	___fttol@lval+1,f,c
  1861  000654  2239               	addwfc	___fttol@lval+2,f,c
  1862  000656  223A               	addwfc	___fttol@lval+3,f,c
  1863  000658                     l476:
  1864  000658  C037  F02D         	movff	___fttol@lval,?___fttol
  1865  00065C  C038  F02E         	movff	___fttol@lval+1,?___fttol+1
  1866  000660  C039  F02F         	movff	___fttol@lval+2,?___fttol+2
  1867  000664  C03A  F030         	movff	___fttol@lval+3,?___fttol+3
  1868  000668  0012               	return	
  1869  00066A                     __end_of___fttol:
  1870                           	opt stack 0
  1871                           tblptru	equ	0xFF8
  1872                           tblptrh	equ	0xFF7
  1873                           tblptrl	equ	0xFF6
  1874                           tablat	equ	0xFF5
  1875                           intcon	equ	0xFF2
  1876                           intcon3	equ	0xFF0
  1877                           postinc0	equ	0xFEE
  1878                           wreg	equ	0xFE8
  1879                           status	equ	0xFD8
  1880                           
  1881 ;; *************** function ___ftmul *****************
  1882 ;; Defined at:
  1883 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;  f1              3   29[COMRAM] float 
  1886 ;;  f2              3   32[COMRAM] float 
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;  f3_as_produc    3   39[COMRAM] unsigned um
  1889 ;;  sign            1   43[COMRAM] unsigned char 
  1890 ;;  cntr            1   42[COMRAM] unsigned char 
  1891 ;;  exp             1   38[COMRAM] unsigned char 
  1892 ;; Return value:  Size  Location     Type
  1893 ;;                  3   29[COMRAM] float 
  1894 ;; Registers used:
  1895 ;;		wreg, status,2, status,0, cstack
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1901 ;;      Params:         6       0       0       0       0       0       0       0       0
  1902 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1903 ;;      Temps:          3       0       0       0       0       0       0       0       0
  1904 ;;      Totals:        15       0       0       0       0       0       0       0       0
  1905 ;;Total ram usage:       15 bytes
  1906 ;; Hardware stack levels used:    1
  1907 ;; Hardware stack levels required when called:    2
  1908 ;; This function calls:
  1909 ;;		___ftpack
  1910 ;; This function is called by:
  1911 ;;		_setMotores
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           	psect	text7
  1916  00066A                     __ptext7:
  1917                           	opt stack 0
  1918  00066A                     ___ftmul:
  1919                           	opt stack 26
  1920                           
  1921                           ;incstack = 0
  1922  00066A  C020  F024         	movff	___ftmul@f1+2,??___ftmul
  1923  00066E  6A25               	clrf	(??___ftmul+1)& (0+255),c
  1924  000670  6A26               	clrf	(??___ftmul+2)& (0+255),c
  1925  000672  341F               	rlcf	___ftmul@f1+1,w,c
  1926  000674  3624               	rlcf	??___ftmul& (0+255),f,c
  1927  000676  E301               	bnc	u1161
  1928  000678  8025               	bsf	(??___ftmul+1)& (0+255),0,c
  1929  00067A                     u1161:
  1930  00067A  5024               	movf	??___ftmul,w,c
  1931  00067C  6E27               	movwf	___ftmul@exp,c
  1932  00067E  5027               	movf	___ftmul@exp,w,c
  1933  000680  A4D8               	btfss	status,2,c
  1934  000682  D007               	goto	l444
  1935  000684  0E00               	movlw	0
  1936  000686  6E1E               	movwf	?___ftmul,c
  1937  000688  0E00               	movlw	0
  1938  00068A  6E1F               	movwf	?___ftmul+1,c
  1939  00068C  0E00               	movlw	0
  1940  00068E  6E20               	movwf	?___ftmul+2,c
  1941  000690  0012               	return	
  1942  000692                     l444:
  1943  000692  C023  F024         	movff	___ftmul@f2+2,??___ftmul
  1944  000696  6A25               	clrf	(??___ftmul+1)& (0+255),c
  1945  000698  6A26               	clrf	(??___ftmul+2)& (0+255),c
  1946  00069A  3422               	rlcf	___ftmul@f2+1,w,c
  1947  00069C  3624               	rlcf	??___ftmul& (0+255),f,c
  1948  00069E  E301               	bnc	u1181
  1949  0006A0  8025               	bsf	(??___ftmul+1)& (0+255),0,c
  1950  0006A2                     u1181:
  1951  0006A2  5024               	movf	??___ftmul,w,c
  1952  0006A4  6E2C               	movwf	___ftmul@sign,c
  1953  0006A6  502C               	movf	___ftmul@sign,w,c
  1954  0006A8  A4D8               	btfss	status,2,c
  1955  0006AA  D007               	goto	l446
  1956  0006AC  0E00               	movlw	0
  1957  0006AE  6E1E               	movwf	?___ftmul,c
  1958  0006B0  0E00               	movlw	0
  1959  0006B2  6E1F               	movwf	?___ftmul+1,c
  1960  0006B4  0E00               	movlw	0
  1961  0006B6  6E20               	movwf	?___ftmul+2,c
  1962  0006B8  0012               	return	
  1963  0006BA                     l446:
  1964  0006BA  502C               	movf	___ftmul@sign,w,c
  1965  0006BC  0F7B               	addlw	123
  1966  0006BE  2627               	addwf	___ftmul@exp,f,c
  1967  0006C0  C020  F02C         	movff	___ftmul@f1+2,___ftmul@sign
  1968  0006C4  5023               	movf	___ftmul@f2+2,w,c
  1969  0006C6  1A2C               	xorwf	___ftmul@sign,f,c
  1970  0006C8  0E80               	movlw	128
  1971  0006CA  162C               	andwf	___ftmul@sign,f,c
  1972  0006CC  8E1F               	bsf	___ftmul@f1+1,7,c
  1973  0006CE  8E22               	bsf	___ftmul@f2+1,7,c
  1974  0006D0  0EFF               	movlw	255
  1975  0006D2  1621               	andwf	___ftmul@f2,f,c
  1976  0006D4  0EFF               	movlw	255
  1977  0006D6  1622               	andwf	___ftmul@f2+1,f,c
  1978  0006D8  0E00               	movlw	0
  1979  0006DA  1623               	andwf	___ftmul@f2+2,f,c
  1980  0006DC  0E00               	movlw	0
  1981  0006DE  6E28               	movwf	___ftmul@f3_as_product,c
  1982  0006E0  0E00               	movlw	0
  1983  0006E2  6E29               	movwf	___ftmul@f3_as_product+1,c
  1984  0006E4  0E00               	movlw	0
  1985  0006E6  6E2A               	movwf	___ftmul@f3_as_product+2,c
  1986  0006E8  0E07               	movlw	7
  1987  0006EA  6E2B               	movwf	___ftmul@cntr,c
  1988  0006EC  A01E               	btfss	___ftmul@f1,0,c
  1989  0006EE  D006               	goto	l448
  1990  0006F0  5021               	movf	___ftmul@f2,w,c
  1991  0006F2  2628               	addwf	___ftmul@f3_as_product,f,c
  1992  0006F4  5022               	movf	___ftmul@f2+1,w,c
  1993  0006F6  2229               	addwfc	___ftmul@f3_as_product+1,f,c
  1994  0006F8  5023               	movf	___ftmul@f2+2,w,c
  1995  0006FA  222A               	addwfc	___ftmul@f3_as_product+2,f,c
  1996  0006FC                     l448:
  1997  0006FC  90D8               	bcf	status,0,c
  1998  0006FE  3220               	rrcf	___ftmul@f1+2,f,c
  1999  000700  321F               	rrcf	___ftmul@f1+1,f,c
  2000  000702  321E               	rrcf	___ftmul@f1,f,c
  2001  000704  90D8               	bcf	status,0,c
  2002  000706  3621               	rlcf	___ftmul@f2,f,c
  2003  000708  3622               	rlcf	___ftmul@f2+1,f,c
  2004  00070A  3623               	rlcf	___ftmul@f2+2,f,c
  2005  00070C  2E2B               	decfsz	___ftmul@cntr,f,c
  2006  00070E  D7EE               	goto	l447
  2007  000710  0E09               	movlw	9
  2008  000712  6E2B               	movwf	___ftmul@cntr,c
  2009  000714  A01E               	btfss	___ftmul@f1,0,c
  2010  000716  D006               	goto	l451
  2011  000718  5021               	movf	___ftmul@f2,w,c
  2012  00071A  2628               	addwf	___ftmul@f3_as_product,f,c
  2013  00071C  5022               	movf	___ftmul@f2+1,w,c
  2014  00071E  2229               	addwfc	___ftmul@f3_as_product+1,f,c
  2015  000720  5023               	movf	___ftmul@f2+2,w,c
  2016  000722  222A               	addwfc	___ftmul@f3_as_product+2,f,c
  2017  000724                     l451:
  2018  000724  90D8               	bcf	status,0,c
  2019  000726  3220               	rrcf	___ftmul@f1+2,f,c
  2020  000728  321F               	rrcf	___ftmul@f1+1,f,c
  2021  00072A  321E               	rrcf	___ftmul@f1,f,c
  2022  00072C  90D8               	bcf	status,0,c
  2023  00072E  322A               	rrcf	___ftmul@f3_as_product+2,f,c
  2024  000730  3229               	rrcf	___ftmul@f3_as_product+1,f,c
  2025  000732  3228               	rrcf	___ftmul@f3_as_product,f,c
  2026  000734  2E2B               	decfsz	___ftmul@cntr,f,c
  2027  000736  D7EE               	goto	l450
  2028  000738  C028  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  2029  00073C  C029  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2030  000740  C02A  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2031  000744  C027  F016         	movff	___ftmul@exp,___ftpack@exp
  2032  000748  C02C  F017         	movff	___ftmul@sign,___ftpack@sign
  2033  00074C  ECAF  F003         	call	___ftpack	;wreg free
  2034  000750  C013  F01E         	movff	?___ftpack,?___ftmul
  2035  000754  C014  F01F         	movff	?___ftpack+1,?___ftmul+1
  2036  000758  C015  F020         	movff	?___ftpack+2,?___ftmul+2
  2037  00075C  0012               	return	
  2038  00075E                     __end_of___ftmul:
  2039                           	opt stack 0
  2040                           tblptru	equ	0xFF8
  2041                           tblptrh	equ	0xFF7
  2042                           tblptrl	equ	0xFF6
  2043                           tablat	equ	0xFF5
  2044                           intcon	equ	0xFF2
  2045                           intcon3	equ	0xFF0
  2046                           postinc0	equ	0xFEE
  2047                           wreg	equ	0xFE8
  2048                           status	equ	0xFD8
  2049                           
  2050 ;; *************** function ___ftpack *****************
  2051 ;; Defined at:
  2052 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;  arg             3   18[COMRAM] unsigned um
  2055 ;;  exp             1   21[COMRAM] unsigned char 
  2056 ;;  sign            1   22[COMRAM] unsigned char 
  2057 ;; Auto vars:     Size  Location     Type
  2058 ;;		None
  2059 ;; Return value:  Size  Location     Type
  2060 ;;                  3   18[COMRAM] float 
  2061 ;; Registers used:
  2062 ;;		wreg, status,2, status,0
  2063 ;; Tracked objects:
  2064 ;;		On entry : 0/0
  2065 ;;		On exit  : 0/0
  2066 ;;		Unchanged: 0/0
  2067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2068 ;;      Params:         5       0       0       0       0       0       0       0       0
  2069 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2070 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2071 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2072 ;;Total ram usage:        8 bytes
  2073 ;; Hardware stack levels used:    1
  2074 ;; Hardware stack levels required when called:    1
  2075 ;; This function calls:
  2076 ;;		Nothing
  2077 ;; This function is called by:
  2078 ;;		___ftmul
  2079 ;;		___lwtoft
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           	psect	text8
  2084  00075E                     __ptext8:
  2085                           	opt stack 0
  2086  00075E                     ___ftpack:
  2087                           	opt stack 26
  2088                           
  2089                           ;incstack = 0
  2090  00075E  5016               	movf	___ftpack@exp,w,c
  2091  000760  B4D8               	btfsc	status,2,c
  2092  000762  D005               	goto	u1090
  2093  000764  5013               	movf	___ftpack@arg,w,c
  2094  000766  1014               	iorwf	___ftpack@arg+1,w,c
  2095  000768  1015               	iorwf	___ftpack@arg+2,w,c
  2096  00076A  A4D8               	btfss	status,2,c
  2097  00076C  D00C               	goto	l365
  2098  00076E                     u1090:
  2099  00076E  0E00               	movlw	0
  2100  000770  6E13               	movwf	?___ftpack,c
  2101  000772  0E00               	movlw	0
  2102  000774  6E14               	movwf	?___ftpack+1,c
  2103  000776  0E00               	movlw	0
  2104  000778  6E15               	movwf	?___ftpack+2,c
  2105  00077A  0012               	return	
  2106  00077C  2A16               	incf	___ftpack@exp,f,c
  2107  00077E  90D8               	bcf	status,0,c
  2108  000780  3215               	rrcf	___ftpack@arg+2,f,c
  2109  000782  3214               	rrcf	___ftpack@arg+1,f,c
  2110  000784  3213               	rrcf	___ftpack@arg,f,c
  2111  000786                     l365:
  2112  000786  0E00               	movlw	0
  2113  000788  1413               	andwf	___ftpack@arg,w,c
  2114  00078A  6E18               	movwf	??___ftpack& (0+255),c
  2115  00078C  0E00               	movlw	0
  2116  00078E  1414               	andwf	___ftpack@arg+1,w,c
  2117  000790  6E19               	movwf	(??___ftpack+1)& (0+255),c
  2118  000792  0EFE               	movlw	254
  2119  000794  1415               	andwf	___ftpack@arg+2,w,c
  2120  000796  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  2121  000798  5018               	movf	??___ftpack,w,c
  2122  00079A  1019               	iorwf	??___ftpack+1,w,c
  2123  00079C  101A               	iorwf	??___ftpack+2,w,c
  2124  00079E  B4D8               	btfsc	status,2,c
  2125  0007A0  D00C               	goto	l368
  2126  0007A2  D7EC               	goto	l366
  2127  0007A4  2A16               	incf	___ftpack@exp,f,c
  2128  0007A6  0E01               	movlw	1
  2129  0007A8  2613               	addwf	___ftpack@arg,f,c
  2130  0007AA  0E00               	movlw	0
  2131  0007AC  2214               	addwfc	___ftpack@arg+1,f,c
  2132  0007AE  0E00               	movlw	0
  2133  0007B0  2215               	addwfc	___ftpack@arg+2,f,c
  2134  0007B2  90D8               	bcf	status,0,c
  2135  0007B4  3215               	rrcf	___ftpack@arg+2,f,c
  2136  0007B6  3214               	rrcf	___ftpack@arg+1,f,c
  2137  0007B8  3213               	rrcf	___ftpack@arg,f,c
  2138  0007BA                     l368:
  2139  0007BA  0E00               	movlw	0
  2140  0007BC  1413               	andwf	___ftpack@arg,w,c
  2141  0007BE  6E18               	movwf	??___ftpack& (0+255),c
  2142  0007C0  0E00               	movlw	0
  2143  0007C2  1414               	andwf	___ftpack@arg+1,w,c
  2144  0007C4  6E19               	movwf	(??___ftpack+1)& (0+255),c
  2145  0007C6  0EFF               	movlw	255
  2146  0007C8  1415               	andwf	___ftpack@arg+2,w,c
  2147  0007CA  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  2148  0007CC  5018               	movf	??___ftpack,w,c
  2149  0007CE  1019               	iorwf	??___ftpack+1,w,c
  2150  0007D0  101A               	iorwf	??___ftpack+2,w,c
  2151  0007D2  B4D8               	btfsc	status,2,c
  2152  0007D4  D006               	goto	l371
  2153  0007D6  D7E6               	goto	l369
  2154  0007D8  0616               	decf	___ftpack@exp,f,c
  2155  0007DA  90D8               	bcf	status,0,c
  2156  0007DC  3613               	rlcf	___ftpack@arg,f,c
  2157  0007DE  3614               	rlcf	___ftpack@arg+1,f,c
  2158  0007E0  3615               	rlcf	___ftpack@arg+2,f,c
  2159  0007E2                     l371:
  2160  0007E2  BE14               	btfsc	___ftpack@arg+1,7,c
  2161  0007E4  D003               	goto	u1130
  2162  0007E6  0E02               	movlw	2
  2163  0007E8  6016               	cpfslt	___ftpack@exp,c
  2164  0007EA  D7F6               	goto	l372
  2165  0007EC                     u1130:
  2166  0007EC  A016               	btfss	___ftpack@exp,0,c
  2167  0007EE  9E14               	bcf	___ftpack@arg+1,7,c
  2168  0007F0  90D8               	bcf	status,0,c
  2169  0007F2  3216               	rrcf	___ftpack@exp,f,c
  2170  0007F4  5016               	movf	___ftpack@exp,w,c
  2171  0007F6  1215               	iorwf	___ftpack@arg+2,f,c
  2172  0007F8  5017               	movf	___ftpack@sign,w,c
  2173  0007FA  A4D8               	btfss	status,2,c
  2174  0007FC  8E15               	bsf	___ftpack@arg+2,7,c
  2175  0007FE  C013  F013         	movff	___ftpack@arg,?___ftpack
  2176  000802  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  2177  000806  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  2178  00080A  0012               	return	
  2179  00080C                     __end_of___ftpack:
  2180                           	opt stack 0
  2181                           tblptru	equ	0xFF8
  2182                           tblptrh	equ	0xFF7
  2183                           tblptrl	equ	0xFF6
  2184                           tablat	equ	0xFF5
  2185                           intcon	equ	0xFF2
  2186                           intcon3	equ	0xFF0
  2187                           postinc0	equ	0xFEE
  2188                           wreg	equ	0xFE8
  2189                           status	equ	0xFD8
  2190                           
  2191 ;; *************** function _ISR *****************
  2192 ;; Defined at:
  2193 ;;		line 299 in file "main.c"
  2194 ;; Parameters:    Size  Location     Type
  2195 ;;		None
  2196 ;; Auto vars:     Size  Location     Type
  2197 ;;		None
  2198 ;; Return value:  Size  Location     Type
  2199 ;;                  1    wreg      void 
  2200 ;; Registers used:
  2201 ;;		wreg, status,2, status,0
  2202 ;; Tracked objects:
  2203 ;;		On entry : 0/0
  2204 ;;		On exit  : 0/0
  2205 ;;		Unchanged: 0/0
  2206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2207 ;;      Params:         0       0       0       0       0       0       0       0       0
  2208 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2209 ;;      Temps:         18       0       0       0       0       0       0       0       0
  2210 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2211 ;;Total ram usage:       18 bytes
  2212 ;; Hardware stack levels used:    1
  2213 ;; This function calls:
  2214 ;;		Nothing
  2215 ;; This function is called by:
  2216 ;;		Interrupt level 2
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           	psect	intcode
  2221  000008                     __pintcode:
  2222                           	opt stack 0
  2223  000008                     _ISR:
  2224                           	opt stack 26
  2225                           
  2226                           ;incstack = 0
  2227  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2228  00000A  ED06  F004         	call	int_func,f	;refresh shadow registers
  2229                           tblptru	equ	0xFF8
  2230                           tblptrh	equ	0xFF7
  2231                           tblptrl	equ	0xFF6
  2232                           tablat	equ	0xFF5
  2233                           intcon	equ	0xFF2
  2234                           intcon3	equ	0xFF0
  2235                           postinc0	equ	0xFEE
  2236                           wreg	equ	0xFE8
  2237                           status	equ	0xFD8
  2238                           
  2239                           	psect	intcode_body
  2240  00080C                     __pintcode_body:
  2241                           	opt stack 26
  2242  00080C                     int_func:
  2243                           	opt stack 26
  2244  00080C  0006               	pop		; remove dummy address from shadow register refresh
  2245  00080E  CFFA F001          	movff	pclath,??_ISR
  2246  000812  CFFB F002          	movff	pclatu,??_ISR+1
  2247  000816  CFE9 F003          	movff	fsr0l,??_ISR+2
  2248  00081A  CFEA F004          	movff	fsr0h,??_ISR+3
  2249  00081E  CFE1 F005          	movff	fsr1l,??_ISR+4
  2250  000822  CFE2 F006          	movff	fsr1h,??_ISR+5
  2251  000826  CFD9 F007          	movff	fsr2l,??_ISR+6
  2252  00082A  CFDA F008          	movff	fsr2h,??_ISR+7
  2253  00082E  CFF3 F009          	movff	prodl,??_ISR+8
  2254  000832  CFF4 F00A          	movff	prodh,??_ISR+9
  2255  000836  CFF6 F00B          	movff	tblptrl,??_ISR+10
  2256  00083A  CFF7 F00C          	movff	tblptrh,??_ISR+11
  2257  00083E  CFF8 F00D          	movff	tblptru,??_ISR+12
  2258  000842  CFF5 F00E          	movff	tablat,??_ISR+13
  2259  000846  C04C  F00F         	movff	btemp,??_ISR+14
  2260  00084A  C04D  F010         	movff	btemp+1,??_ISR+15
  2261  00084E  C04E  F011         	movff	btemp+2,??_ISR+16
  2262  000852  C04F  F012         	movff	btemp+3,??_ISR+17
  2263                           
  2264                           ;main.c: 300: if(!TMR2IF) return;
  2265  000856  A29E               	btfss	3998,1,c	;volatile
  2266  000858  D007               	goto	i2l142
  2267                           
  2268                           ;main.c: 301: TMR2IF = 0;
  2269  00085A  929E               	bcf	3998,1,c	;volatile
  2270                           
  2271                           ;main.c: 302: millisCounter++;
  2272  00085C  0E01               	movlw	1
  2273  00085E  2642               	addwf	_millisCounter,f,c
  2274  000860  0E00               	movlw	0
  2275  000862  2243               	addwfc	_millisCounter+1,f,c
  2276  000864  2244               	addwfc	_millisCounter+2,f,c
  2277  000866  2245               	addwfc	_millisCounter+3,f,c
  2278  000868                     i2l142:
  2279  000868  C012  F04F         	movff	??_ISR+17,btemp+3
  2280  00086C  C011  F04E         	movff	??_ISR+16,btemp+2
  2281  000870  C010  F04D         	movff	??_ISR+15,btemp+1
  2282  000874  C00F  F04C         	movff	??_ISR+14,btemp
  2283  000878  C00E  FFF5         	movff	??_ISR+13,tablat
  2284  00087C  C00D  FFF8         	movff	??_ISR+12,tblptru
  2285  000880  C00C  FFF7         	movff	??_ISR+11,tblptrh
  2286  000884  C00B  FFF6         	movff	??_ISR+10,tblptrl
  2287  000888  C00A  FFF4         	movff	??_ISR+9,prodh
  2288  00088C  C009  FFF3         	movff	??_ISR+8,prodl
  2289  000890  C008  FFDA         	movff	??_ISR+7,fsr2h
  2290  000894  C007  FFD9         	movff	??_ISR+6,fsr2l
  2291  000898  C006  FFE2         	movff	??_ISR+5,fsr1h
  2292  00089C  C005  FFE1         	movff	??_ISR+4,fsr1l
  2293  0008A0  C004  FFEA         	movff	??_ISR+3,fsr0h
  2294  0008A4  C003  FFE9         	movff	??_ISR+2,fsr0l
  2295  0008A8  C002  FFFB         	movff	??_ISR+1,pclatu
  2296  0008AC  C001  FFFA         	movff	??_ISR,pclath
  2297  0008B0  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2298  0008B2  0011               	retfie		f
  2299  0008B4                     __end_of_ISR:
  2300                           	opt stack 0
  2301  0000                     pclatu	equ	0xFFB
  2302                           pclath	equ	0xFFA
  2303                           tblptru	equ	0xFF8
  2304                           tblptrh	equ	0xFF7
  2305                           tblptrl	equ	0xFF6
  2306                           tablat	equ	0xFF5
  2307                           prodh	equ	0xFF4
  2308                           prodl	equ	0xFF3
  2309                           intcon	equ	0xFF2
  2310                           intcon3	equ	0xFF0
  2311                           postinc0	equ	0xFEE
  2312                           fsr0h	equ	0xFEA
  2313                           fsr0l	equ	0xFE9
  2314                           wreg	equ	0xFE8
  2315                           fsr1h	equ	0xFE2
  2316                           fsr1l	equ	0xFE1
  2317                           fsr2h	equ	0xFDA
  2318                           fsr2l	equ	0xFD9
  2319                           status	equ	0xFD8
  2320                           pclatu	equ	0xFFB
  2321                           pclath	equ	0xFFA
  2322                           tblptru	equ	0xFF8
  2323                           tblptrh	equ	0xFF7
  2324                           tblptrl	equ	0xFF6
  2325                           tablat	equ	0xFF5
  2326                           prodh	equ	0xFF4
  2327                           prodl	equ	0xFF3
  2328                           intcon	equ	0xFF2
  2329                           intcon3	equ	0xFF0
  2330                           postinc0	equ	0xFEE
  2331                           fsr0h	equ	0xFEA
  2332                           fsr0l	equ	0xFE9
  2333                           wreg	equ	0xFE8
  2334                           fsr1h	equ	0xFE2
  2335                           fsr1l	equ	0xFE1
  2336                           fsr2h	equ	0xFDA
  2337                           fsr2l	equ	0xFD9
  2338                           status	equ	0xFD8
  2339                           
  2340                           	psect	rparam
  2341  0000                     pclatu	equ	0xFFB
  2342                           pclath	equ	0xFFA
  2343                           tblptru	equ	0xFF8
  2344                           tblptrh	equ	0xFF7
  2345                           tblptrl	equ	0xFF6
  2346                           tablat	equ	0xFF5
  2347                           prodh	equ	0xFF4
  2348                           prodl	equ	0xFF3
  2349                           intcon	equ	0xFF2
  2350                           intcon3	equ	0xFF0
  2351                           postinc0	equ	0xFEE
  2352                           fsr0h	equ	0xFEA
  2353                           fsr0l	equ	0xFE9
  2354                           wreg	equ	0xFE8
  2355                           fsr1h	equ	0xFE2
  2356                           fsr1l	equ	0xFE1
  2357                           fsr2h	equ	0xFDA
  2358                           fsr2l	equ	0xFD9
  2359                           status	equ	0xFD8
  2360                           
  2361                           	psect	temp
  2362  00004C                     btemp:
  2363                           	opt stack 0
  2364  00004C                     	ds	1
  2365  0000                     int$flags	set	btemp
  2366  0000                     wtemp6	set	btemp+1
  2367                           pclatu	equ	0xFFB
  2368                           pclath	equ	0xFFA
  2369                           tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           prodh	equ	0xFF4
  2374                           prodl	equ	0xFF3
  2375                           intcon	equ	0xFF2
  2376                           intcon3	equ	0xFF0
  2377                           postinc0	equ	0xFEE
  2378                           fsr0h	equ	0xFEA
  2379                           fsr0l	equ	0xFE9
  2380                           wreg	equ	0xFE8
  2381                           fsr1h	equ	0xFE2
  2382                           fsr1l	equ	0xFE1
  2383                           fsr2h	equ	0xFDA
  2384                           fsr2l	equ	0xFD9
  2385                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     65      75
    BANK0           160     13      13
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _loop->_setMotores
    _init->_setMotores
    _setMotores->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lwtoft

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_loop
    _loop->_setMotores
    _init->_setMotores

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   20788
                               _init
                               _loop
 ---------------------------------------------------------------------------------
 (1) _loop                                                 5     5      0   10394
                                              8 BANK0      5     5      0
                             _millis
                         _setMotores
 ---------------------------------------------------------------------------------
 (2) _millis                                               4     0      4       0
                                             18 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   10394
                         _setMotores
 ---------------------------------------------------------------------------------
 (2) _setMotores                                          14    10      4   10394
                                             59 COMRAM     6     2      4
                                              0 BANK0      8     8      0
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    2984
                                             26 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     551
                                             44 COMRAM    15    11      4
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3761
                                             29 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2773
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _setMotores
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
   _loop
     _millis
     _setMotores
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      D       D       5        8.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     41      4B       1       79.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      58      20        0.0%
DATA                 0      0      58       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon May 27 19:21:52 2019

                     l70 0042                       l71 003C                       l80 00B0  
                     l72 0020                       l81 00EE                       l66 034C  
                     l90 0222                       l82 0154                       l74 0070  
                     l91 0238                       l83 0176                       l75 006A  
                     l92 0256                       l76 004E                       l68 0014  
                     l93 0274                       l94 0292                       l86 017C  
                     l78 00AA                       l95 02B0                       l87 0196  
                     l96 02E8                       l88 01B4                       l97 02FE  
                     l89 01D2              __CFG_BORV$0 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l110 03F2                      l120 041C                      l112 03D6  
                    l130 049C                      l122 0426                      l114 03E0  
                    l124 0472                      l116 0430                      l108 03EA  
                    l126 0480                      l118 0438                      l128 048E  
                    l147 09B2                      l450 0714                      l371 07E2  
                    l451 0724                      l372 07D8                      l444 0692  
                    l365 0786                      l366 077C                      l446 06BA  
                    l447 06EC                      l368 07BA                      l448 06FC  
                    l369 07A4                      l473 063C                      l465 05A2  
                    l474 0630                      l467 0618                      l476 0658  
                    l468 0608             __CFG_CPB$OFF 000000                      _PR2 000FCB  
           __CFG_CPD$OFF 000000                      _ISR 0008             __CFG_BOR$OFF 000000  
                    wreg 000FE8             __CFG_LVP$OFF 000000                     ?_ISR 0001  
           __CFG_WDT$OFF 000000                     u1130 07EC                     u1300 03BC  
                   u1221 0586                     u1310 03CC                     u1240 05C0  
                   u1320 0402                     u1161 067A                     u1090 076E  
                   u1330 0412                     u1340 0442                     u1500 015C  
                   u1181 06A2                     u1245 05B8                     u1280 0642  
                   u1360 0458                     u1440 0092                     u1530 030A  
                   u1358 0444                     u1550 0326                     u1470 013C  
                   u1378 045A                     u1458 0096                     u1580 0340  
                   u1548 030E                     _PIE1 000F9D                     u1568 032A  
                   u1488 0140                     _PIE2 000FA0                     _main 09AE  
           ___ftpack@arg 0013                     _init 08B4                     _loop 0012  
           ___ftpack@exp 0016                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 004C                     prodh 000FF4  
                   prodl 000FF3                     start 000E            __CFG_IESO$OFF 000000  
           ___ftmul@cntr 002B             ___param_bank 000000             ___ftmul@sign 002C  
                  ??_ISR 0001             ___fttol@exp1 003B             ___fttol@lval 0037  
          __CFG_PLLDIV$5 000000           __CFG_CCP2MX$ON 000000                    ?_main 0001  
                  ?_init 0001                    ?_loop 0001          __end_of___ftmul 075E  
        __end_of___fttol 066A                    _T2CON 000FCA                    i2l142 0868  
          __CFG_USBDIV$2 000000            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
          ___ftpack@sign 0017                    pclath 000FFA                    tablat 000FF5  
                  loop@m 0046                    status 000FD8                    wtemp6 004D  
         __CFG_MCLRE$OFF 000000          __initialization 094C             __end_of_main 09B8  
           __end_of_init 094C             __end_of_loop 03A4          setMotores@dutyD 0066  
        setMotores@dutyI 0064                   ??_main 0042            ___fttol@sign1 0036  
                 ??_init 0042                   ??_loop 0068            __activetblptr 000002  
                 _CCPR1L 000FBE                   _CCPR2L 000FBB         __end_of___ftpack 080C  
       __end_of___lwtoft 099C                   _TMR2IF 007CF1           __CFG_XINST$OFF 000000  
              ??___ftmul 0024                ??___fttol 0031            loop@direccion 004B  
                 _millis 099C                   clear_0 0964    ___ftmul@f3_as_product 0028  
           __pdataCOMRAM 004B                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 096A  
        __CFG_PBADEN$OFF 000000           _setMotores$851 0060           _setMotores$852 0062  
          ___rparam_used 000001               ___ftmul@f1 001E               ___ftmul@f2 0021  
             ___fttol@f1 002D           __pcstackCOMRAM 0001         setMotores@speedD 003E  
       setMotores@speedI 003C               ___lwtoft@c 001B                  ?_millis 0013  
              ?___ftpack 0013                ?___lwtoft 001B                  _INTCON3 000FF0  
        __CFG_VREGEN$OFF 000000                  __Hparam 0000                  __Lparam 0000  
                ___ftmul 066A                  ___fttol 0576          __CFG_STVREN$OFF 000000  
                __pcinit 094C               ??___ftpack 0018          __size_of_millis 0012  
                __ramtop 0800                  __ptext0 09AE                  __ptext1 0012  
                __ptext2 099C                  __ptext3 08B4                  __ptext4 03A4  
                __ptext5 0978                  __ptext6 0576                  __ptext7 066A  
                __ptext8 075E            _millisCounter 0042               ??___lwtoft 001E  
           __size_of_ISR 08AC                _T2CONbits 000FCA           __pintcode_body 080C  
   end_of_initialization 096A            __Lmediumconst 0000                  int_func 080C  
             _setMotores 03A4                  postinc0 000FEE                _PORTAbits 000F80  
              _PORTBbits 000F81                _PORTCbits 000F82                _TRISAbits 000F92  
              _TRISBbits 000F93                _TRISCbits 000F94              _CCP1CONbits 000FBD  
            _CCP2CONbits 000FBA              ___ftmul@exp 0027            __pidataCOMRAM 09B8  
         __end_of_millis 09AE      start_initialization 094C              __end_of_ISR 08B4  
            ?_setMotores 003C         __CFG_LPT1OSC$OFF 000000                 ??_millis 0017  
      __size_of___ftpack 00AE              __pbssCOMRAM 0042        __size_of___lwtoft 0024  
          __pcstackBANK0 0060               loop@estado 004A                __pintcode 0008  
               ?___ftmul 001E                 ?___fttol 002D      __size_of_setMotores 01D2  
               _LATAbits 000F89                 _LATCbits 000F8B                 _PIE1bits 000F9D  
               _UCFGbits 000F6F                 _RCONbits 000FD0         __CFG_WDTPS$32768 000000  
               _UCONbits 000F6D               _ADCON1bits 000FC1                 __Hrparam 0000  
               __Lrparam 0000         __size_of___ftmul 00F4         __size_of___fttol 00F4  
               ___ftpack 075E                 ___lwtoft 0978             ??_setMotores 0040  
          __size_of_main 000A            __size_of_init 0098            __size_of_loop 0392  
               int$flags 004C    __CFG_CPUDIV$OSC1_PLL2 000000               _INTCONbits 000FF2  
     __end_of_setMotores 0576                 intlevel2 0000       __CFG_FOSC$HSPLL_HS 000000  
