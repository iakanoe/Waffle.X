

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Sep 01 20:14:48 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,inline
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    24                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    25  0000                     
    26                           ; Version 1.45
    27                           ; Generated 16/11/2017 GMT
    28                           ; 
    29                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F2550 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	idataCOMRAM
    62  000AC0                     __pidataCOMRAM:
    63                           	opt stack 0
    64                           
    65                           ;initializer for loop@direccion
    66  000AC0  05                 	db	5
    67  0000                     _LATCbits	set	3979
    68  0000                     _PORTCbits	set	3970
    69  0000                     _PORTBbits	set	3969
    70  0000                     _PORTAbits	set	3968
    71  0000                     _LATAbits	set	3977
    72  0000                     _INTCONbits	set	4082
    73  0000                     _PIE1bits	set	3997
    74  0000                     _RCONbits	set	4048
    75  0000                     _PIE2	set	4000
    76  0000                     _PIE1	set	3997
    77  0000                     _INTCON3	set	4080
    78  0000                     _CCP2CONbits	set	4026
    79  0000                     _CCPR2L	set	4027
    80  0000                     _CCP1CONbits	set	4029
    81  0000                     _CCPR1L	set	4030
    82  0000                     _PR2	set	4043
    83  0000                     _T2CONbits	set	4042
    84  0000                     _T2CON	set	4042
    85  0000                     _TRISCbits	set	3988
    86  0000                     _TRISBbits	set	3987
    87  0000                     _TRISAbits	set	3986
    88  0000                     _UCFGbits	set	3951
    89  0000                     _UCONbits	set	3949
    90  0000                     _ADCON1bits	set	4033
    91  0000                     _TMR2IF	set	31985
    92                           
    93                           ; #config settings
    94  0000                     
    95                           	psect	cinit
    96  000A54                     __pcinit:
    97                           	opt stack 0
    98  000A54                     start_initialization:
    99                           	opt stack 0
   100  000A54                     __initialization:
   101                           	opt stack 0
   102                           
   103                           ; Initialize objects allocated to COMRAM (1 bytes)
   104                           ; load TBLPTR registers with __pidataCOMRAM
   105  000A54  0EC0               	movlw	low __pidataCOMRAM
   106  000A56  6EF6               	movwf	tblptrl,c
   107  000A58  0E0A               	movlw	high __pidataCOMRAM
   108  000A5A  6EF7               	movwf	tblptrh,c
   109  000A5C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   110  000A5E  6EF8               	movwf	tblptru,c
   111  000A60  0009               	tblrd		*+	;fetch initializer
   112  000A62  CFF5 F04B          	movff	tablat,__pdataCOMRAM
   113                           
   114                           ; Clear objects allocated to COMRAM (9 bytes)
   115  000A66  EE00  F042         	lfsr	0,__pbssCOMRAM
   116  000A6A  0E09               	movlw	9
   117  000A6C                     clear_0:
   118  000A6C  6AEE               	clrf	postinc0,c
   119  000A6E  06E8               	decf	wreg,f,c
   120  000A70  E1FD               	bnz	clear_0
   121  000A72                     end_of_initialization:
   122                           	opt stack 0
   123  000A72                     __end_of__initialization:
   124                           	opt stack 0
   125  000A72  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   126  000A74  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   127  000A76  0E00               	movlw	low (__Lmediumconst shr (0+16))
   128  000A78  6EF8               	movwf	tblptru,c
   129  000A7A  0100               	movlb	0
   130  000A7C  EF5B  F005         	goto	_main	;jump to C main() function
   131                           tblptru	equ	0xFF8
   132                           tblptrh	equ	0xFF7
   133                           tblptrl	equ	0xFF6
   134                           tablat	equ	0xFF5
   135                           postinc0	equ	0xFEE
   136                           wreg	equ	0xFE8
   137                           
   138                           	psect	bssCOMRAM
   139  000042                     __pbssCOMRAM:
   140                           	opt stack 0
   141  000042                     _millisCounter:
   142                           	opt stack 0
   143  000042                     	ds	4
   144  000046                     loop@m:
   145                           	opt stack 0
   146  000046                     	ds	4
   147  00004A                     loop@estado:
   148                           	opt stack 0
   149  00004A                     	ds	1
   150                           tblptru	equ	0xFF8
   151                           tblptrh	equ	0xFF7
   152                           tblptrl	equ	0xFF6
   153                           tablat	equ	0xFF5
   154                           postinc0	equ	0xFEE
   155                           wreg	equ	0xFE8
   156                           
   157                           	psect	dataCOMRAM
   158  00004B                     __pdataCOMRAM:
   159                           	opt stack 0
   160  00004B                     loop@direccion:
   161                           	opt stack 0
   162  00004B                     	ds	1
   163                           tblptru	equ	0xFF8
   164                           tblptrh	equ	0xFF7
   165                           tblptrl	equ	0xFF6
   166                           tablat	equ	0xFF5
   167                           postinc0	equ	0xFEE
   168                           wreg	equ	0xFE8
   169                           
   170                           	psect	cstackBANK0
   171  000060                     __pcstackBANK0:
   172                           	opt stack 0
   173  000060                     _setMotores$855:
   174                           	opt stack 0
   175                           
   176                           ; 2 bytes @ 0x0
   177  000060                     	ds	2
   178  000062                     _setMotores$856:
   179                           	opt stack 0
   180                           
   181                           ; 2 bytes @ 0x2
   182  000062                     	ds	2
   183  000064                     setMotores@dutyI:
   184                           	opt stack 0
   185                           
   186                           ; 2 bytes @ 0x4
   187  000064                     	ds	2
   188  000066                     setMotores@dutyD:
   189                           	opt stack 0
   190                           
   191                           ; 2 bytes @ 0x6
   192  000066                     	ds	2
   193  000068                     ??_loop:
   194                           
   195                           ; 1 bytes @ 0x8
   196  000068                     	ds	5
   197  00006D                     _loop$842:
   198                           	opt stack 0
   199                           
   200                           ; 1 bytes @ 0xD
   201  00006D                     	ds	1
   202  00006E                     _loop$851:
   203                           	opt stack 0
   204                           
   205                           ; 1 bytes @ 0xE
   206  00006E                     	ds	1
   207                           tblptru	equ	0xFF8
   208                           tblptrh	equ	0xFF7
   209                           tblptrl	equ	0xFF6
   210                           tablat	equ	0xFF5
   211                           postinc0	equ	0xFEE
   212                           wreg	equ	0xFE8
   213                           
   214                           	psect	cstackCOMRAM
   215  000001                     __pcstackCOMRAM:
   216                           	opt stack 0
   217  000001                     ??_ISR:
   218  000001                     
   219                           ; 1 bytes @ 0x0
   220  000001                     	ds	18
   221  000013                     ?___ftpack:
   222                           	opt stack 0
   223  000013                     ?_millis:
   224                           	opt stack 0
   225  000013                     ___ftpack@arg:
   226                           	opt stack 0
   227                           
   228                           ; 3 bytes @ 0x12
   229  000013                     	ds	3
   230  000016                     ___ftpack@exp:
   231                           	opt stack 0
   232                           
   233                           ; 1 bytes @ 0x15
   234  000016                     	ds	1
   235  000017                     ___ftpack@sign:
   236                           	opt stack 0
   237                           
   238                           ; 1 bytes @ 0x16
   239  000017                     	ds	1
   240  000018                     ??___ftpack:
   241                           
   242                           ; 1 bytes @ 0x17
   243  000018                     	ds	3
   244  00001B                     ?___lwtoft:
   245                           	opt stack 0
   246  00001B                     ___lwtoft@c:
   247                           	opt stack 0
   248                           
   249                           ; 2 bytes @ 0x1A
   250  00001B                     	ds	3
   251  00001E                     ?___ftmul:
   252                           	opt stack 0
   253  00001E                     ___ftmul@f1:
   254                           	opt stack 0
   255                           
   256                           ; 3 bytes @ 0x1D
   257  00001E                     	ds	3
   258  000021                     ___ftmul@f2:
   259                           	opt stack 0
   260                           
   261                           ; 3 bytes @ 0x20
   262  000021                     	ds	3
   263  000024                     ??___ftmul:
   264                           
   265                           ; 1 bytes @ 0x23
   266  000024                     	ds	3
   267  000027                     ___ftmul@exp:
   268                           	opt stack 0
   269                           
   270                           ; 1 bytes @ 0x26
   271  000027                     	ds	1
   272  000028                     ___ftmul@f3_as_product:
   273                           	opt stack 0
   274                           
   275                           ; 3 bytes @ 0x27
   276  000028                     	ds	3
   277  00002B                     ___ftmul@cntr:
   278                           	opt stack 0
   279                           
   280                           ; 1 bytes @ 0x2A
   281  00002B                     	ds	1
   282  00002C                     ___ftmul@sign:
   283                           	opt stack 0
   284                           
   285                           ; 1 bytes @ 0x2B
   286  00002C                     	ds	1
   287  00002D                     ?___fttol:
   288                           	opt stack 0
   289  00002D                     ___fttol@f1:
   290                           	opt stack 0
   291                           
   292                           ; 3 bytes @ 0x2C
   293  00002D                     	ds	4
   294  000031                     ??___fttol:
   295                           
   296                           ; 1 bytes @ 0x30
   297  000031                     	ds	5
   298  000036                     ___fttol@sign1:
   299                           	opt stack 0
   300                           
   301                           ; 1 bytes @ 0x35
   302  000036                     	ds	1
   303  000037                     ___fttol@lval:
   304                           	opt stack 0
   305                           
   306                           ; 4 bytes @ 0x36
   307  000037                     	ds	4
   308  00003B                     ___fttol@exp1:
   309                           	opt stack 0
   310                           
   311                           ; 1 bytes @ 0x3A
   312  00003B                     	ds	1
   313  00003C                     setMotores@speedI:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x3B
   317  00003C                     	ds	2
   318  00003E                     setMotores@speedD:
   319                           	opt stack 0
   320                           
   321                           ; 2 bytes @ 0x3D
   322  00003E                     	ds	2
   323  000040                     ??_setMotores:
   324                           
   325                           ; 1 bytes @ 0x3F
   326  000040                     	ds	2
   327  000042                     tblptru	equ	0xFF8
   328                           tblptrh	equ	0xFF7
   329                           tblptrl	equ	0xFF6
   330                           tablat	equ	0xFF5
   331                           postinc0	equ	0xFEE
   332                           wreg	equ	0xFE8
   333                           
   334                           ; 1 bytes @ 0x41
   335 ;;
   336 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   337 ;;
   338 ;; *************** function _main *****************
   339 ;; Defined at:
   340 ;;		line 317 in file "main.c"
   341 ;; Parameters:    Size  Location     Type
   342 ;;		None
   343 ;; Auto vars:     Size  Location     Type
   344 ;;		None
   345 ;; Return value:  Size  Location     Type
   346 ;;                  1    wreg      void 
   347 ;; Registers used:
   348 ;;		wreg, status,2, status,0, cstack
   349 ;; Tracked objects:
   350 ;;		On entry : 0/0
   351 ;;		On exit  : 0/0
   352 ;;		Unchanged: 0/0
   353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   354 ;;      Params:         0       0       0       0       0       0       0       0       0
   355 ;;      Locals:         0       0       0       0       0       0       0       0       0
   356 ;;      Temps:          0       0       0       0       0       0       0       0       0
   357 ;;      Totals:         0       0       0       0       0       0       0       0       0
   358 ;;Total ram usage:        0 bytes
   359 ;; Hardware stack levels required when called:    5
   360 ;; This function calls:
   361 ;;		_init
   362 ;;		_loop
   363 ;; This function is called by:
   364 ;;		Startup code after reset
   365 ;; This function uses a non-reentrant model
   366 ;;
   367                           
   368                           	psect	text0
   369  000AB6                     __ptext0:
   370                           	opt stack 0
   371  000AB6                     _main:
   372                           	opt stack 26
   373                           
   374                           ;main.c: 318: init();
   375                           
   376                           ;incstack = 0
   377  000AB6  ECDE  F004         	call	_init	;wreg free
   378  000ABA                     l171:
   379  000ABA  EC09  F000         	call	_loop	;wreg free
   380  000ABE  D7FD               	goto	l171
   381  000AC0                     __end_of_main:
   382                           	opt stack 0
   383                           tblptru	equ	0xFF8
   384                           tblptrh	equ	0xFF7
   385                           tblptrl	equ	0xFF6
   386                           tablat	equ	0xFF5
   387                           postinc0	equ	0xFEE
   388                           wreg	equ	0xFE8
   389                           
   390 ;; *************** function _loop *****************
   391 ;; Defined at:
   392 ;;		line 73 in file "main.c"
   393 ;; Parameters:    Size  Location     Type
   394 ;;		None
   395 ;; Auto vars:     Size  Location     Type
   396 ;;		None
   397 ;; Return value:  Size  Location     Type
   398 ;;                  1    wreg      void 
   399 ;; Registers used:
   400 ;;		wreg, status,2, status,0, cstack
   401 ;; Tracked objects:
   402 ;;		On entry : 0/0
   403 ;;		On exit  : 0/0
   404 ;;		Unchanged: 0/0
   405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   406 ;;      Params:         0       0       0       0       0       0       0       0       0
   407 ;;      Locals:         0       2       0       0       0       0       0       0       0
   408 ;;      Temps:          0       5       0       0       0       0       0       0       0
   409 ;;      Totals:         0       7       0       0       0       0       0       0       0
   410 ;;Total ram usage:        7 bytes
   411 ;; Hardware stack levels used:    1
   412 ;; Hardware stack levels required when called:    4
   413 ;; This function calls:
   414 ;;		_millis
   415 ;;		_setMotores
   416 ;; This function is called by:
   417 ;;		_main
   418 ;; This function uses a non-reentrant model
   419 ;;
   420                           
   421                           	psect	text1
   422  000012                     __ptext1:
   423                           	opt stack 0
   424  000012                     _loop:
   425                           	opt stack 26
   426                           
   427                           ;main.c: 74: static unsigned long m = 0;
   428                           ;main.c: 75: static char estado = MENU;
   429                           ;main.c: 76: static char direccion = DER;
   430                           ;main.c: 78: switch(estado){
   431                           
   432                           ;incstack = 0
   433  000012  D21A               	goto	l66
   434  000014                     l67:
   435                           
   436                           ;main.c: 80: if((unsigned)!PORTAbits.RA1){
   437  000014  B280               	btfsc	3968,1,c	;volatile
   438  000016  D019               	goto	l68
   439                           
   440                           ;main.c: 81: LATAbits.LA2 = 1;
   441  000018  8489               	bsf	3977,2,c	;volatile
   442                           
   443                           ;main.c: 82: LATAbits.LA3 = 1;
   444  00001A  8689               	bsf	3977,3,c	;volatile
   445                           
   446                           ;main.c: 83: LATAbits.LA4 = 1;
   447  00001C  8889               	bsf	3977,4,c	;volatile
   448                           
   449                           ;main.c: 84: m = millis();
   450  00001E  EC52  F005         	call	_millis	;wreg free
   451  000022  C013  F046         	movff	?_millis,loop@m
   452  000026  C014  F047         	movff	?_millis+1,loop@m+1
   453  00002A  C015  F048         	movff	?_millis+2,loop@m+2
   454  00002E  C016  F049         	movff	?_millis+3,loop@m+3
   455                           
   456                           ;main.c: 85: direccion = DER;
   457  000032  0E05               	movlw	5
   458  000034  6E4B               	movwf	loop@direccion,c
   459                           
   460                           ;main.c: 86: estado = ESPERA;
   461  000036  0E02               	movlw	2
   462  000038  6E4A               	movwf	loop@estado,c
   463                           
   464                           ;main.c: 87: while((unsigned)!PORTAbits.RA1)
   465  00003A  D004               	goto	u1930
   466  00003C                     
   467                           ;main.c: 89: estado = LIMPIAR;
   468  00003C  0E01               	movlw	1
   469  00003E  6E4A               	movwf	loop@estado,c
   470  000040  AA80               	btfss	3968,5,c	;volatile
   471  000042  D7FC               	goto	l72
   472  000044                     u1930:
   473  000044  B280               	btfsc	3968,1,c	;volatile
   474  000046  0012               	return	
   475  000048  D7FB               	goto	l71
   476  00004A                     l68:
   477                           
   478                           ;main.c: 91: }
   479                           ;main.c: 93: if((unsigned)!PORTAbits.RA5){
   480  00004A  BA80               	btfsc	3968,5,c	;volatile
   481  00004C  D019               	goto	l76
   482                           
   483                           ;main.c: 94: LATAbits.LA2 = 1;
   484  00004E  8489               	bsf	3977,2,c	;volatile
   485                           
   486                           ;main.c: 95: LATAbits.LA3 = 1;
   487  000050  8689               	bsf	3977,3,c	;volatile
   488                           
   489                           ;main.c: 96: LATAbits.LA4 = 1;
   490  000052  8889               	bsf	3977,4,c	;volatile
   491                           
   492                           ;main.c: 97: m = millis();
   493  000054  EC52  F005         	call	_millis	;wreg free
   494  000058  C013  F046         	movff	?_millis,loop@m
   495  00005C  C014  F047         	movff	?_millis+1,loop@m+1
   496  000060  C015  F048         	movff	?_millis+2,loop@m+2
   497  000064  C016  F049         	movff	?_millis+3,loop@m+3
   498                           
   499                           ;main.c: 98: direccion = IZQ;
   500  000068  0E09               	movlw	9
   501  00006A  6E4B               	movwf	loop@direccion,c
   502                           
   503                           ;main.c: 99: estado = ESPERA;
   504  00006C  0E02               	movlw	2
   505  00006E  6E4A               	movwf	loop@estado,c
   506                           
   507                           ;main.c: 100: while((unsigned)!PORTAbits.RA5)
   508  000070  D004               	goto	u1960
   509  000072                     
   510                           ;main.c: 102: estado = LIMPIAR;
   511  000072  0E01               	movlw	1
   512  000074  6E4A               	movwf	loop@estado,c
   513  000076  A280               	btfss	3968,1,c	;volatile
   514  000078  D7FC               	goto	l80
   515  00007A                     u1960:
   516  00007A  BA80               	btfsc	3968,5,c	;volatile
   517  00007C  0012               	return	
   518  00007E  D7FB               	goto	l79
   519  000080                     l76:
   520                           
   521                           ;main.c: 104: }
   522                           ;main.c: 106: setMotores(0, 0);
   523  000080  0E00               	movlw	0
   524  000082  6E3D               	movwf	setMotores@speedI+1,c
   525  000084  0E00               	movlw	0
   526  000086  6E3C               	movwf	setMotores@speedI,c
   527  000088  0E00               	movlw	0
   528  00008A  6E3F               	movwf	setMotores@speedD+1,c
   529  00008C  0E00               	movlw	0
   530  00008E  6E3E               	movwf	setMotores@speedD,c
   531  000090  EC56  F002         	call	_setMotores	;wreg free
   532                           
   533                           ;main.c: 107: LATAbits.LA2 = (unsigned)((unsigned)!PORTBbits.RB5 || (unsigned)!PORTBbits
      +                          .RB4 || (unsigned)!PORTBbits.RB3);
   534  000094  0E01               	movlw	1
   535  000096  0100               	movlb	0	; () banked
   536  000098  6F6D               	movwf	_loop$842& (0+255),b
   537                           
   538                           ; BSR set to: 0
   539  00009A  BA81               	btfsc	3969,5,c	;volatile
   540                           
   541                           ; BSR set to: 0
   542  00009C  A881               	btfss	3969,4,c	;volatile
   543  00009E  D004               	goto	l84
   544                           
   545                           ; BSR set to: 0
   546  0000A0  A681               	btfss	3969,3,c	;volatile
   547  0000A2  D002               	goto	l84
   548                           
   549                           ; BSR set to: 0
   550  0000A4  0E00               	movlw	0
   551  0000A6  6F6D               	movwf	_loop$842& (0+255),b
   552  0000A8                     l84:
   553                           
   554                           ; BSR set to: 0
   555                           
   556                           ; BSR set to: 0
   557  0000A8  B16D               	btfsc	_loop$842& (0+255),0,b
   558  0000AA  D002               	bra	u2015
   559  0000AC  9489               	bcf	3977,2,c	;volatile
   560  0000AE  D001               	bra	u2016
   561  0000B0                     u2015:
   562  0000B0  8489               	bsf	3977,2,c	;volatile
   563  0000B2                     u2016:
   564                           
   565                           ;main.c: 108: LATAbits.LA3 = (unsigned)((unsigned)!PORTBbits.RB1);
   566  0000B2  B281               	btfsc	3969,1,c	;volatile
   567  0000B4  D004               	goto	u2020
   568  0000B6  0100               	movlb	0	; () banked
   569  0000B8  6B68               	clrf	??_loop& (0+255),b
   570  0000BA  2B68               	incf	??_loop& (0+255),f,b
   571  0000BC  D002               	goto	u2038
   572  0000BE                     u2020:
   573  0000BE  0100               	movlb	0	; () banked
   574  0000C0  6B68               	clrf	??_loop& (0+255),b
   575  0000C2                     u2038:
   576  0000C2  4768               	rlncf	??_loop& (0+255),f,b
   577  0000C4  4768               	rlncf	??_loop& (0+255),f,b
   578  0000C6  4768               	rlncf	??_loop& (0+255),f,b
   579  0000C8  5089               	movf	3977,w,c	;volatile
   580  0000CA  1968               	xorwf	??_loop& (0+255),w,b
   581  0000CC  0BF7               	andlw	-9
   582  0000CE  1968               	xorwf	??_loop& (0+255),w,b
   583  0000D0  6E89               	movwf	3977,c	;volatile
   584                           
   585                           ; BSR set to: 0
   586                           ;main.c: 109: LATAbits.LA4 = (unsigned)((unsigned)!PORTCbits.RC5 || (unsigned)!PORTCbits
      +                          .RC4 || (unsigned)!PORTCbits.RC6);
   587  0000D2  0E01               	movlw	1
   588  0000D4  6F6E               	movwf	_loop$851& (0+255),b
   589                           
   590                           ; BSR set to: 0
   591  0000D6  BA82               	btfsc	3970,5,c	;volatile
   592                           
   593                           ; BSR set to: 0
   594  0000D8  A882               	btfss	3970,4,c	;volatile
   595  0000DA  D004               	goto	l86
   596                           
   597                           ; BSR set to: 0
   598  0000DC  AC82               	btfss	3970,6,c	;volatile
   599  0000DE  D002               	goto	l86
   600                           
   601                           ; BSR set to: 0
   602  0000E0  0E00               	movlw	0
   603  0000E2  6F6E               	movwf	_loop$851& (0+255),b
   604  0000E4                     l86:
   605                           
   606                           ; BSR set to: 0
   607                           
   608                           ; BSR set to: 0
   609  0000E4  B16E               	btfsc	_loop$851& (0+255),0,b
   610  0000E6  D002               	bra	u2075
   611  0000E8  9889               	bcf	3977,4,c	;volatile
   612  0000EA  D001               	bra	u2076
   613  0000EC                     u2075:
   614  0000EC  8889               	bsf	3977,4,c	;volatile
   615  0000EE                     u2076:
   616                           
   617                           ;main.c: 110: break;
   618  0000EE  0012               	return	
   619  0000F0                     l87:
   620                           
   621                           ;main.c: 113: if((unsigned)!PORTAbits.RA1 || (unsigned)!PORTAbits.RA5){
   622  0000F0  A280               	btfss	3968,1,c	;volatile
   623  0000F2  D002               	goto	u2090
   624  0000F4  BA80               	btfsc	3968,5,c	;volatile
   625  0000F6  D007               	goto	l88
   626  0000F8                     u2090:
   627                           
   628                           ;main.c: 114: estado = MENU;
   629  0000F8  0E00               	movlw	0
   630  0000FA  6E4A               	movwf	loop@estado,c
   631  0000FC  A280               	btfss	3968,1,c	;volatile
   632  0000FE  D7FE               	goto	l92
   633  000100  BA80               	btfsc	3968,5,c	;volatile
   634  000102  0012               	return	
   635  000104  D7FB               	goto	l92
   636  000106                     l88:
   637                           
   638                           ;main.c: 117: }
   639                           ;main.c: 119: LATAbits.LA2 = 1;
   640  000106  8489               	bsf	3977,2,c	;volatile
   641                           
   642                           ;main.c: 120: LATAbits.LA3 = 0;
   643  000108  9689               	bcf	3977,3,c	;volatile
   644                           
   645                           ;main.c: 121: LATAbits.LA4 = 1;
   646  00010A  8889               	bsf	3977,4,c	;volatile
   647                           
   648                           ;main.c: 122: setMotores(1000, 1000);
   649  00010C  0E03               	movlw	3
   650  00010E  6E3D               	movwf	setMotores@speedI+1,c
   651  000110  0EE8               	movlw	232
   652  000112  6E3C               	movwf	setMotores@speedI,c
   653  000114  0E03               	movlw	3
   654  000116  6E3F               	movwf	setMotores@speedD+1,c
   655  000118  0EE8               	movlw	232
   656  00011A  6E3E               	movwf	setMotores@speedD,c
   657  00011C  EC56  F002         	call	_setMotores	;wreg free
   658                           
   659                           ;main.c: 123: break;
   660  000120  0012               	return	
   661  000122                     
   662                           ;main.c: 126: if(millis() > (m + 4970U)){
   663  000122  EC52  F005         	call	_millis	;wreg free
   664  000126  0E6A               	movlw	106
   665  000128  2446               	addwf	loop@m,w,c
   666  00012A  0100               	movlb	0	; () banked
   667  00012C  6F68               	movwf	??_loop& (0+255),b
   668  00012E  0E13               	movlw	19
   669  000130  2047               	addwfc	loop@m+1,w,c
   670  000132  6F69               	movwf	(??_loop+1)& (0+255),b
   671  000134  0E00               	movlw	0
   672  000136  2048               	addwfc	loop@m+2,w,c
   673  000138  6F6A               	movwf	(??_loop+2)& (0+255),b
   674  00013A  0E00               	movlw	0
   675  00013C  2049               	addwfc	loop@m+3,w,c
   676  00013E  6F6B               	movwf	(??_loop+3)& (0+255),b
   677  000140  5013               	movf	?_millis,w,c
   678  000142  5D68               	subwf	??_loop& (0+255),w,b
   679  000144  5014               	movf	?_millis+1,w,c
   680  000146  5969               	subwfb	(??_loop+1)& (0+255),w,b
   681  000148  5015               	movf	?_millis+2,w,c
   682  00014A  596A               	subwfb	(??_loop+2)& (0+255),w,b
   683  00014C  5016               	movf	?_millis+3,w,c
   684  00014E  596B               	subwfb	(??_loop+3)& (0+255),w,b
   685  000150  B0D8               	btfsc	status,0,c
   686  000152  D006               	goto	l95
   687                           
   688                           ; BSR set to: 0
   689                           ;main.c: 127: estado = ANALISIS;
   690  000154  0E03               	movlw	3
   691  000156  6E4A               	movwf	loop@estado,c
   692                           
   693                           ; BSR set to: 0
   694                           ;main.c: 128: LATAbits.LA2 = 0;
   695  000158  9489               	bcf	3977,2,c	;volatile
   696                           
   697                           ; BSR set to: 0
   698                           ;main.c: 129: LATAbits.LA3 = 0;
   699  00015A  9689               	bcf	3977,3,c	;volatile
   700                           
   701                           ; BSR set to: 0
   702                           ;main.c: 130: LATAbits.LA4 = 1;
   703  00015C  8889               	bsf	3977,4,c	;volatile
   704                           
   705                           ;main.c: 131: break;
   706  00015E  0012               	return	
   707  000160                     l95:
   708                           
   709                           ; BSR set to: 0
   710                           ;main.c: 132: }
   711                           ;main.c: 134: setMotores(0, 0);
   712                           
   713                           ; BSR set to: 0
   714  000160  0E00               	movlw	0
   715  000162  6E3D               	movwf	setMotores@speedI+1,c
   716  000164  0E00               	movlw	0
   717  000166  6E3C               	movwf	setMotores@speedI,c
   718  000168  0E00               	movlw	0
   719  00016A  6E3F               	movwf	setMotores@speedD+1,c
   720  00016C  0E00               	movlw	0
   721  00016E  6E3E               	movwf	setMotores@speedD,c
   722  000170  EC56  F002         	call	_setMotores	;wreg free
   723                           
   724                           ;main.c: 135: LATAbits.LA2 = 1;
   725  000174  8489               	bsf	3977,2,c	;volatile
   726                           
   727                           ;main.c: 136: LATAbits.LA3 = (unsigned)(millis() > (m + (4970U / 2)));
   728  000176  EC52  F005         	call	_millis	;wreg free
   729  00017A  0EB5               	movlw	181
   730  00017C  2446               	addwf	loop@m,w,c
   731  00017E  0100               	movlb	0	; () banked
   732  000180  6F68               	movwf	??_loop& (0+255),b
   733  000182  0E09               	movlw	9
   734  000184  2047               	addwfc	loop@m+1,w,c
   735  000186  6F69               	movwf	(??_loop+1)& (0+255),b
   736  000188  0E00               	movlw	0
   737  00018A  2048               	addwfc	loop@m+2,w,c
   738  00018C  6F6A               	movwf	(??_loop+2)& (0+255),b
   739  00018E  0E00               	movlw	0
   740  000190  2049               	addwfc	loop@m+3,w,c
   741  000192  6F6B               	movwf	(??_loop+3)& (0+255),b
   742  000194  5013               	movf	?_millis,w,c
   743  000196  5D68               	subwf	??_loop& (0+255),w,b
   744  000198  5014               	movf	?_millis+1,w,c
   745  00019A  5969               	subwfb	(??_loop+1)& (0+255),w,b
   746  00019C  5015               	movf	?_millis+2,w,c
   747  00019E  596A               	subwfb	(??_loop+2)& (0+255),w,b
   748  0001A0  5016               	movf	?_millis+3,w,c
   749  0001A2  596B               	subwfb	(??_loop+3)& (0+255),w,b
   750  0001A4  B0D8               	btfsc	status,0,c
   751  0001A6  D003               	goto	u2130
   752  0001A8  6B6C               	clrf	(??_loop+4)& (0+255),b
   753  0001AA  2B6C               	incf	(??_loop+4)& (0+255),f,b
   754  0001AC  D002               	goto	u2148
   755  0001AE                     u2130:
   756  0001AE  0100               	movlb	0	; () banked
   757  0001B0  6B6C               	clrf	(??_loop+4)& (0+255),b
   758  0001B2                     u2148:
   759  0001B2  476C               	rlncf	(??_loop+4)& (0+255),f,b
   760  0001B4  476C               	rlncf	(??_loop+4)& (0+255),f,b
   761  0001B6  476C               	rlncf	(??_loop+4)& (0+255),f,b
   762  0001B8  5089               	movf	3977,w,c	;volatile
   763  0001BA  196C               	xorwf	(??_loop+4)& (0+255),w,b
   764  0001BC  0BF7               	andlw	-9
   765  0001BE  196C               	xorwf	(??_loop+4)& (0+255),w,b
   766  0001C0  6E89               	movwf	3977,c	;volatile
   767                           
   768                           ; BSR set to: 0
   769                           ;main.c: 137: LATAbits.LA4 = 0;
   770  0001C2  9889               	bcf	3977,4,c	;volatile
   771                           
   772                           ;main.c: 138: break;
   773  0001C4  0012               	return	
   774  0001C6                     l96:
   775                           
   776                           ;main.c: 141: if((unsigned)!PORTBbits.RB3 || (unsigned)!PORTCbits.RC6){
   777  0001C6  A681               	btfss	3969,3,c	;volatile
   778  0001C8  D002               	goto	u2160
   779  0001CA  BC82               	btfsc	3970,6,c	;volatile
   780  0001CC  D00D               	goto	l97
   781  0001CE                     u2160:
   782                           
   783                           ;main.c: 142: estado = ATRAS;
   784  0001CE  0E0D               	movlw	13
   785  0001D0  6E4A               	movwf	loop@estado,c
   786                           
   787                           ;main.c: 143: m = millis();
   788  0001D2  EC52  F005         	call	_millis	;wreg free
   789  0001D6  C013  F046         	movff	?_millis,loop@m
   790  0001DA  C014  F047         	movff	?_millis+1,loop@m+1
   791  0001DE  C015  F048         	movff	?_millis+2,loop@m+2
   792  0001E2  C016  F049         	movff	?_millis+3,loop@m+3
   793                           
   794                           ;main.c: 144: break;
   795  0001E6  0012               	return	
   796  0001E8                     l97:
   797                           
   798                           ;main.c: 145: }
   799                           ;main.c: 152: if((unsigned)!PORTBbits.RB1){
   800  0001E8  B281               	btfsc	3969,1,c	;volatile
   801  0001EA  D01D               	goto	l103
   802                           
   803                           ;main.c: 153: if((unsigned)!PORTBbits.RB4 == (unsigned)!PORTCbits.RC5){
   804  0001EC  BA82               	btfsc	3970,5,c	;volatile
   805  0001EE  D004               	goto	u2180
   806  0001F0  0100               	movlb	0	; () banked
   807  0001F2  6B68               	clrf	??_loop& (0+255),b
   808  0001F4  2B68               	incf	??_loop& (0+255),f,b
   809  0001F6  D002               	goto	u2198
   810  0001F8                     u2180:
   811  0001F8  0100               	movlb	0	; () banked
   812  0001FA  6B68               	clrf	??_loop& (0+255),b
   813  0001FC                     u2198:
   814  0001FC  B881               	btfsc	3969,4,c	;volatile
   815  0001FE  D002               	goto	u2200
   816  000200  0E01               	movlw	1
   817  000202  D001               	goto	u2210
   818  000204                     u2200:
   819  000204  0E00               	movlw	0
   820  000206                     u2210:
   821  000206  1968               	xorwf	??_loop& (0+255),w,b
   822  000208  A4D8               	btfss	status,2,c
   823  00020A  D003               	goto	l101
   824                           
   825                           ; BSR set to: 0
   826                           ;main.c: 154: estado = ATAQUE;
   827  00020C  0E04               	movlw	4
   828  00020E  6E4A               	movwf	loop@estado,c
   829                           
   830                           ;main.c: 155: break;
   831  000210  0012               	return	
   832  000212                     l101:
   833                           
   834                           ; BSR set to: 0
   835                           ;main.c: 156: }
   836                           ;main.c: 158: if((unsigned)!PORTBbits.RB4){
   837  000212  B881               	btfsc	3969,4,c	;volatile
   838  000214  D003               	goto	l102
   839                           
   840                           ; BSR set to: 0
   841                           ;main.c: 159: estado = IZQAV;
   842  000216  0E0B               	movlw	11
   843  000218  6E4A               	movwf	loop@estado,c
   844                           
   845                           ;main.c: 160: break;
   846  00021A  0012               	return	
   847  00021C                     l102:
   848                           
   849                           ; BSR set to: 0
   850                           ;main.c: 161: }
   851                           ;main.c: 163: if((unsigned)!PORTCbits.RC5){
   852  00021C  BA82               	btfsc	3970,5,c	;volatile
   853  00021E  D003               	goto	l103
   854                           
   855                           ; BSR set to: 0
   856                           ;main.c: 164: estado = DERAV;
   857  000220  0E07               	movlw	7
   858  000222  6E4A               	movwf	loop@estado,c
   859                           
   860                           ;main.c: 165: break;
   861  000224  0012               	return	
   862  000226                     l103:
   863                           
   864                           ;main.c: 166: }
   865                           ;main.c: 167: }
   866                           ;main.c: 169: if((unsigned)!PORTBbits.RB4){
   867                           
   868                           ; BSR set to: 0
   869  000226  B881               	btfsc	3969,4,c	;volatile
   870  000228  D003               	goto	l104
   871                           
   872                           ;main.c: 170: estado = IZQA;
   873  00022A  0E0A               	movlw	10
   874  00022C  6E4A               	movwf	loop@estado,c
   875                           
   876                           ;main.c: 171: break;
   877  00022E  0012               	return	
   878  000230                     l104:
   879                           
   880                           ;main.c: 172: }
   881                           ;main.c: 174: if((unsigned)!PORTCbits.RC5){
   882  000230  BA82               	btfsc	3970,5,c	;volatile
   883  000232  D003               	goto	l105
   884                           
   885                           ;main.c: 175: estado = DERA;
   886  000234  0E06               	movlw	6
   887  000236  6E4A               	movwf	loop@estado,c
   888                           
   889                           ;main.c: 176: break;
   890  000238  0012               	return	
   891  00023A                     l105:
   892                           
   893                           ;main.c: 177: }
   894                           ;main.c: 179: if((unsigned)!PORTBbits.RB5){
   895  00023A  BA81               	btfsc	3969,5,c	;volatile
   896  00023C  D003               	goto	l106
   897                           
   898                           ;main.c: 180: estado = IZQ;
   899  00023E  0E09               	movlw	9
   900  000240  6E4A               	movwf	loop@estado,c
   901                           
   902                           ;main.c: 181: break;
   903  000242  0012               	return	
   904  000244                     l106:
   905                           
   906                           ;main.c: 182: }
   907                           ;main.c: 184: if((unsigned)!PORTCbits.RC4){
   908  000244  B882               	btfsc	3970,4,c	;volatile
   909  000246  D003               	goto	l107
   910                           
   911                           ;main.c: 185: estado = DER;
   912  000248  0E05               	movlw	5
   913  00024A  6E4A               	movwf	loop@estado,c
   914                           
   915                           ;main.c: 186: break;
   916  00024C  0012               	return	
   917  00024E                     l107:
   918                           
   919                           ;main.c: 187: }
   920                           ;main.c: 189: estado = direccion;
   921  00024E  C04B  F04A         	movff	loop@direccion,loop@estado
   922                           
   923                           ;main.c: 192: break;
   924  000252  0012               	return	
   925  000254                     
   926                           ;main.c: 196: setMotores(1000, 1000);
   927  000254  0E03               	movlw	3
   928  000256  6E3D               	movwf	setMotores@speedI+1,c
   929  000258  0EE8               	movlw	232
   930  00025A  6E3C               	movwf	setMotores@speedI,c
   931  00025C  0E03               	movlw	3
   932  00025E  6E3F               	movwf	setMotores@speedD+1,c
   933  000260  0EE8               	movlw	232
   934  000262  6E3E               	movwf	setMotores@speedD,c
   935  000264  EC56  F002         	call	_setMotores	;wreg free
   936                           
   937                           ;main.c: 197: estado = ANALISIS;
   938  000268  0E03               	movlw	3
   939  00026A  6E4A               	movwf	loop@estado,c
   940                           
   941                           ;main.c: 198: break;
   942  00026C  0012               	return	
   943  00026E                     
   944                           ;main.c: 201: setMotores(1000, 1000 / 2);
   945  00026E  0E03               	movlw	3
   946  000270  6E3D               	movwf	setMotores@speedI+1,c
   947  000272  0EE8               	movlw	232
   948  000274  6E3C               	movwf	setMotores@speedI,c
   949  000276  0E01               	movlw	1
   950  000278  6E3F               	movwf	setMotores@speedD+1,c
   951  00027A  0EF4               	movlw	244
   952  00027C  6E3E               	movwf	setMotores@speedD,c
   953  00027E  EC56  F002         	call	_setMotores	;wreg free
   954                           
   955                           ;main.c: 202: direccion = DER;
   956  000282  0E05               	movlw	5
   957  000284  6E4B               	movwf	loop@direccion,c
   958                           
   959                           ;main.c: 203: estado = ANALISIS;
   960  000286  0E03               	movlw	3
   961  000288  6E4A               	movwf	loop@estado,c
   962                           
   963                           ;main.c: 204: break;
   964  00028A  0012               	return	
   965  00028C                     
   966                           ;main.c: 207: setMotores(1000 / 2, 1000);
   967  00028C  0E01               	movlw	1
   968  00028E  6E3D               	movwf	setMotores@speedI+1,c
   969  000290  0EF4               	movlw	244
   970  000292  6E3C               	movwf	setMotores@speedI,c
   971  000294  0E03               	movlw	3
   972  000296  6E3F               	movwf	setMotores@speedD+1,c
   973  000298  0EE8               	movlw	232
   974  00029A  6E3E               	movwf	setMotores@speedD,c
   975  00029C  EC56  F002         	call	_setMotores	;wreg free
   976                           
   977                           ;main.c: 208: direccion = IZQ;
   978  0002A0  0E09               	movlw	9
   979  0002A2  6E4B               	movwf	loop@direccion,c
   980                           
   981                           ;main.c: 209: estado = ANALISIS;
   982  0002A4  0E03               	movlw	3
   983  0002A6  6E4A               	movwf	loop@estado,c
   984                           
   985                           ;main.c: 210: break;
   986  0002A8  0012               	return	
   987  0002AA                     
   988                           ;main.c: 213: if(millis() > (m + 300U)){
   989  0002AA  EC52  F005         	call	_millis	;wreg free
   990  0002AE  0E2C               	movlw	44
   991  0002B0  2446               	addwf	loop@m,w,c
   992  0002B2  0100               	movlb	0	; () banked
   993  0002B4  6F68               	movwf	??_loop& (0+255),b
   994  0002B6  0E01               	movlw	1
   995  0002B8  2047               	addwfc	loop@m+1,w,c
   996  0002BA  6F69               	movwf	(??_loop+1)& (0+255),b
   997  0002BC  0E00               	movlw	0
   998  0002BE  2048               	addwfc	loop@m+2,w,c
   999  0002C0  6F6A               	movwf	(??_loop+2)& (0+255),b
  1000  0002C2  0E00               	movlw	0
  1001  0002C4  2049               	addwfc	loop@m+3,w,c
  1002  0002C6  6F6B               	movwf	(??_loop+3)& (0+255),b
  1003  0002C8  5013               	movf	?_millis,w,c
  1004  0002CA  5D68               	subwf	??_loop& (0+255),w,b
  1005  0002CC  5014               	movf	?_millis+1,w,c
  1006  0002CE  5969               	subwfb	(??_loop+1)& (0+255),w,b
  1007  0002D0  5015               	movf	?_millis+2,w,c
  1008  0002D2  596A               	subwfb	(??_loop+2)& (0+255),w,b
  1009  0002D4  5016               	movf	?_millis+3,w,c
  1010  0002D6  596B               	subwfb	(??_loop+3)& (0+255),w,b
  1011  0002D8  B0D8               	btfsc	status,0,c
  1012  0002DA  D003               	goto	l112
  1013                           
  1014                           ; BSR set to: 0
  1015                           ;main.c: 214: estado = ANALISIS;
  1016  0002DC  0E03               	movlw	3
  1017  0002DE  6E4A               	movwf	loop@estado,c
  1018                           
  1019                           ;main.c: 221: break;
  1020  0002E0  0012               	return	
  1021  0002E2                     l112:
  1022                           
  1023                           ; BSR set to: 0
  1024                           ;main.c: 222: }
  1025                           ;main.c: 224: setMotores(-1000, -1000);
  1026                           
  1027                           ; BSR set to: 0
  1028  0002E2  0EFC               	movlw	252
  1029  0002E4  6E3D               	movwf	setMotores@speedI+1,c
  1030  0002E6  0E18               	movlw	24
  1031  0002E8  6E3C               	movwf	setMotores@speedI,c
  1032  0002EA  0EFC               	movlw	252
  1033  0002EC  6E3F               	movwf	setMotores@speedD+1,c
  1034  0002EE  0E18               	movlw	24
  1035  0002F0  6E3E               	movwf	setMotores@speedD,c
  1036  0002F2  EC56  F002         	call	_setMotores	;wreg free
  1037                           
  1038                           ;main.c: 225: break;
  1039  0002F6  0012               	return	
  1040  0002F8                     
  1041                           ;main.c: 228: setMotores(0, 1000);
  1042  0002F8  0E00               	movlw	0
  1043  0002FA  6E3D               	movwf	setMotores@speedI+1,c
  1044  0002FC  0E00               	movlw	0
  1045  0002FE  6E3C               	movwf	setMotores@speedI,c
  1046  000300  0E03               	movlw	3
  1047  000302  6E3F               	movwf	setMotores@speedD+1,c
  1048  000304  0EE8               	movlw	232
  1049  000306  6E3E               	movwf	setMotores@speedD,c
  1050  000308  EC56  F002         	call	_setMotores	;wreg free
  1051                           
  1052                           ;main.c: 229: direccion = IZQ;
  1053  00030C  0E09               	movlw	9
  1054  00030E  6E4B               	movwf	loop@direccion,c
  1055                           
  1056                           ;main.c: 230: estado = ANALISIS;
  1057  000310  0E03               	movlw	3
  1058  000312  6E4A               	movwf	loop@estado,c
  1059                           
  1060                           ;main.c: 231: break;
  1061  000314  0012               	return	
  1062  000316                     
  1063                           ;main.c: 234: setMotores(1000, 0);
  1064  000316  0E03               	movlw	3
  1065  000318  6E3D               	movwf	setMotores@speedI+1,c
  1066  00031A  0EE8               	movlw	232
  1067  00031C  6E3C               	movwf	setMotores@speedI,c
  1068  00031E  0E00               	movlw	0
  1069  000320  6E3F               	movwf	setMotores@speedD+1,c
  1070  000322  0E00               	movlw	0
  1071  000324  6E3E               	movwf	setMotores@speedD,c
  1072  000326  EC56  F002         	call	_setMotores	;wreg free
  1073                           
  1074                           ;main.c: 235: direccion = DER;
  1075  00032A  0E05               	movlw	5
  1076  00032C  6E4B               	movwf	loop@direccion,c
  1077                           
  1078                           ;main.c: 236: estado = ANALISIS;
  1079  00032E  0E03               	movlw	3
  1080  000330  6E4A               	movwf	loop@estado,c
  1081                           
  1082                           ;main.c: 237: break;
  1083  000332  0012               	return	
  1084  000334                     
  1085                           ;main.c: 240: setMotores(-700, 700);
  1086  000334  0EFD               	movlw	253
  1087  000336  6E3D               	movwf	setMotores@speedI+1,c
  1088  000338  0E44               	movlw	68
  1089  00033A  6E3C               	movwf	setMotores@speedI,c
  1090  00033C  0E02               	movlw	2
  1091  00033E  6E3F               	movwf	setMotores@speedD+1,c
  1092  000340  0EBC               	movlw	188
  1093  000342  6E3E               	movwf	setMotores@speedD,c
  1094  000344  EC56  F002         	call	_setMotores	;wreg free
  1095                           
  1096                           ;main.c: 241: direccion = IZQ;
  1097  000348  0E09               	movlw	9
  1098  00034A  6E4B               	movwf	loop@direccion,c
  1099                           
  1100                           ;main.c: 242: estado = ANALISIS;
  1101  00034C  0E03               	movlw	3
  1102  00034E  6E4A               	movwf	loop@estado,c
  1103                           
  1104                           ;main.c: 243: break;
  1105  000350  0012               	return	
  1106  000352                     
  1107                           ;main.c: 246: setMotores(700, -700);
  1108  000352  0E02               	movlw	2
  1109  000354  6E3D               	movwf	setMotores@speedI+1,c
  1110  000356  0EBC               	movlw	188
  1111  000358  6E3C               	movwf	setMotores@speedI,c
  1112  00035A  0EFD               	movlw	253
  1113  00035C  6E3F               	movwf	setMotores@speedD+1,c
  1114  00035E  0E44               	movlw	68
  1115  000360  6E3E               	movwf	setMotores@speedD,c
  1116  000362  EC56  F002         	call	_setMotores	;wreg free
  1117                           
  1118                           ;main.c: 247: direccion = DER;
  1119  000366  0E05               	movlw	5
  1120  000368  6E4B               	movwf	loop@direccion,c
  1121                           
  1122                           ;main.c: 248: estado = ANALISIS;
  1123  00036A  0E03               	movlw	3
  1124  00036C  6E4A               	movwf	loop@estado,c
  1125                           
  1126                           ;main.c: 249: break;
  1127  00036E  0012               	return	
  1128  000370                     
  1129                           ;main.c: 252: setMotores(0, 700);
  1130  000370  0E00               	movlw	0
  1131  000372  6E3D               	movwf	setMotores@speedI+1,c
  1132  000374  0E00               	movlw	0
  1133  000376  6E3C               	movwf	setMotores@speedI,c
  1134  000378  0E02               	movlw	2
  1135  00037A  6E3F               	movwf	setMotores@speedD+1,c
  1136  00037C  0EBC               	movlw	188
  1137  00037E  6E3E               	movwf	setMotores@speedD,c
  1138  000380  EC56  F002         	call	_setMotores	;wreg free
  1139                           
  1140                           ;main.c: 253: direccion = IZQ;
  1141  000384  0E09               	movlw	9
  1142  000386  6E4B               	movwf	loop@direccion,c
  1143                           
  1144                           ;main.c: 254: estado = ANALISIS;
  1145  000388  0E03               	movlw	3
  1146  00038A  6E4A               	movwf	loop@estado,c
  1147                           
  1148                           ;main.c: 255: break;
  1149  00038C  0012               	return	
  1150  00038E                     
  1151                           ;main.c: 258: setMotores(700, 0);
  1152  00038E  0E02               	movlw	2
  1153  000390  6E3D               	movwf	setMotores@speedI+1,c
  1154  000392  0EBC               	movlw	188
  1155  000394  6E3C               	movwf	setMotores@speedI,c
  1156  000396  0E00               	movlw	0
  1157  000398  6E3F               	movwf	setMotores@speedD+1,c
  1158  00039A  0E00               	movlw	0
  1159  00039C  6E3E               	movwf	setMotores@speedD,c
  1160  00039E  EC56  F002         	call	_setMotores	;wreg free
  1161                           
  1162                           ;main.c: 259: direccion = DER;
  1163  0003A2  0E05               	movlw	5
  1164  0003A4  6E4B               	movwf	loop@direccion,c
  1165                           
  1166                           ;main.c: 260: estado = ANALISIS;
  1167  0003A6  0E03               	movlw	3
  1168  0003A8  6E4A               	movwf	loop@estado,c
  1169                           
  1170                           ;main.c: 261: break;
  1171  0003AA  0012               	return	
  1172  0003AC                     
  1173                           ;main.c: 264: if(millis() > (m + 500U)){
  1174  0003AC  EC52  F005         	call	_millis	;wreg free
  1175  0003B0  0EF4               	movlw	244
  1176  0003B2  2446               	addwf	loop@m,w,c
  1177  0003B4  0100               	movlb	0	; () banked
  1178  0003B6  6F68               	movwf	??_loop& (0+255),b
  1179  0003B8  0E01               	movlw	1
  1180  0003BA  2047               	addwfc	loop@m+1,w,c
  1181  0003BC  6F69               	movwf	(??_loop+1)& (0+255),b
  1182  0003BE  0E00               	movlw	0
  1183  0003C0  2048               	addwfc	loop@m+2,w,c
  1184  0003C2  6F6A               	movwf	(??_loop+2)& (0+255),b
  1185  0003C4  0E00               	movlw	0
  1186  0003C6  2049               	addwfc	loop@m+3,w,c
  1187  0003C8  6F6B               	movwf	(??_loop+3)& (0+255),b
  1188  0003CA  5013               	movf	?_millis,w,c
  1189  0003CC  5D68               	subwf	??_loop& (0+255),w,b
  1190  0003CE  5014               	movf	?_millis+1,w,c
  1191  0003D0  5969               	subwfb	(??_loop+1)& (0+255),w,b
  1192  0003D2  5015               	movf	?_millis+2,w,c
  1193  0003D4  596A               	subwfb	(??_loop+2)& (0+255),w,b
  1194  0003D6  5016               	movf	?_millis+3,w,c
  1195  0003D8  596B               	subwfb	(??_loop+3)& (0+255),w,b
  1196  0003DA  B0D8               	btfsc	status,0,c
  1197  0003DC  D003               	goto	l120
  1198                           
  1199                           ; BSR set to: 0
  1200                           ;main.c: 265: estado = ANALISIS;
  1201  0003DE  0E03               	movlw	3
  1202  0003E0  6E4A               	movwf	loop@estado,c
  1203                           
  1204                           ;main.c: 266: break;
  1205  0003E2  0012               	return	
  1206  0003E4                     l120:
  1207                           
  1208                           ; BSR set to: 0
  1209                           ;main.c: 267: }
  1210                           ;main.c: 269: setMotores(700, -700);
  1211                           
  1212                           ; BSR set to: 0
  1213  0003E4  0E02               	movlw	2
  1214  0003E6  6E3D               	movwf	setMotores@speedI+1,c
  1215  0003E8  0EBC               	movlw	188
  1216  0003EA  6E3C               	movwf	setMotores@speedI,c
  1217  0003EC  0EFD               	movlw	253
  1218  0003EE  6E3F               	movwf	setMotores@speedD+1,c
  1219  0003F0  0E44               	movlw	68
  1220  0003F2  6E3E               	movwf	setMotores@speedD,c
  1221  0003F4  EC56  F002         	call	_setMotores	;wreg free
  1222                           
  1223                           ;main.c: 270: break;
  1224  0003F8  0012               	return	
  1225  0003FA                     
  1226                           ;main.c: 273: LATAbits.LA2 = (unsigned)!PORTBbits.RB3;
  1227  0003FA  B681               	btfsc	3969,3,c	;volatile
  1228  0003FC  D004               	goto	u2310
  1229  0003FE  0100               	movlb	0	; () banked
  1230  000400  6B68               	clrf	??_loop& (0+255),b
  1231  000402  2B68               	incf	??_loop& (0+255),f,b
  1232  000404  D002               	goto	u2328
  1233  000406                     u2310:
  1234  000406  0100               	movlb	0	; () banked
  1235  000408  6B68               	clrf	??_loop& (0+255),b
  1236  00040A                     u2328:
  1237  00040A  4768               	rlncf	??_loop& (0+255),f,b
  1238  00040C  4768               	rlncf	??_loop& (0+255),f,b
  1239  00040E  5089               	movf	3977,w,c	;volatile
  1240  000410  1968               	xorwf	??_loop& (0+255),w,b
  1241  000412  0BFB               	andlw	-5
  1242  000414  1968               	xorwf	??_loop& (0+255),w,b
  1243  000416  6E89               	movwf	3977,c	;volatile
  1244                           
  1245                           ;main.c: 274: LATAbits.LA4 = (unsigned)!PORTCbits.RC6;
  1246  000418  BC82               	btfsc	3970,6,c	;volatile
  1247  00041A  D003               	goto	u2330
  1248  00041C  6B68               	clrf	??_loop& (0+255),b
  1249  00041E  2B68               	incf	??_loop& (0+255),f,b
  1250  000420  D002               	goto	u2348
  1251  000422                     u2330:
  1252  000422  0100               	movlb	0	; () banked
  1253  000424  6B68               	clrf	??_loop& (0+255),b
  1254  000426                     u2348:
  1255  000426  3B68               	swapf	??_loop& (0+255),f,b
  1256  000428  5089               	movf	3977,w,c	;volatile
  1257  00042A  1968               	xorwf	??_loop& (0+255),w,b
  1258  00042C  0BEF               	andlw	-17
  1259  00042E  1968               	xorwf	??_loop& (0+255),w,b
  1260  000430  6E89               	movwf	3977,c	;volatile
  1261                           
  1262                           ; BSR set to: 0
  1263                           ;main.c: 275: LATAbits.LA3 = 1;
  1264  000432  8689               	bsf	3977,3,c	;volatile
  1265                           
  1266                           ; BSR set to: 0
  1267                           ;main.c: 276: if((unsigned)!PORTAbits.RA1 || (unsigned)!PORTAbits.RA5){
  1268  000434  A280               	btfss	3968,1,c	;volatile
  1269  000436  D002               	goto	u2360
  1270                           
  1271                           ; BSR set to: 0
  1272  000438  BA80               	btfsc	3968,5,c	;volatile
  1273  00043A  0012               	return	
  1274  00043C                     u2360:
  1275                           
  1276                           ; BSR set to: 0
  1277                           
  1278                           ; BSR set to: 0
  1279                           ;main.c: 277: while((unsigned)!PORTAbits.RA1 || (unsigned)!PORTAbits.RA5);
  1280  00043C  B280               	btfsc	3968,1,c	;volatile
  1281  00043E  AA80               	btfss	3968,5,c	;volatile
  1282  000440  D7FD               	goto	u2360
  1283                           
  1284                           ;main.c: 278: estado = 0;
  1285  000442  0E00               	movlw	0
  1286  000444  6E4A               	movwf	loop@estado,c
  1287                           
  1288                           ;main.c: 281: }
  1289                           
  1290                           ;main.c: 279: }
  1291                           ;main.c: 280: break;
  1292  000446  0012               	return	
  1293  000448                     l66:
  1294  000448  504A               	movf	loop@estado,w,c
  1295                           
  1296                           ; Switch size 1, requested type "space"
  1297                           ; Number of cases is 16, Range of values is 0 to 15
  1298                           ; switch strategies available:
  1299                           ; Name         Instructions Cycles
  1300                           ; simple_byte           49    25 (average)
  1301                           ;	Chosen strategy is simple_byte
  1302  00044A  0A00               	xorlw	0	; case 0
  1303  00044C  B4D8               	btfsc	status,2,c
  1304  00044E  D5E2               	goto	l67
  1305  000450  0A01               	xorlw	1	; case 1
  1306  000452  B4D8               	btfsc	status,2,c
  1307  000454  D64D               	goto	l87
  1308  000456  0A03               	xorlw	3	; case 2
  1309  000458  B4D8               	btfsc	status,2,c
  1310  00045A  D663               	goto	l94
  1311  00045C  0A01               	xorlw	1	; case 3
  1312  00045E  B4D8               	btfsc	status,2,c
  1313  000460  D6B2               	goto	l96
  1314  000462  0A07               	xorlw	7	; case 4
  1315  000464  B4D8               	btfsc	status,2,c
  1316  000466  D6F6               	goto	l108
  1317  000468  0A01               	xorlw	1	; case 5
  1318  00046A  B4D8               	btfsc	status,2,c
  1319  00046C  D772               	goto	l116
  1320  00046E  0A03               	xorlw	3	; case 6
  1321  000470  B4D8               	btfsc	status,2,c
  1322  000472  D751               	goto	l114
  1323  000474  0A01               	xorlw	1	; case 7
  1324  000476  B4D8               	btfsc	status,2,c
  1325  000478  D6FA               	goto	l109
  1326  00047A  0A0F               	xorlw	15	; case 8
  1327  00047C  B4D8               	btfsc	status,2,c
  1328  00047E  D787               	goto	l118
  1329  000480  0A01               	xorlw	1	; case 9
  1330  000482  B4D8               	btfsc	status,2,c
  1331  000484  D757               	goto	l115
  1332  000486  0A03               	xorlw	3	; case 10
  1333  000488  B4D8               	btfsc	status,2,c
  1334  00048A  D736               	goto	l113
  1335  00048C  0A01               	xorlw	1	; case 11
  1336  00048E  B4D8               	btfsc	status,2,c
  1337  000490  D6FD               	goto	l110
  1338  000492  0A07               	xorlw	7	; case 12
  1339  000494  B4D8               	btfsc	status,2,c
  1340  000496  D76C               	goto	l117
  1341  000498  0A01               	xorlw	1	; case 13
  1342  00049A  B4D8               	btfsc	status,2,c
  1343  00049C  D706               	goto	l111
  1344  00049E  0A03               	xorlw	3	; case 14
  1345  0004A0  B4D8               	btfsc	status,2,c
  1346  0004A2  D7AB               	goto	l121
  1347  0004A4  0A01               	xorlw	1	; case 15
  1348  0004A6  A4D8               	btfss	status,2,c
  1349  0004A8  0012               	return	
  1350  0004AA  D780               	goto	l119
  1351  0004AC                     __end_of_loop:
  1352                           	opt stack 0
  1353                           tblptru	equ	0xFF8
  1354                           tblptrh	equ	0xFF7
  1355                           tblptrl	equ	0xFF6
  1356                           tablat	equ	0xFF5
  1357                           postinc0	equ	0xFEE
  1358                           wreg	equ	0xFE8
  1359                           status	equ	0xFD8
  1360                           
  1361 ;; *************** function _millis *****************
  1362 ;; Defined at:
  1363 ;;		line 307 in file "main.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;		None
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;		None
  1368 ;; Return value:  Size  Location     Type
  1369 ;;                  4   18[COMRAM] unsigned long 
  1370 ;; Registers used:
  1371 ;;		None
  1372 ;; Tracked objects:
  1373 ;;		On entry : 0/0
  1374 ;;		On exit  : 0/0
  1375 ;;		Unchanged: 0/0
  1376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1377 ;;      Params:         4       0       0       0       0       0       0       0       0
  1378 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1379 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1380 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1381 ;;Total ram usage:        4 bytes
  1382 ;; Hardware stack levels used:    1
  1383 ;; Hardware stack levels required when called:    1
  1384 ;; This function calls:
  1385 ;;		Nothing
  1386 ;; This function is called by:
  1387 ;;		_loop
  1388 ;; This function uses a non-reentrant model
  1389 ;;
  1390                           
  1391                           	psect	text2
  1392  000AA4                     __ptext2:
  1393                           	opt stack 0
  1394  000AA4                     _millis:
  1395                           	opt stack 28
  1396                           
  1397                           ;main.c: 308: return millisCounter;
  1398                           
  1399                           ;incstack = 0
  1400  000AA4  C042  F013         	movff	_millisCounter,?_millis
  1401  000AA8  C043  F014         	movff	_millisCounter+1,?_millis+1
  1402  000AAC  C044  F015         	movff	_millisCounter+2,?_millis+2
  1403  000AB0  C045  F016         	movff	_millisCounter+3,?_millis+3
  1404  000AB4  0012               	return		;funcret
  1405  000AB6                     __end_of_millis:
  1406                           	opt stack 0
  1407                           tblptru	equ	0xFF8
  1408                           tblptrh	equ	0xFF7
  1409                           tblptrl	equ	0xFF6
  1410                           tablat	equ	0xFF5
  1411                           postinc0	equ	0xFEE
  1412                           wreg	equ	0xFE8
  1413                           status	equ	0xFD8
  1414                           
  1415 ;; *************** function _init *****************
  1416 ;; Defined at:
  1417 ;;		line 13 in file "main.c"
  1418 ;; Parameters:    Size  Location     Type
  1419 ;;		None
  1420 ;; Auto vars:     Size  Location     Type
  1421 ;;		None
  1422 ;; Return value:  Size  Location     Type
  1423 ;;                  1    wreg      void 
  1424 ;; Registers used:
  1425 ;;		wreg, status,2, status,0, cstack
  1426 ;; Tracked objects:
  1427 ;;		On entry : 0/0
  1428 ;;		On exit  : 0/0
  1429 ;;		Unchanged: 0/0
  1430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1431 ;;      Params:         0       0       0       0       0       0       0       0       0
  1432 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1433 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1434 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1435 ;;Total ram usage:        0 bytes
  1436 ;; Hardware stack levels used:    1
  1437 ;; Hardware stack levels required when called:    4
  1438 ;; This function calls:
  1439 ;;		_setMotores
  1440 ;; This function is called by:
  1441 ;;		_main
  1442 ;; This function uses a non-reentrant model
  1443 ;;
  1444                           
  1445                           	psect	text3
  1446  0009BC                     __ptext3:
  1447                           	opt stack 0
  1448  0009BC                     _init:
  1449                           	opt stack 26
  1450                           
  1451                           ;main.c: 15: ADCON1bits.PCFG = 0b1111;
  1452                           
  1453                           ;incstack = 0
  1454  0009BC  80C1               	bsf	4033,0,c	;volatile
  1455  0009BE  82C1               	bsf	4033,1,c	;volatile
  1456  0009C0  84C1               	bsf	4033,2,c	;volatile
  1457  0009C2  86C1               	bsf	4033,3,c	;volatile
  1458                           
  1459                           ;main.c: 18: UCONbits.USBEN = 0;
  1460  0009C4  966D               	bcf	3949,3,c	;volatile
  1461                           
  1462                           ;main.c: 19: UCFGbits.UTRDIS = 1;
  1463  0009C6  866F               	bsf	3951,3,c	;volatile
  1464                           
  1465                           ;main.c: 22: TRISAbits.RA1 = INPUT;
  1466  0009C8  8292               	bsf	3986,1,c	;volatile
  1467                           
  1468                           ;main.c: 23: TRISAbits.RA5 = INPUT;
  1469  0009CA  8A92               	bsf	3986,5,c	;volatile
  1470                           
  1471                           ;main.c: 24: TRISAbits.RA2 = OUTPUT;
  1472  0009CC  9492               	bcf	3986,2,c	;volatile
  1473                           
  1474                           ;main.c: 25: TRISAbits.RA3 = OUTPUT;
  1475  0009CE  9692               	bcf	3986,3,c	;volatile
  1476                           
  1477                           ;main.c: 26: TRISAbits.RA4 = OUTPUT;
  1478  0009D0  9892               	bcf	3986,4,c	;volatile
  1479                           
  1480                           ;main.c: 27: TRISBbits.RB5 = INPUT;
  1481  0009D2  8A93               	bsf	3987,5,c	;volatile
  1482                           
  1483                           ;main.c: 28: TRISBbits.RB4 = INPUT;
  1484  0009D4  8893               	bsf	3987,4,c	;volatile
  1485                           
  1486                           ;main.c: 29: TRISBbits.RB1 = INPUT;
  1487  0009D6  8293               	bsf	3987,1,c	;volatile
  1488                           
  1489                           ;main.c: 32: TRISBbits.RB3 = INPUT;
  1490  0009D8  8693               	bsf	3987,3,c	;volatile
  1491                           
  1492                           ;main.c: 33: TRISCbits.RC6 = INPUT;
  1493  0009DA  8C94               	bsf	3988,6,c	;volatile
  1494                           
  1495                           ;main.c: 34: TRISCbits.RC1 = OUTPUT;
  1496  0009DC  9294               	bcf	3988,1,c	;volatile
  1497                           
  1498                           ;main.c: 35: TRISCbits.RC2 = OUTPUT;
  1499  0009DE  9494               	bcf	3988,2,c	;volatile
  1500                           
  1501                           ;main.c: 36: TRISCbits.RC0 = OUTPUT;
  1502  0009E0  9094               	bcf	3988,0,c	;volatile
  1503                           
  1504                           ;main.c: 37: TRISAbits.RA0 = OUTPUT;
  1505  0009E2  9092               	bcf	3986,0,c	;volatile
  1506                           
  1507                           ;main.c: 40: T2CON = 0;
  1508  0009E4  0E00               	movlw	0
  1509  0009E6  6ECA               	movwf	4042,c	;volatile
  1510                           
  1511                           ;main.c: 41: T2CONbits.TOUTPS=11;
  1512  0009E8  50CA               	movf	4042,w,c	;volatile
  1513  0009EA  0B87               	andlw	-121
  1514  0009EC  0958               	iorlw	88
  1515  0009EE  6ECA               	movwf	4042,c	;volatile
  1516                           
  1517                           ;main.c: 42: T2CONbits.T2CKPS=1;
  1518  0009F0  50CA               	movf	4042,w,c	;volatile
  1519  0009F2  0BFC               	andlw	-4
  1520  0009F4  0901               	iorlw	1
  1521  0009F6  6ECA               	movwf	4042,c	;volatile
  1522                           
  1523                           ;main.c: 43: PR2=249;
  1524  0009F8  0EF9               	movlw	249
  1525  0009FA  6ECB               	movwf	4043,c	;volatile
  1526                           
  1527                           ;main.c: 44: T2CONbits.TMR2ON=1;
  1528  0009FC  84CA               	bsf	4042,2,c	;volatile
  1529                           
  1530                           ;main.c: 47: CCPR1L=0;
  1531  0009FE  0E00               	movlw	0
  1532  000A00  6EBE               	movwf	4030,c	;volatile
  1533                           
  1534                           ;main.c: 48: CCP1CONbits.DC1B=0;
  1535  000A02  0ECF               	movlw	-49
  1536  000A04  16BD               	andwf	4029,f,c	;volatile
  1537                           
  1538                           ;main.c: 49: CCP1CONbits.CCP1M=12;
  1539  000A06  50BD               	movf	4029,w,c	;volatile
  1540  000A08  0BF0               	andlw	-16
  1541  000A0A  090C               	iorlw	12
  1542  000A0C  6EBD               	movwf	4029,c	;volatile
  1543                           
  1544                           ;main.c: 50: CCPR2L=0;
  1545  000A0E  0E00               	movlw	0
  1546  000A10  6EBB               	movwf	4027,c	;volatile
  1547                           
  1548                           ;main.c: 51: CCP2CONbits.DC2B=0;
  1549  000A12  0ECF               	movlw	-49
  1550  000A14  16BA               	andwf	4026,f,c	;volatile
  1551                           
  1552                           ;main.c: 52: CCP2CONbits.CCP2M=12;
  1553  000A16  50BA               	movf	4026,w,c	;volatile
  1554  000A18  0BF0               	andlw	-16
  1555  000A1A  090C               	iorlw	12
  1556  000A1C  6EBA               	movwf	4026,c	;volatile
  1557                           
  1558                           ;main.c: 55: INTCON3=0;
  1559  000A1E  0E00               	movlw	0
  1560  000A20  6EF0               	movwf	intcon3,c	;volatile
  1561                           
  1562                           ;main.c: 56: PIE1=0;
  1563  000A22  0E00               	movlw	0
  1564  000A24  6E9D               	movwf	3997,c	;volatile
  1565                           
  1566                           ;main.c: 57: PIE2=0;
  1567  000A26  0E00               	movlw	0
  1568  000A28  6EA0               	movwf	4000,c	;volatile
  1569                           
  1570                           ;main.c: 58: RCONbits.IPEN=0;
  1571  000A2A  9ED0               	bcf	4048,7,c	;volatile
  1572                           
  1573                           ;main.c: 59: PIE1bits.TMR2IE=1;
  1574  000A2C  829D               	bsf	3997,1,c	;volatile
  1575                           
  1576                           ;main.c: 60: INTCONbits.PEIE_GIEL=1;
  1577  000A2E  8CF2               	bsf	intcon,6,c	;volatile
  1578                           
  1579                           ;main.c: 61: INTCONbits.GIE_GIEH=1;
  1580  000A30  8EF2               	bsf	intcon,7,c	;volatile
  1581                           
  1582                           ;main.c: 62: RCONbits.IPEN = 0;
  1583  000A32  9ED0               	bcf	4048,7,c	;volatile
  1584                           
  1585                           ;main.c: 63: INTCONbits.PEIE = 1;
  1586  000A34  8CF2               	bsf	intcon,6,c	;volatile
  1587                           
  1588                           ;main.c: 64: INTCONbits.GIE = 1;
  1589  000A36  8EF2               	bsf	intcon,7,c	;volatile
  1590                           
  1591                           ;main.c: 67: setMotores(0, 0);
  1592  000A38  0E00               	movlw	0
  1593  000A3A  6E3D               	movwf	setMotores@speedI+1,c
  1594  000A3C  0E00               	movlw	0
  1595  000A3E  6E3C               	movwf	setMotores@speedI,c
  1596  000A40  0E00               	movlw	0
  1597  000A42  6E3F               	movwf	setMotores@speedD+1,c
  1598  000A44  0E00               	movlw	0
  1599  000A46  6E3E               	movwf	setMotores@speedD,c
  1600  000A48  EC56  F002         	call	_setMotores	;wreg free
  1601                           
  1602                           ;main.c: 68: LATAbits.LA2 = 0;
  1603  000A4C  9489               	bcf	3977,2,c	;volatile
  1604                           
  1605                           ;main.c: 69: LATAbits.LA3 = 0;
  1606  000A4E  9689               	bcf	3977,3,c	;volatile
  1607                           
  1608                           ;main.c: 70: LATAbits.LA4 = 0;
  1609  000A50  9889               	bcf	3977,4,c	;volatile
  1610  000A52  0012               	return		;funcret
  1611  000A54                     __end_of_init:
  1612                           	opt stack 0
  1613                           tblptru	equ	0xFF8
  1614                           tblptrh	equ	0xFF7
  1615                           tblptrl	equ	0xFF6
  1616                           tablat	equ	0xFF5
  1617                           intcon	equ	0xFF2
  1618                           intcon3	equ	0xFF0
  1619                           postinc0	equ	0xFEE
  1620                           wreg	equ	0xFE8
  1621                           status	equ	0xFD8
  1622                           
  1623 ;; *************** function _setMotores *****************
  1624 ;; Defined at:
  1625 ;;		line 284 in file "main.c"
  1626 ;; Parameters:    Size  Location     Type
  1627 ;;  speedI          2   59[COMRAM] int 
  1628 ;;  speedD          2   61[COMRAM] int 
  1629 ;; Auto vars:     Size  Location     Type
  1630 ;;  dutyD           2    6[BANK0 ] unsigned int 
  1631 ;;  dutyI           2    4[BANK0 ] unsigned int 
  1632 ;; Return value:  Size  Location     Type
  1633 ;;                  1    wreg      void 
  1634 ;; Registers used:
  1635 ;;		wreg, status,2, status,0, cstack
  1636 ;; Tracked objects:
  1637 ;;		On entry : 0/0
  1638 ;;		On exit  : 0/0
  1639 ;;		Unchanged: 0/0
  1640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1641 ;;      Params:         4       0       0       0       0       0       0       0       0
  1642 ;;      Locals:         0       8       0       0       0       0       0       0       0
  1643 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1644 ;;      Totals:         6       8       0       0       0       0       0       0       0
  1645 ;;Total ram usage:       14 bytes
  1646 ;; Hardware stack levels used:    1
  1647 ;; Hardware stack levels required when called:    3
  1648 ;; This function calls:
  1649 ;;		___ftmul
  1650 ;;		___fttol
  1651 ;;		___lwtoft
  1652 ;; This function is called by:
  1653 ;;		_init
  1654 ;;		_loop
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           	psect	text4
  1659  0004AC                     __ptext4:
  1660                           	opt stack 0
  1661  0004AC                     _setMotores:
  1662                           	opt stack 26
  1663                           
  1664                           ;main.c: 285: speedD = -speedD;
  1665                           
  1666                           ;incstack = 0
  1667  0004AC  6C3E               	negf	setMotores@speedD,c
  1668  0004AE  1E3F               	comf	setMotores@speedD+1,f,c
  1669  0004B0  B0D8               	btfsc	status,0,c
  1670  0004B2  2A3F               	incf	setMotores@speedD+1,f,c
  1671                           
  1672                           ;main.c: 287: speedI = (speedI > 1000 ? 1000 : (speedI < -1000 ? -1000 : speedI));
  1673  0004B4  BE3D               	btfsc	setMotores@speedI+1,7,c
  1674  0004B6  D006               	goto	u1820
  1675  0004B8  0EE9               	movlw	233
  1676  0004BA  5C3C               	subwf	setMotores@speedI,w,c
  1677  0004BC  0E03               	movlw	3
  1678  0004BE  583D               	subwfb	setMotores@speedI+1,w,c
  1679  0004C0  B0D8               	btfsc	status,0,c
  1680  0004C2  D017               	goto	l132
  1681  0004C4                     u1820:
  1682  0004C4  AE3D               	btfss	setMotores@speedI+1,7,c
  1683  0004C6  D006               	goto	u1830
  1684  0004C8  0E18               	movlw	24
  1685  0004CA  5C3C               	subwf	setMotores@speedI,w,c
  1686  0004CC  0EFC               	movlw	252
  1687  0004CE  583D               	subwfb	setMotores@speedI+1,w,c
  1688  0004D0  A0D8               	btfss	status,0,c
  1689  0004D2  D005               	goto	l136
  1690  0004D4                     u1830:
  1691  0004D4  C03C  F060         	movff	setMotores@speedI,_setMotores$855
  1692  0004D8  C03D  F061         	movff	setMotores@speedI+1,_setMotores$855+1
  1693  0004DC  D005               	goto	l138
  1694  0004DE                     l136:
  1695  0004DE  0EFC               	movlw	252
  1696  0004E0  0100               	movlb	0	; () banked
  1697  0004E2  6F61               	movwf	(_setMotores$855+1)& (0+255),b
  1698  0004E4  0E18               	movlw	24
  1699  0004E6  6F60               	movwf	_setMotores$855& (0+255),b
  1700  0004E8                     l138:
  1701                           
  1702                           ; BSR set to: 0
  1703  0004E8  C060  F03C         	movff	_setMotores$855,setMotores@speedI
  1704  0004EC  C061  F03D         	movff	_setMotores$855+1,setMotores@speedI+1
  1705  0004F0  D004               	goto	l134
  1706  0004F2                     l132:
  1707  0004F2  0E03               	movlw	3
  1708  0004F4  6E3D               	movwf	setMotores@speedI+1,c
  1709  0004F6  0EE8               	movlw	232
  1710  0004F8  6E3C               	movwf	setMotores@speedI,c
  1711  0004FA                     l134:
  1712                           
  1713                           ;main.c: 288: speedD = (speedD > 1000 ? 1000 : (speedD < -1000 ? -1000 : speedD));
  1714  0004FA  BE3F               	btfsc	setMotores@speedD+1,7,c
  1715  0004FC  D006               	goto	u1840
  1716  0004FE  0EE9               	movlw	233
  1717  000500  5C3E               	subwf	setMotores@speedD,w,c
  1718  000502  0E03               	movlw	3
  1719  000504  583F               	subwfb	setMotores@speedD+1,w,c
  1720  000506  B0D8               	btfsc	status,0,c
  1721  000508  D017               	goto	l140
  1722  00050A                     u1840:
  1723  00050A  AE3F               	btfss	setMotores@speedD+1,7,c
  1724  00050C  D006               	goto	u1850
  1725  00050E  0E18               	movlw	24
  1726  000510  5C3E               	subwf	setMotores@speedD,w,c
  1727  000512  0EFC               	movlw	252
  1728  000514  583F               	subwfb	setMotores@speedD+1,w,c
  1729  000516  A0D8               	btfss	status,0,c
  1730  000518  D005               	goto	l144
  1731  00051A                     u1850:
  1732  00051A  C03E  F062         	movff	setMotores@speedD,_setMotores$856
  1733  00051E  C03F  F063         	movff	setMotores@speedD+1,_setMotores$856+1
  1734  000522  D005               	goto	l146
  1735  000524                     l144:
  1736  000524  0EFC               	movlw	252
  1737  000526  0100               	movlb	0	; () banked
  1738  000528  6F63               	movwf	(_setMotores$856+1)& (0+255),b
  1739  00052A  0E18               	movlw	24
  1740  00052C  6F62               	movwf	_setMotores$856& (0+255),b
  1741  00052E                     l146:
  1742                           
  1743                           ; BSR set to: 0
  1744  00052E  C062  F03E         	movff	_setMotores$856,setMotores@speedD
  1745  000532  C063  F03F         	movff	_setMotores$856+1,setMotores@speedD+1
  1746  000536  D004               	goto	l142
  1747  000538                     l140:
  1748  000538  0E03               	movlw	3
  1749  00053A  6E3F               	movwf	setMotores@speedD+1,c
  1750  00053C  0EE8               	movlw	232
  1751  00053E  6E3E               	movwf	setMotores@speedD,c
  1752  000540                     l142:
  1753                           
  1754                           ;main.c: 290: LATAbits.LA0 = (unsigned)(speedI < 0);
  1755  000540  AE3D               	btfss	setMotores@speedI+1,7,c
  1756  000542  D003               	goto	u1860
  1757  000544  6A40               	clrf	??_setMotores& (0+255),c
  1758  000546  2A40               	incf	??_setMotores& (0+255),f,c
  1759  000548  D001               	goto	u1878
  1760  00054A                     u1860:
  1761  00054A  6A40               	clrf	??_setMotores& (0+255),c
  1762  00054C                     u1878:
  1763  00054C  5089               	movf	3977,w,c	;volatile
  1764  00054E  1840               	xorwf	??_setMotores,w,c
  1765  000550  0BFE               	andlw	-2
  1766  000552  1840               	xorwf	??_setMotores,w,c
  1767  000554  6E89               	movwf	3977,c	;volatile
  1768                           
  1769                           ;main.c: 291: LATCbits.LC0 = (unsigned)(speedD < 0);
  1770  000556  AE3F               	btfss	setMotores@speedD+1,7,c
  1771  000558  D003               	goto	u1880
  1772  00055A  6A40               	clrf	??_setMotores& (0+255),c
  1773  00055C  2A40               	incf	??_setMotores& (0+255),f,c
  1774  00055E  D001               	goto	u1898
  1775  000560                     u1880:
  1776  000560  6A40               	clrf	??_setMotores& (0+255),c
  1777  000562                     u1898:
  1778  000562  508B               	movf	3979,w,c	;volatile
  1779  000564  1840               	xorwf	??_setMotores,w,c
  1780  000566  0BFE               	andlw	-2
  1781  000568  1840               	xorwf	??_setMotores,w,c
  1782  00056A  6E8B               	movwf	3979,c	;volatile
  1783                           
  1784                           ;main.c: 293: unsigned int dutyI = (unsigned)(speedI < 0 ? 1000+speedI : speedI);
  1785  00056C  BE3D               	btfsc	setMotores@speedI+1,7,c
  1786  00056E  D005               	goto	l148
  1787  000570  C03C  F064         	movff	setMotores@speedI,setMotores@dutyI
  1788  000574  C03D  F065         	movff	setMotores@speedI+1,setMotores@dutyI+1
  1789  000578  D007               	goto	l150
  1790  00057A                     l148:
  1791  00057A  0EE8               	movlw	232
  1792  00057C  243C               	addwf	setMotores@speedI,w,c
  1793  00057E  0100               	movlb	0	; () banked
  1794  000580  6F64               	movwf	setMotores@dutyI& (0+255),b
  1795  000582  0E03               	movlw	3
  1796  000584  203D               	addwfc	setMotores@speedI+1,w,c
  1797  000586  6F65               	movwf	(setMotores@dutyI+1)& (0+255),b
  1798  000588                     l150:
  1799                           
  1800                           ;main.c: 294: unsigned int dutyD = (unsigned)(speedD < 0 ? 1000+speedD : speedD);
  1801  000588  BE3F               	btfsc	setMotores@speedD+1,7,c
  1802  00058A  D005               	goto	l152
  1803  00058C  C03E  F066         	movff	setMotores@speedD,setMotores@dutyD
  1804  000590  C03F  F067         	movff	setMotores@speedD+1,setMotores@dutyD+1
  1805  000594  D007               	goto	l154
  1806  000596                     l152:
  1807  000596  0EE8               	movlw	232
  1808  000598  243E               	addwf	setMotores@speedD,w,c
  1809  00059A  0100               	movlb	0	; () banked
  1810  00059C  6F66               	movwf	setMotores@dutyD& (0+255),b
  1811  00059E  0E03               	movlw	3
  1812  0005A0  203F               	addwfc	setMotores@speedD+1,w,c
  1813  0005A2  6F67               	movwf	(setMotores@dutyD+1)& (0+255),b
  1814  0005A4                     l154:
  1815                           
  1816                           ;main.c: 296: dutyI *= 1.023;
  1817                           
  1818                           ; BSR set to: 0
  1819  0005A4  0EF2               	movlw	242
  1820  0005A6  6E21               	movwf	___ftmul@f2,c
  1821  0005A8  0E82               	movlw	130
  1822  0005AA  6E22               	movwf	___ftmul@f2+1,c
  1823  0005AC  0E3F               	movlw	63
  1824  0005AE  6E23               	movwf	___ftmul@f2+2,c
  1825  0005B0  C064  F01B         	movff	setMotores@dutyI,___lwtoft@c
  1826  0005B4  C065  F01C         	movff	setMotores@dutyI+1,___lwtoft@c+1
  1827  0005B8  EC40  F005         	call	___lwtoft	;wreg free
  1828  0005BC  C01B  F01E         	movff	?___lwtoft,___ftmul@f1
  1829  0005C0  C01C  F01F         	movff	?___lwtoft+1,___ftmul@f1+1
  1830  0005C4  C01D  F020         	movff	?___lwtoft+2,___ftmul@f1+2
  1831  0005C8  ECB9  F003         	call	___ftmul	;wreg free
  1832  0005CC  C01E  F02D         	movff	?___ftmul,___fttol@f1
  1833  0005D0  C01F  F02E         	movff	?___ftmul+1,___fttol@f1+1
  1834  0005D4  C020  F02F         	movff	?___ftmul+2,___fttol@f1+2
  1835  0005D8  EC3F  F003         	call	___fttol	;wreg free
  1836  0005DC  C02D  F064         	movff	?___fttol,setMotores@dutyI
  1837  0005E0  C02E  F065         	movff	?___fttol+1,setMotores@dutyI+1
  1838                           
  1839                           ;main.c: 297: dutyD *= 1.023;
  1840  0005E4  0EF2               	movlw	242
  1841  0005E6  6E21               	movwf	___ftmul@f2,c
  1842  0005E8  0E82               	movlw	130
  1843  0005EA  6E22               	movwf	___ftmul@f2+1,c
  1844  0005EC  0E3F               	movlw	63
  1845  0005EE  6E23               	movwf	___ftmul@f2+2,c
  1846  0005F0  C066  F01B         	movff	setMotores@dutyD,___lwtoft@c
  1847  0005F4  C067  F01C         	movff	setMotores@dutyD+1,___lwtoft@c+1
  1848  0005F8  EC40  F005         	call	___lwtoft	;wreg free
  1849  0005FC  C01B  F01E         	movff	?___lwtoft,___ftmul@f1
  1850  000600  C01C  F01F         	movff	?___lwtoft+1,___ftmul@f1+1
  1851  000604  C01D  F020         	movff	?___lwtoft+2,___ftmul@f1+2
  1852  000608  ECB9  F003         	call	___ftmul	;wreg free
  1853  00060C  C01E  F02D         	movff	?___ftmul,___fttol@f1
  1854  000610  C01F  F02E         	movff	?___ftmul+1,___fttol@f1+1
  1855  000614  C020  F02F         	movff	?___ftmul+2,___fttol@f1+2
  1856  000618  EC3F  F003         	call	___fttol	;wreg free
  1857  00061C  C02D  F066         	movff	?___fttol,setMotores@dutyD
  1858  000620  C02E  F067         	movff	?___fttol+1,setMotores@dutyD+1
  1859                           
  1860                           ;main.c: 299: CCPR1L = dutyI / 4;
  1861  000624  C064  F040         	movff	setMotores@dutyI,??_setMotores
  1862  000628  C065  F041         	movff	setMotores@dutyI+1,??_setMotores+1
  1863  00062C  90D8               	bcf	status,0,c
  1864  00062E  3241               	rrcf	??_setMotores+1,f,c
  1865  000630  3240               	rrcf	??_setMotores,f,c
  1866  000632  90D8               	bcf	status,0,c
  1867  000634  3241               	rrcf	??_setMotores+1,f,c
  1868  000636  3240               	rrcf	??_setMotores,f,c
  1869  000638  5040               	movf	??_setMotores,w,c
  1870  00063A  6EBE               	movwf	4030,c	;volatile
  1871                           
  1872                           ;main.c: 300: CCPR2L = dutyD / 4;
  1873  00063C  C066  F040         	movff	setMotores@dutyD,??_setMotores
  1874  000640  C067  F041         	movff	setMotores@dutyD+1,??_setMotores+1
  1875  000644  90D8               	bcf	status,0,c
  1876  000646  3241               	rrcf	??_setMotores+1,f,c
  1877  000648  3240               	rrcf	??_setMotores,f,c
  1878  00064A  90D8               	bcf	status,0,c
  1879  00064C  3241               	rrcf	??_setMotores+1,f,c
  1880  00064E  3240               	rrcf	??_setMotores,f,c
  1881  000650  5040               	movf	??_setMotores,w,c
  1882  000652  6EBB               	movwf	4027,c	;volatile
  1883                           
  1884                           ;main.c: 301: CCP1CONbits.DC1B = dutyI % 4;
  1885  000654  C064  F040         	movff	setMotores@dutyI,??_setMotores
  1886  000658  0E03               	movlw	3
  1887  00065A  1640               	andwf	??_setMotores,f,c
  1888  00065C  3A40               	swapf	??_setMotores,f,c
  1889  00065E  50BD               	movf	4029,w,c	;volatile
  1890  000660  1840               	xorwf	??_setMotores,w,c
  1891  000662  0BCF               	andlw	-49
  1892  000664  1840               	xorwf	??_setMotores,w,c
  1893  000666  6EBD               	movwf	4029,c	;volatile
  1894                           
  1895                           ;main.c: 302: CCP2CONbits.DC2B = dutyD % 4;
  1896  000668  C066  F040         	movff	setMotores@dutyD,??_setMotores
  1897  00066C  0E03               	movlw	3
  1898  00066E  1640               	andwf	??_setMotores,f,c
  1899  000670  3A40               	swapf	??_setMotores,f,c
  1900  000672  50BA               	movf	4026,w,c	;volatile
  1901  000674  1840               	xorwf	??_setMotores,w,c
  1902  000676  0BCF               	andlw	-49
  1903  000678  1840               	xorwf	??_setMotores,w,c
  1904  00067A  6EBA               	movwf	4026,c	;volatile
  1905  00067C  0012               	return		;funcret
  1906  00067E                     __end_of_setMotores:
  1907                           	opt stack 0
  1908                           tblptru	equ	0xFF8
  1909                           tblptrh	equ	0xFF7
  1910                           tblptrl	equ	0xFF6
  1911                           tablat	equ	0xFF5
  1912                           intcon	equ	0xFF2
  1913                           intcon3	equ	0xFF0
  1914                           postinc0	equ	0xFEE
  1915                           wreg	equ	0xFE8
  1916                           status	equ	0xFD8
  1917                           
  1918 ;; *************** function ___lwtoft *****************
  1919 ;; Defined at:
  1920 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  1921 ;; Parameters:    Size  Location     Type
  1922 ;;  c               2   26[COMRAM] unsigned int 
  1923 ;; Auto vars:     Size  Location     Type
  1924 ;;		None
  1925 ;; Return value:  Size  Location     Type
  1926 ;;                  3   26[COMRAM] float 
  1927 ;; Registers used:
  1928 ;;		wreg, status,2, status,0, cstack
  1929 ;; Tracked objects:
  1930 ;;		On entry : 0/0
  1931 ;;		On exit  : 0/0
  1932 ;;		Unchanged: 0/0
  1933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1934 ;;      Params:         3       0       0       0       0       0       0       0       0
  1935 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1936 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1937 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1938 ;;Total ram usage:        3 bytes
  1939 ;; Hardware stack levels used:    1
  1940 ;; Hardware stack levels required when called:    2
  1941 ;; This function calls:
  1942 ;;		___ftpack
  1943 ;; This function is called by:
  1944 ;;		_setMotores
  1945 ;; This function uses a non-reentrant model
  1946 ;;
  1947                           
  1948                           	psect	text5
  1949  000A80                     __ptext5:
  1950                           	opt stack 0
  1951  000A80                     ___lwtoft:
  1952                           	opt stack 26
  1953                           
  1954                           ;incstack = 0
  1955  000A80  C01B  F013         	movff	___lwtoft@c,___ftpack@arg
  1956  000A84  C01C  F014         	movff	___lwtoft@c+1,___ftpack@arg+1
  1957  000A88  6A15               	clrf	___ftpack@arg+2,c
  1958  000A8A  0E8E               	movlw	142
  1959  000A8C  6E16               	movwf	___ftpack@exp,c
  1960  000A8E  0E00               	movlw	0
  1961  000A90  6E17               	movwf	___ftpack@sign,c
  1962  000A92  EC33  F004         	call	___ftpack	;wreg free
  1963  000A96  C013  F01B         	movff	?___ftpack,?___lwtoft
  1964  000A9A  C014  F01C         	movff	?___ftpack+1,?___lwtoft+1
  1965  000A9E  C015  F01D         	movff	?___ftpack+2,?___lwtoft+2
  1966  000AA2  0012               	return	
  1967  000AA4                     __end_of___lwtoft:
  1968                           	opt stack 0
  1969                           tblptru	equ	0xFF8
  1970                           tblptrh	equ	0xFF7
  1971                           tblptrl	equ	0xFF6
  1972                           tablat	equ	0xFF5
  1973                           intcon	equ	0xFF2
  1974                           intcon3	equ	0xFF0
  1975                           postinc0	equ	0xFEE
  1976                           wreg	equ	0xFE8
  1977                           status	equ	0xFD8
  1978                           
  1979 ;; *************** function ___fttol *****************
  1980 ;; Defined at:
  1981 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;  f1              3   44[COMRAM] float 
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;  lval            4   54[COMRAM] unsigned long 
  1986 ;;  exp1            1   58[COMRAM] unsigned char 
  1987 ;;  sign1           1   53[COMRAM] unsigned char 
  1988 ;; Return value:  Size  Location     Type
  1989 ;;                  4   44[COMRAM] long 
  1990 ;; Registers used:
  1991 ;;		wreg, status,2, status,0
  1992 ;; Tracked objects:
  1993 ;;		On entry : 0/0
  1994 ;;		On exit  : 0/0
  1995 ;;		Unchanged: 0/0
  1996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1997 ;;      Params:         4       0       0       0       0       0       0       0       0
  1998 ;;      Locals:         6       0       0       0       0       0       0       0       0
  1999 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2000 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2001 ;;Total ram usage:       15 bytes
  2002 ;; Hardware stack levels used:    1
  2003 ;; Hardware stack levels required when called:    1
  2004 ;; This function calls:
  2005 ;;		Nothing
  2006 ;; This function is called by:
  2007 ;;		_setMotores
  2008 ;; This function uses a non-reentrant model
  2009 ;;
  2010                           
  2011                           	psect	text6
  2012  00067E                     __ptext6:
  2013                           	opt stack 0
  2014  00067E                     ___fttol:
  2015                           	opt stack 27
  2016                           
  2017                           ;incstack = 0
  2018  00067E  C02F  F031         	movff	___fttol@f1+2,??___fttol
  2019  000682  6A32               	clrf	(??___fttol+1)& (0+255),c
  2020  000684  6A33               	clrf	(??___fttol+2)& (0+255),c
  2021  000686  342E               	rlcf	___fttol@f1+1,w,c
  2022  000688  3631               	rlcf	??___fttol& (0+255),f,c
  2023  00068A  E301               	bnc	u1741
  2024  00068C  8032               	bsf	(??___fttol+1)& (0+255),0,c
  2025  00068E                     u1741:
  2026  00068E  5031               	movf	??___fttol,w,c
  2027  000690  6E3B               	movwf	___fttol@exp1,c
  2028  000692  503B               	movf	___fttol@exp1,w,c
  2029  000694  A4D8               	btfss	status,2,c
  2030  000696  D009               	goto	l489
  2031  000698  0E00               	movlw	0
  2032  00069A  6E2D               	movwf	?___fttol,c
  2033  00069C  0E00               	movlw	0
  2034  00069E  6E2E               	movwf	?___fttol+1,c
  2035  0006A0  0E00               	movlw	0
  2036  0006A2  6E2F               	movwf	?___fttol+2,c
  2037  0006A4  0E00               	movlw	0
  2038  0006A6  6E30               	movwf	?___fttol+3,c
  2039  0006A8  0012               	return	
  2040  0006AA                     l489:
  2041  0006AA  0E17               	movlw	23
  2042  0006AC  6E31               	movwf	??___fttol& (0+255),c
  2043  0006AE  C02D  F032         	movff	___fttol@f1,??___fttol+1
  2044  0006B2  C02E  F033         	movff	___fttol@f1+1,??___fttol+2
  2045  0006B6  C02F  F034         	movff	___fttol@f1+2,??___fttol+3
  2046  0006BA  2831               	incf	??___fttol,w,c
  2047  0006BC  6E35               	movwf	(??___fttol+4)& (0+255),c
  2048  0006BE  D004               	goto	u1760
  2049  0006C0                     u1765:
  2050  0006C0  90D8               	bcf	status,0,c
  2051  0006C2  3234               	rrcf	??___fttol+3,f,c
  2052  0006C4  3233               	rrcf	??___fttol+2,f,c
  2053  0006C6  3232               	rrcf	??___fttol+1,f,c
  2054  0006C8                     u1760:
  2055  0006C8  2E35               	decfsz	(??___fttol+4)& (0+255),f,c
  2056  0006CA  D7FA               	goto	u1765
  2057  0006CC  5032               	movf	??___fttol+1,w,c
  2058  0006CE  6E36               	movwf	___fttol@sign1,c
  2059  0006D0  8E2E               	bsf	___fttol@f1+1,7,c
  2060  0006D2  0EFF               	movlw	255
  2061  0006D4  162D               	andwf	___fttol@f1,f,c
  2062  0006D6  0EFF               	movlw	255
  2063  0006D8  162E               	andwf	___fttol@f1+1,f,c
  2064  0006DA  0E00               	movlw	0
  2065  0006DC  162F               	andwf	___fttol@f1+2,f,c
  2066  0006DE  502D               	movf	___fttol@f1,w,c
  2067  0006E0  6E37               	movwf	___fttol@lval,c
  2068  0006E2  502E               	movf	___fttol@f1+1,w,c
  2069  0006E4  6E38               	movwf	___fttol@lval+1,c
  2070  0006E6  502F               	movf	___fttol@f1+2,w,c
  2071  0006E8  6E39               	movwf	___fttol@lval+2,c
  2072  0006EA  6A3A               	clrf	___fttol@lval+3,c
  2073  0006EC  0E8E               	movlw	142
  2074  0006EE  5E3B               	subwf	___fttol@exp1,f,c
  2075  0006F0  AE3B               	btfss	___fttol@exp1,7,c
  2076  0006F2  D016               	goto	l491
  2077  0006F4  503B               	movf	___fttol@exp1,w,c
  2078  0006F6  0A80               	xorlw	128
  2079  0006F8  0F8F               	addlw	143
  2080  0006FA  B0D8               	btfsc	status,0,c
  2081  0006FC  D009               	goto	l492
  2082  0006FE  0E00               	movlw	0
  2083  000700  6E2D               	movwf	?___fttol,c
  2084  000702  0E00               	movlw	0
  2085  000704  6E2E               	movwf	?___fttol+1,c
  2086  000706  0E00               	movlw	0
  2087  000708  6E2F               	movwf	?___fttol+2,c
  2088  00070A  0E00               	movlw	0
  2089  00070C  6E30               	movwf	?___fttol+3,c
  2090  00070E  0012               	return	
  2091  000710                     l492:
  2092  000710  90D8               	bcf	status,0,c
  2093  000712  323A               	rrcf	___fttol@lval+3,f,c
  2094  000714  3239               	rrcf	___fttol@lval+2,f,c
  2095  000716  3238               	rrcf	___fttol@lval+1,f,c
  2096  000718  3237               	rrcf	___fttol@lval,f,c
  2097  00071A  3E3B               	incfsz	___fttol@exp1,f,c
  2098  00071C  D7F9               	goto	l492
  2099  00071E  D015               	goto	u1800
  2100  000720                     l491:
  2101  000720  0E17               	movlw	23
  2102  000722  643B               	cpfsgt	___fttol@exp1,c
  2103  000724  D00F               	goto	l497
  2104  000726  0E00               	movlw	0
  2105  000728  6E2D               	movwf	?___fttol,c
  2106  00072A  0E00               	movlw	0
  2107  00072C  6E2E               	movwf	?___fttol+1,c
  2108  00072E  0E00               	movlw	0
  2109  000730  6E2F               	movwf	?___fttol+2,c
  2110  000732  0E00               	movlw	0
  2111  000734  6E30               	movwf	?___fttol+3,c
  2112  000736  0012               	return	
  2113  000738  90D8               	bcf	status,0,c
  2114  00073A  3637               	rlcf	___fttol@lval,f,c
  2115  00073C  3638               	rlcf	___fttol@lval+1,f,c
  2116  00073E  3639               	rlcf	___fttol@lval+2,f,c
  2117  000740  363A               	rlcf	___fttol@lval+3,f,c
  2118  000742  063B               	decf	___fttol@exp1,f,c
  2119  000744                     l497:
  2120  000744  503B               	movf	___fttol@exp1,w,c
  2121  000746  A4D8               	btfss	status,2,c
  2122  000748  D7F7               	goto	l498
  2123  00074A                     u1800:
  2124  00074A  5036               	movf	___fttol@sign1,w,c
  2125  00074C  B4D8               	btfsc	status,2,c
  2126  00074E  D008               	goto	l500
  2127  000750  1E3A               	comf	___fttol@lval+3,f,c
  2128  000752  1E39               	comf	___fttol@lval+2,f,c
  2129  000754  1E38               	comf	___fttol@lval+1,f,c
  2130  000756  6C37               	negf	___fttol@lval,c
  2131  000758  0E00               	movlw	0
  2132  00075A  2238               	addwfc	___fttol@lval+1,f,c
  2133  00075C  2239               	addwfc	___fttol@lval+2,f,c
  2134  00075E  223A               	addwfc	___fttol@lval+3,f,c
  2135  000760                     l500:
  2136  000760  C037  F02D         	movff	___fttol@lval,?___fttol
  2137  000764  C038  F02E         	movff	___fttol@lval+1,?___fttol+1
  2138  000768  C039  F02F         	movff	___fttol@lval+2,?___fttol+2
  2139  00076C  C03A  F030         	movff	___fttol@lval+3,?___fttol+3
  2140  000770  0012               	return	
  2141  000772                     __end_of___fttol:
  2142                           	opt stack 0
  2143                           tblptru	equ	0xFF8
  2144                           tblptrh	equ	0xFF7
  2145                           tblptrl	equ	0xFF6
  2146                           tablat	equ	0xFF5
  2147                           intcon	equ	0xFF2
  2148                           intcon3	equ	0xFF0
  2149                           postinc0	equ	0xFEE
  2150                           wreg	equ	0xFE8
  2151                           status	equ	0xFD8
  2152                           
  2153 ;; *************** function ___ftmul *****************
  2154 ;; Defined at:
  2155 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  2156 ;; Parameters:    Size  Location     Type
  2157 ;;  f1              3   29[COMRAM] float 
  2158 ;;  f2              3   32[COMRAM] float 
  2159 ;; Auto vars:     Size  Location     Type
  2160 ;;  f3_as_produc    3   39[COMRAM] unsigned um
  2161 ;;  sign            1   43[COMRAM] unsigned char 
  2162 ;;  cntr            1   42[COMRAM] unsigned char 
  2163 ;;  exp             1   38[COMRAM] unsigned char 
  2164 ;; Return value:  Size  Location     Type
  2165 ;;                  3   29[COMRAM] float 
  2166 ;; Registers used:
  2167 ;;		wreg, status,2, status,0, cstack
  2168 ;; Tracked objects:
  2169 ;;		On entry : 0/0
  2170 ;;		On exit  : 0/0
  2171 ;;		Unchanged: 0/0
  2172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2173 ;;      Params:         6       0       0       0       0       0       0       0       0
  2174 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2175 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2176 ;;      Totals:        15       0       0       0       0       0       0       0       0
  2177 ;;Total ram usage:       15 bytes
  2178 ;; Hardware stack levels used:    1
  2179 ;; Hardware stack levels required when called:    2
  2180 ;; This function calls:
  2181 ;;		___ftpack
  2182 ;; This function is called by:
  2183 ;;		_setMotores
  2184 ;; This function uses a non-reentrant model
  2185 ;;
  2186                           
  2187                           	psect	text7
  2188  000772                     __ptext7:
  2189                           	opt stack 0
  2190  000772                     ___ftmul:
  2191                           	opt stack 26
  2192                           
  2193                           ;incstack = 0
  2194  000772  C020  F024         	movff	___ftmul@f1+2,??___ftmul
  2195  000776  6A25               	clrf	(??___ftmul+1)& (0+255),c
  2196  000778  6A26               	clrf	(??___ftmul+2)& (0+255),c
  2197  00077A  341F               	rlcf	___ftmul@f1+1,w,c
  2198  00077C  3624               	rlcf	??___ftmul& (0+255),f,c
  2199  00077E  E301               	bnc	u1681
  2200  000780  8025               	bsf	(??___ftmul+1)& (0+255),0,c
  2201  000782                     u1681:
  2202  000782  5024               	movf	??___ftmul,w,c
  2203  000784  6E27               	movwf	___ftmul@exp,c
  2204  000786  5027               	movf	___ftmul@exp,w,c
  2205  000788  A4D8               	btfss	status,2,c
  2206  00078A  D007               	goto	l468
  2207  00078C  0E00               	movlw	0
  2208  00078E  6E1E               	movwf	?___ftmul,c
  2209  000790  0E00               	movlw	0
  2210  000792  6E1F               	movwf	?___ftmul+1,c
  2211  000794  0E00               	movlw	0
  2212  000796  6E20               	movwf	?___ftmul+2,c
  2213  000798  0012               	return	
  2214  00079A                     l468:
  2215  00079A  C023  F024         	movff	___ftmul@f2+2,??___ftmul
  2216  00079E  6A25               	clrf	(??___ftmul+1)& (0+255),c
  2217  0007A0  6A26               	clrf	(??___ftmul+2)& (0+255),c
  2218  0007A2  3422               	rlcf	___ftmul@f2+1,w,c
  2219  0007A4  3624               	rlcf	??___ftmul& (0+255),f,c
  2220  0007A6  E301               	bnc	u1701
  2221  0007A8  8025               	bsf	(??___ftmul+1)& (0+255),0,c
  2222  0007AA                     u1701:
  2223  0007AA  5024               	movf	??___ftmul,w,c
  2224  0007AC  6E2C               	movwf	___ftmul@sign,c
  2225  0007AE  502C               	movf	___ftmul@sign,w,c
  2226  0007B0  A4D8               	btfss	status,2,c
  2227  0007B2  D007               	goto	l470
  2228  0007B4  0E00               	movlw	0
  2229  0007B6  6E1E               	movwf	?___ftmul,c
  2230  0007B8  0E00               	movlw	0
  2231  0007BA  6E1F               	movwf	?___ftmul+1,c
  2232  0007BC  0E00               	movlw	0
  2233  0007BE  6E20               	movwf	?___ftmul+2,c
  2234  0007C0  0012               	return	
  2235  0007C2                     l470:
  2236  0007C2  502C               	movf	___ftmul@sign,w,c
  2237  0007C4  0F7B               	addlw	123
  2238  0007C6  2627               	addwf	___ftmul@exp,f,c
  2239  0007C8  C020  F02C         	movff	___ftmul@f1+2,___ftmul@sign
  2240  0007CC  5023               	movf	___ftmul@f2+2,w,c
  2241  0007CE  1A2C               	xorwf	___ftmul@sign,f,c
  2242  0007D0  0E80               	movlw	128
  2243  0007D2  162C               	andwf	___ftmul@sign,f,c
  2244  0007D4  8E1F               	bsf	___ftmul@f1+1,7,c
  2245  0007D6  8E22               	bsf	___ftmul@f2+1,7,c
  2246  0007D8  0EFF               	movlw	255
  2247  0007DA  1621               	andwf	___ftmul@f2,f,c
  2248  0007DC  0EFF               	movlw	255
  2249  0007DE  1622               	andwf	___ftmul@f2+1,f,c
  2250  0007E0  0E00               	movlw	0
  2251  0007E2  1623               	andwf	___ftmul@f2+2,f,c
  2252  0007E4  0E00               	movlw	0
  2253  0007E6  6E28               	movwf	___ftmul@f3_as_product,c
  2254  0007E8  0E00               	movlw	0
  2255  0007EA  6E29               	movwf	___ftmul@f3_as_product+1,c
  2256  0007EC  0E00               	movlw	0
  2257  0007EE  6E2A               	movwf	___ftmul@f3_as_product+2,c
  2258  0007F0  0E07               	movlw	7
  2259  0007F2  6E2B               	movwf	___ftmul@cntr,c
  2260  0007F4  A01E               	btfss	___ftmul@f1,0,c
  2261  0007F6  D006               	goto	l472
  2262  0007F8  5021               	movf	___ftmul@f2,w,c
  2263  0007FA  2628               	addwf	___ftmul@f3_as_product,f,c
  2264  0007FC  5022               	movf	___ftmul@f2+1,w,c
  2265  0007FE  2229               	addwfc	___ftmul@f3_as_product+1,f,c
  2266  000800  5023               	movf	___ftmul@f2+2,w,c
  2267  000802  222A               	addwfc	___ftmul@f3_as_product+2,f,c
  2268  000804                     l472:
  2269  000804  90D8               	bcf	status,0,c
  2270  000806  3220               	rrcf	___ftmul@f1+2,f,c
  2271  000808  321F               	rrcf	___ftmul@f1+1,f,c
  2272  00080A  321E               	rrcf	___ftmul@f1,f,c
  2273  00080C  90D8               	bcf	status,0,c
  2274  00080E  3621               	rlcf	___ftmul@f2,f,c
  2275  000810  3622               	rlcf	___ftmul@f2+1,f,c
  2276  000812  3623               	rlcf	___ftmul@f2+2,f,c
  2277  000814  2E2B               	decfsz	___ftmul@cntr,f,c
  2278  000816  D7EE               	goto	l471
  2279  000818  0E09               	movlw	9
  2280  00081A  6E2B               	movwf	___ftmul@cntr,c
  2281  00081C  A01E               	btfss	___ftmul@f1,0,c
  2282  00081E  D006               	goto	l475
  2283  000820  5021               	movf	___ftmul@f2,w,c
  2284  000822  2628               	addwf	___ftmul@f3_as_product,f,c
  2285  000824  5022               	movf	___ftmul@f2+1,w,c
  2286  000826  2229               	addwfc	___ftmul@f3_as_product+1,f,c
  2287  000828  5023               	movf	___ftmul@f2+2,w,c
  2288  00082A  222A               	addwfc	___ftmul@f3_as_product+2,f,c
  2289  00082C                     l475:
  2290  00082C  90D8               	bcf	status,0,c
  2291  00082E  3220               	rrcf	___ftmul@f1+2,f,c
  2292  000830  321F               	rrcf	___ftmul@f1+1,f,c
  2293  000832  321E               	rrcf	___ftmul@f1,f,c
  2294  000834  90D8               	bcf	status,0,c
  2295  000836  322A               	rrcf	___ftmul@f3_as_product+2,f,c
  2296  000838  3229               	rrcf	___ftmul@f3_as_product+1,f,c
  2297  00083A  3228               	rrcf	___ftmul@f3_as_product,f,c
  2298  00083C  2E2B               	decfsz	___ftmul@cntr,f,c
  2299  00083E  D7EE               	goto	l474
  2300  000840  C028  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  2301  000844  C029  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2302  000848  C02A  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2303  00084C  C027  F016         	movff	___ftmul@exp,___ftpack@exp
  2304  000850  C02C  F017         	movff	___ftmul@sign,___ftpack@sign
  2305  000854  EC33  F004         	call	___ftpack	;wreg free
  2306  000858  C013  F01E         	movff	?___ftpack,?___ftmul
  2307  00085C  C014  F01F         	movff	?___ftpack+1,?___ftmul+1
  2308  000860  C015  F020         	movff	?___ftpack+2,?___ftmul+2
  2309  000864  0012               	return	
  2310  000866                     __end_of___ftmul:
  2311                           	opt stack 0
  2312                           tblptru	equ	0xFF8
  2313                           tblptrh	equ	0xFF7
  2314                           tblptrl	equ	0xFF6
  2315                           tablat	equ	0xFF5
  2316                           intcon	equ	0xFF2
  2317                           intcon3	equ	0xFF0
  2318                           postinc0	equ	0xFEE
  2319                           wreg	equ	0xFE8
  2320                           status	equ	0xFD8
  2321                           
  2322 ;; *************** function ___ftpack *****************
  2323 ;; Defined at:
  2324 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  2325 ;; Parameters:    Size  Location     Type
  2326 ;;  arg             3   18[COMRAM] unsigned um
  2327 ;;  exp             1   21[COMRAM] unsigned char 
  2328 ;;  sign            1   22[COMRAM] unsigned char 
  2329 ;; Auto vars:     Size  Location     Type
  2330 ;;		None
  2331 ;; Return value:  Size  Location     Type
  2332 ;;                  3   18[COMRAM] float 
  2333 ;; Registers used:
  2334 ;;		wreg, status,2, status,0
  2335 ;; Tracked objects:
  2336 ;;		On entry : 0/0
  2337 ;;		On exit  : 0/0
  2338 ;;		Unchanged: 0/0
  2339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2340 ;;      Params:         5       0       0       0       0       0       0       0       0
  2341 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2342 ;;      Temps:          3       0       0       0       0       0       0       0       0
  2343 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2344 ;;Total ram usage:        8 bytes
  2345 ;; Hardware stack levels used:    1
  2346 ;; Hardware stack levels required when called:    1
  2347 ;; This function calls:
  2348 ;;		Nothing
  2349 ;; This function is called by:
  2350 ;;		___ftmul
  2351 ;;		___lwtoft
  2352 ;; This function uses a non-reentrant model
  2353 ;;
  2354                           
  2355                           	psect	text8
  2356  000866                     __ptext8:
  2357                           	opt stack 0
  2358  000866                     ___ftpack:
  2359                           	opt stack 26
  2360                           
  2361                           ;incstack = 0
  2362  000866  5016               	movf	___ftpack@exp,w,c
  2363  000868  B4D8               	btfsc	status,2,c
  2364  00086A  D005               	goto	u1610
  2365  00086C  5013               	movf	___ftpack@arg,w,c
  2366  00086E  1014               	iorwf	___ftpack@arg+1,w,c
  2367  000870  1015               	iorwf	___ftpack@arg+2,w,c
  2368  000872  A4D8               	btfss	status,2,c
  2369  000874  D00C               	goto	l389
  2370  000876                     u1610:
  2371  000876  0E00               	movlw	0
  2372  000878  6E13               	movwf	?___ftpack,c
  2373  00087A  0E00               	movlw	0
  2374  00087C  6E14               	movwf	?___ftpack+1,c
  2375  00087E  0E00               	movlw	0
  2376  000880  6E15               	movwf	?___ftpack+2,c
  2377  000882  0012               	return	
  2378  000884  2A16               	incf	___ftpack@exp,f,c
  2379  000886  90D8               	bcf	status,0,c
  2380  000888  3215               	rrcf	___ftpack@arg+2,f,c
  2381  00088A  3214               	rrcf	___ftpack@arg+1,f,c
  2382  00088C  3213               	rrcf	___ftpack@arg,f,c
  2383  00088E                     l389:
  2384  00088E  0E00               	movlw	0
  2385  000890  1413               	andwf	___ftpack@arg,w,c
  2386  000892  6E18               	movwf	??___ftpack& (0+255),c
  2387  000894  0E00               	movlw	0
  2388  000896  1414               	andwf	___ftpack@arg+1,w,c
  2389  000898  6E19               	movwf	(??___ftpack+1)& (0+255),c
  2390  00089A  0EFE               	movlw	254
  2391  00089C  1415               	andwf	___ftpack@arg+2,w,c
  2392  00089E  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  2393  0008A0  5018               	movf	??___ftpack,w,c
  2394  0008A2  1019               	iorwf	??___ftpack+1,w,c
  2395  0008A4  101A               	iorwf	??___ftpack+2,w,c
  2396  0008A6  B4D8               	btfsc	status,2,c
  2397  0008A8  D00C               	goto	l392
  2398  0008AA  D7EC               	goto	l390
  2399  0008AC  2A16               	incf	___ftpack@exp,f,c
  2400  0008AE  0E01               	movlw	1
  2401  0008B0  2613               	addwf	___ftpack@arg,f,c
  2402  0008B2  0E00               	movlw	0
  2403  0008B4  2214               	addwfc	___ftpack@arg+1,f,c
  2404  0008B6  0E00               	movlw	0
  2405  0008B8  2215               	addwfc	___ftpack@arg+2,f,c
  2406  0008BA  90D8               	bcf	status,0,c
  2407  0008BC  3215               	rrcf	___ftpack@arg+2,f,c
  2408  0008BE  3214               	rrcf	___ftpack@arg+1,f,c
  2409  0008C0  3213               	rrcf	___ftpack@arg,f,c
  2410  0008C2                     l392:
  2411  0008C2  0E00               	movlw	0
  2412  0008C4  1413               	andwf	___ftpack@arg,w,c
  2413  0008C6  6E18               	movwf	??___ftpack& (0+255),c
  2414  0008C8  0E00               	movlw	0
  2415  0008CA  1414               	andwf	___ftpack@arg+1,w,c
  2416  0008CC  6E19               	movwf	(??___ftpack+1)& (0+255),c
  2417  0008CE  0EFF               	movlw	255
  2418  0008D0  1415               	andwf	___ftpack@arg+2,w,c
  2419  0008D2  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  2420  0008D4  5018               	movf	??___ftpack,w,c
  2421  0008D6  1019               	iorwf	??___ftpack+1,w,c
  2422  0008D8  101A               	iorwf	??___ftpack+2,w,c
  2423  0008DA  B4D8               	btfsc	status,2,c
  2424  0008DC  D006               	goto	l395
  2425  0008DE  D7E6               	goto	l393
  2426  0008E0  0616               	decf	___ftpack@exp,f,c
  2427  0008E2  90D8               	bcf	status,0,c
  2428  0008E4  3613               	rlcf	___ftpack@arg,f,c
  2429  0008E6  3614               	rlcf	___ftpack@arg+1,f,c
  2430  0008E8  3615               	rlcf	___ftpack@arg+2,f,c
  2431  0008EA                     l395:
  2432  0008EA  BE14               	btfsc	___ftpack@arg+1,7,c
  2433  0008EC  D003               	goto	u1650
  2434  0008EE  0E02               	movlw	2
  2435  0008F0  6016               	cpfslt	___ftpack@exp,c
  2436  0008F2  D7F6               	goto	l396
  2437  0008F4                     u1650:
  2438  0008F4  A016               	btfss	___ftpack@exp,0,c
  2439  0008F6  9E14               	bcf	___ftpack@arg+1,7,c
  2440  0008F8  90D8               	bcf	status,0,c
  2441  0008FA  3216               	rrcf	___ftpack@exp,f,c
  2442  0008FC  5016               	movf	___ftpack@exp,w,c
  2443  0008FE  1215               	iorwf	___ftpack@arg+2,f,c
  2444  000900  5017               	movf	___ftpack@sign,w,c
  2445  000902  A4D8               	btfss	status,2,c
  2446  000904  8E15               	bsf	___ftpack@arg+2,7,c
  2447  000906  C013  F013         	movff	___ftpack@arg,?___ftpack
  2448  00090A  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  2449  00090E  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  2450  000912  0012               	return	
  2451  000914                     __end_of___ftpack:
  2452                           	opt stack 0
  2453                           tblptru	equ	0xFF8
  2454                           tblptrh	equ	0xFF7
  2455                           tblptrl	equ	0xFF6
  2456                           tablat	equ	0xFF5
  2457                           intcon	equ	0xFF2
  2458                           intcon3	equ	0xFF0
  2459                           postinc0	equ	0xFEE
  2460                           wreg	equ	0xFE8
  2461                           status	equ	0xFD8
  2462                           
  2463 ;; *************** function _ISR *****************
  2464 ;; Defined at:
  2465 ;;		line 311 in file "main.c"
  2466 ;; Parameters:    Size  Location     Type
  2467 ;;		None
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;		None
  2470 ;; Return value:  Size  Location     Type
  2471 ;;                  1    wreg      void 
  2472 ;; Registers used:
  2473 ;;		wreg, status,2, status,0
  2474 ;; Tracked objects:
  2475 ;;		On entry : 0/0
  2476 ;;		On exit  : 0/0
  2477 ;;		Unchanged: 0/0
  2478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2479 ;;      Params:         0       0       0       0       0       0       0       0       0
  2480 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2481 ;;      Temps:         18       0       0       0       0       0       0       0       0
  2482 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2483 ;;Total ram usage:       18 bytes
  2484 ;; Hardware stack levels used:    1
  2485 ;; This function calls:
  2486 ;;		Nothing
  2487 ;; This function is called by:
  2488 ;;		Interrupt level 2
  2489 ;; This function uses a non-reentrant model
  2490 ;;
  2491                           
  2492                           	psect	intcode
  2493  000008                     __pintcode:
  2494                           	opt stack 0
  2495  000008                     _ISR:
  2496                           	opt stack 26
  2497                           
  2498                           ;incstack = 0
  2499  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2500  00000A  ED8A  F004         	call	int_func,f	;refresh shadow registers
  2501                           tblptru	equ	0xFF8
  2502                           tblptrh	equ	0xFF7
  2503                           tblptrl	equ	0xFF6
  2504                           tablat	equ	0xFF5
  2505                           intcon	equ	0xFF2
  2506                           intcon3	equ	0xFF0
  2507                           postinc0	equ	0xFEE
  2508                           wreg	equ	0xFE8
  2509                           status	equ	0xFD8
  2510                           
  2511                           	psect	intcode_body
  2512  000914                     __pintcode_body:
  2513                           	opt stack 26
  2514  000914                     int_func:
  2515                           	opt stack 26
  2516  000914  0006               	pop		; remove dummy address from shadow register refresh
  2517  000916  CFFA F001          	movff	pclath,??_ISR
  2518  00091A  CFFB F002          	movff	pclatu,??_ISR+1
  2519  00091E  CFE9 F003          	movff	fsr0l,??_ISR+2
  2520  000922  CFEA F004          	movff	fsr0h,??_ISR+3
  2521  000926  CFE1 F005          	movff	fsr1l,??_ISR+4
  2522  00092A  CFE2 F006          	movff	fsr1h,??_ISR+5
  2523  00092E  CFD9 F007          	movff	fsr2l,??_ISR+6
  2524  000932  CFDA F008          	movff	fsr2h,??_ISR+7
  2525  000936  CFF3 F009          	movff	prodl,??_ISR+8
  2526  00093A  CFF4 F00A          	movff	prodh,??_ISR+9
  2527  00093E  CFF6 F00B          	movff	tblptrl,??_ISR+10
  2528  000942  CFF7 F00C          	movff	tblptrh,??_ISR+11
  2529  000946  CFF8 F00D          	movff	tblptru,??_ISR+12
  2530  00094A  CFF5 F00E          	movff	tablat,??_ISR+13
  2531  00094E  C04C  F00F         	movff	btemp,??_ISR+14
  2532  000952  C04D  F010         	movff	btemp+1,??_ISR+15
  2533  000956  C04E  F011         	movff	btemp+2,??_ISR+16
  2534  00095A  C04F  F012         	movff	btemp+3,??_ISR+17
  2535                           
  2536                           ;main.c: 312: if(!TMR2IF) return;
  2537  00095E  A29E               	btfss	3998,1,c	;volatile
  2538  000960  D007               	goto	i2l166
  2539                           
  2540                           ;main.c: 313: TMR2IF = 0;
  2541  000962  929E               	bcf	3998,1,c	;volatile
  2542                           
  2543                           ;main.c: 314: millisCounter++;
  2544  000964  0E01               	movlw	1
  2545  000966  2642               	addwf	_millisCounter,f,c
  2546  000968  0E00               	movlw	0
  2547  00096A  2243               	addwfc	_millisCounter+1,f,c
  2548  00096C  2244               	addwfc	_millisCounter+2,f,c
  2549  00096E  2245               	addwfc	_millisCounter+3,f,c
  2550  000970                     i2l166:
  2551  000970  C012  F04F         	movff	??_ISR+17,btemp+3
  2552  000974  C011  F04E         	movff	??_ISR+16,btemp+2
  2553  000978  C010  F04D         	movff	??_ISR+15,btemp+1
  2554  00097C  C00F  F04C         	movff	??_ISR+14,btemp
  2555  000980  C00E  FFF5         	movff	??_ISR+13,tablat
  2556  000984  C00D  FFF8         	movff	??_ISR+12,tblptru
  2557  000988  C00C  FFF7         	movff	??_ISR+11,tblptrh
  2558  00098C  C00B  FFF6         	movff	??_ISR+10,tblptrl
  2559  000990  C00A  FFF4         	movff	??_ISR+9,prodh
  2560  000994  C009  FFF3         	movff	??_ISR+8,prodl
  2561  000998  C008  FFDA         	movff	??_ISR+7,fsr2h
  2562  00099C  C007  FFD9         	movff	??_ISR+6,fsr2l
  2563  0009A0  C006  FFE2         	movff	??_ISR+5,fsr1h
  2564  0009A4  C005  FFE1         	movff	??_ISR+4,fsr1l
  2565  0009A8  C004  FFEA         	movff	??_ISR+3,fsr0h
  2566  0009AC  C003  FFE9         	movff	??_ISR+2,fsr0l
  2567  0009B0  C002  FFFB         	movff	??_ISR+1,pclatu
  2568  0009B4  C001  FFFA         	movff	??_ISR,pclath
  2569  0009B8  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2570  0009BA  0011               	retfie		f
  2571  0009BC                     __end_of_ISR:
  2572                           	opt stack 0
  2573  0000                     pclatu	equ	0xFFB
  2574                           pclath	equ	0xFFA
  2575                           tblptru	equ	0xFF8
  2576                           tblptrh	equ	0xFF7
  2577                           tblptrl	equ	0xFF6
  2578                           tablat	equ	0xFF5
  2579                           prodh	equ	0xFF4
  2580                           prodl	equ	0xFF3
  2581                           intcon	equ	0xFF2
  2582                           intcon3	equ	0xFF0
  2583                           postinc0	equ	0xFEE
  2584                           fsr0h	equ	0xFEA
  2585                           fsr0l	equ	0xFE9
  2586                           wreg	equ	0xFE8
  2587                           fsr1h	equ	0xFE2
  2588                           fsr1l	equ	0xFE1
  2589                           fsr2h	equ	0xFDA
  2590                           fsr2l	equ	0xFD9
  2591                           status	equ	0xFD8
  2592                           pclatu	equ	0xFFB
  2593                           pclath	equ	0xFFA
  2594                           tblptru	equ	0xFF8
  2595                           tblptrh	equ	0xFF7
  2596                           tblptrl	equ	0xFF6
  2597                           tablat	equ	0xFF5
  2598                           prodh	equ	0xFF4
  2599                           prodl	equ	0xFF3
  2600                           intcon	equ	0xFF2
  2601                           intcon3	equ	0xFF0
  2602                           postinc0	equ	0xFEE
  2603                           fsr0h	equ	0xFEA
  2604                           fsr0l	equ	0xFE9
  2605                           wreg	equ	0xFE8
  2606                           fsr1h	equ	0xFE2
  2607                           fsr1l	equ	0xFE1
  2608                           fsr2h	equ	0xFDA
  2609                           fsr2l	equ	0xFD9
  2610                           status	equ	0xFD8
  2611                           
  2612                           	psect	rparam
  2613  0000                     pclatu	equ	0xFFB
  2614                           pclath	equ	0xFFA
  2615                           tblptru	equ	0xFF8
  2616                           tblptrh	equ	0xFF7
  2617                           tblptrl	equ	0xFF6
  2618                           tablat	equ	0xFF5
  2619                           prodh	equ	0xFF4
  2620                           prodl	equ	0xFF3
  2621                           intcon	equ	0xFF2
  2622                           intcon3	equ	0xFF0
  2623                           postinc0	equ	0xFEE
  2624                           fsr0h	equ	0xFEA
  2625                           fsr0l	equ	0xFE9
  2626                           wreg	equ	0xFE8
  2627                           fsr1h	equ	0xFE2
  2628                           fsr1l	equ	0xFE1
  2629                           fsr2h	equ	0xFDA
  2630                           fsr2l	equ	0xFD9
  2631                           status	equ	0xFD8
  2632                           
  2633                           	psect	temp
  2634  00004C                     btemp:
  2635                           	opt stack 0
  2636  00004C                     	ds	1
  2637  0000                     int$flags	set	btemp
  2638  0000                     wtemp6	set	btemp+1
  2639                           pclatu	equ	0xFFB
  2640                           pclath	equ	0xFFA
  2641                           tblptru	equ	0xFF8
  2642                           tblptrh	equ	0xFF7
  2643                           tblptrl	equ	0xFF6
  2644                           tablat	equ	0xFF5
  2645                           prodh	equ	0xFF4
  2646                           prodl	equ	0xFF3
  2647                           intcon	equ	0xFF2
  2648                           intcon3	equ	0xFF0
  2649                           postinc0	equ	0xFEE
  2650                           fsr0h	equ	0xFEA
  2651                           fsr0l	equ	0xFE9
  2652                           wreg	equ	0xFE8
  2653                           fsr1h	equ	0xFE2
  2654                           fsr1l	equ	0xFE1
  2655                           fsr2h	equ	0xFDA
  2656                           fsr2l	equ	0xFD9
  2657                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     65      75
    BANK0           160     15      15
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _loop->_setMotores
    _init->_setMotores
    _setMotores->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lwtoft

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_loop
    _loop->_setMotores
    _init->_setMotores

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   21582
                               _init
                               _loop
 ---------------------------------------------------------------------------------
 (1) _loop                                                 7     7      0   10828
                                              8 BANK0      7     7      0
                             _millis
                         _setMotores
 ---------------------------------------------------------------------------------
 (2) _millis                                               4     0      4       0
                                             18 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   10754
                         _setMotores
 ---------------------------------------------------------------------------------
 (2) _setMotores                                          14    10      4   10754
                                             59 COMRAM     6     2      4
                                              0 BANK0      8     8      0
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    2984
                                             26 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     551
                                             44 COMRAM    15    11      4
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3761
                                             29 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2773
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _setMotores
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
   _loop
     _millis
     _setMotores
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      F       F       5        9.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     41      4B       1       79.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5A      20        0.0%
DATA                 0      0      5A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Sep 01 20:14:48 2019

                     l71 0040                       l80 0072                       l72 003C  
                     l66 0448                       l67 0014                       l92 00FC  
                     l84 00A8                       l76 0080                       l68 004A  
                     l94 0122                       l86 00E4                       l95 0160  
                     l87 00F0                       l79 0076                       l96 01C6  
                     l88 0106                       l97 01E8              __CFG_BORV$0 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000                      l101 0212                      l110 028C  
                    l102 021C                      l111 02AA                      l103 0226  
                    l120 03E4                      l112 02E2                      l104 0230  
                    l121 03FA                      l113 02F8                      l105 023A  
                    l114 0316                      l106 0244                      l115 0334  
                    l107 024E                      l140 0538                      l132 04F2  
                    l116 0352                      l108 0254                      l117 0370  
                    l109 026E                      l150 0588                      l142 0540  
                    l134 04FA                      l118 038E                      l119 03AC  
                    l152 0596                      l144 0524                      l136 04DE  
                    l154 05A4                      l146 052E                      l138 04E8  
                    l171 0ABA                      l500 0760                      l148 057A  
                    l390 0884                      l470 07C2                      l471 07F4  
                    l392 08C2                      l472 0804                      l393 08AC  
                    l474 081C                      l395 08EA                      l475 082C  
                    l491 0720                      l396 08E0                      l468 079A  
                    l492 0710                      l389 088E                      l497 0744  
                    l489 06AA                      l498 0738             __CFG_CPB$OFF 000000  
                    _PR2 000FCB             __CFG_CPD$OFF 000000                      _ISR 0008  
           __CFG_BOR$OFF 000000                      wreg 000FE8             __CFG_LVP$OFF 000000  
                   ?_ISR 0001             __CFG_WDT$OFF 000000                     u2020 00BE  
                   u2015 00B0                     u2200 0204                     u2016 00B2  
                   u2210 0206                     u2130 01AE                     u2310 0406  
                   u2038 00C2                     u2160 01CE                     u1610 0876  
                   u2330 0422                     u2090 00F8                     u2075 00EC  
                   u2180 01F8                     u2148 01B2                     u2076 00EE  
                   u1701 07AA                     u1800 074A                     u2360 043C  
                   u2328 040A                     u1650 08F4                     u1820 04C4  
                   u2348 0426                     u1741 068E                     u1830 04D4  
                   u2198 01FC                     _PIE1 000F9D                     u1760 06C8  
                   u1840 050A                     _PIE2 000FA0                     u1681 0782  
                   u1850 051A                     u1930 0044                     u1860 054A  
                   u1765 06C0                     u1880 0560                     u1960 007A  
                   u1878 054C                     u1898 0562                     _main 0AB6  
           ___ftpack@arg 0013                     _init 09BC                     _loop 0012  
           ___ftpack@exp 0016                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 004C                     prodh 000FF4  
                   prodl 000FF3                     start 000E            __CFG_IESO$OFF 000000  
           ___ftmul@cntr 002B             ___param_bank 000000             ___ftmul@sign 002C  
                  ??_ISR 0001             ___fttol@exp1 003B             ___fttol@lval 0037  
          __CFG_PLLDIV$5 000000           __CFG_CCP2MX$ON 000000                    ?_main 0001  
                  ?_init 0001                    ?_loop 0001          __end_of___ftmul 0866  
        __end_of___fttol 0772                    _T2CON 000FCA                    i2l166 0970  
          __CFG_USBDIV$2 000000            __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
          ___ftpack@sign 0017                    pclath 000FFA                    tablat 000FF5  
                  loop@m 0046                    status 000FD8                    wtemp6 004D  
         __CFG_MCLRE$OFF 000000          __initialization 0A54             __end_of_main 0AC0  
           __end_of_init 0A54             __end_of_loop 04AC          setMotores@dutyD 0066  
        setMotores@dutyI 0064                   ??_main 0042            ___fttol@sign1 0036  
                 ??_init 0042                   ??_loop 0068            __activetblptr 000002  
                 _CCPR1L 000FBE                   _CCPR2L 000FBB         __end_of___ftpack 0914  
       __end_of___lwtoft 0AA4                   _TMR2IF 007CF1           __CFG_XINST$OFF 000000  
              ??___ftmul 0024                ??___fttol 0031            loop@direccion 004B  
                 _millis 0AA4                   clear_0 0A6C    ___ftmul@f3_as_product 0028  
           __pdataCOMRAM 004B                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 0A72  
        __CFG_PBADEN$OFF 000000           _setMotores$855 0060           _setMotores$856 0062  
          ___rparam_used 000001               ___ftmul@f1 001E               ___ftmul@f2 0021  
             ___fttol@f1 002D           __pcstackCOMRAM 0001         setMotores@speedD 003E  
       setMotores@speedI 003C               ___lwtoft@c 001B                  ?_millis 0013  
              ?___ftpack 0013                ?___lwtoft 001B                  _INTCON3 000FF0  
        __CFG_VREGEN$OFF 000000                  __Hparam 0000                  __Lparam 0000  
                ___ftmul 0772                  ___fttol 067E          __CFG_STVREN$OFF 000000  
                __pcinit 0A54               ??___ftpack 0018          __size_of_millis 0012  
                __ramtop 0800                  __ptext0 0AB6                  __ptext1 0012  
                __ptext2 0AA4                  __ptext3 09BC                  __ptext4 04AC  
                __ptext5 0A80                  __ptext6 067E                  __ptext7 0772  
                __ptext8 0866            _millisCounter 0042               ??___lwtoft 001E  
           __size_of_ISR 09B4                _T2CONbits 000FCA           __pintcode_body 0914  
   end_of_initialization 0A72            __Lmediumconst 0000                  int_func 0914  
             _setMotores 04AC                  postinc0 000FEE                _PORTAbits 000F80  
              _PORTBbits 000F81                _PORTCbits 000F82                _TRISAbits 000F92  
              _TRISBbits 000F93                _TRISCbits 000F94              _CCP1CONbits 000FBD  
            _CCP2CONbits 000FBA              ___ftmul@exp 0027            __pidataCOMRAM 0AC0  
         __end_of_millis 0AB6      start_initialization 0A54              __end_of_ISR 09BC  
            ?_setMotores 003C         __CFG_LPT1OSC$OFF 000000                 ??_millis 0017  
      __size_of___ftpack 00AE              __pbssCOMRAM 0042        __size_of___lwtoft 0024  
          __pcstackBANK0 0060               loop@estado 004A                __pintcode 0008  
               ?___ftmul 001E                 ?___fttol 002D      __size_of_setMotores 01D2  
               _LATAbits 000F89                 _LATCbits 000F8B                 _PIE1bits 000F9D  
               _UCFGbits 000F6F                 _RCONbits 000FD0         __CFG_WDTPS$32768 000000  
               _UCONbits 000F6D               _ADCON1bits 000FC1                 __Hrparam 0000  
               __Lrparam 0000         __size_of___ftmul 00F4         __size_of___fttol 00F4  
               ___ftpack 0866                 ___lwtoft 0A80                 _loop$842 006D  
               _loop$851 006E             ??_setMotores 0040            __size_of_main 000A  
          __size_of_init 0098            __size_of_loop 049A                 int$flags 004C  
  __CFG_CPUDIV$OSC1_PLL2 000000               _INTCONbits 000FF2       __end_of_setMotores 067E  
               intlevel2 0000       __CFG_FOSC$HSPLL_HS 000000  
