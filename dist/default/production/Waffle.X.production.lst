

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Sep 03 18:58:50 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1,inline
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,inline
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,inline
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,inline
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,inline
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,inline
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,inline
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,inline
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    30  0000                     
    31                           ; Version 1.45
    32                           ; Generated 16/11/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F2550 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataCOMRAM
    67  000D84                     __pidataCOMRAM:
    68                           	opt stack 0
    69                           
    70                           ;initializer for estrategiaAtras@estado
    71  000D84  09                 	db	9
    72                           
    73                           ;initializer for estrategiaAdelante@estado
    74  000D85  09                 	db	9
    75                           
    76                           ;initializer for loop@estrategia
    77  000D86  03                 	db	3
    78                           
    79                           ;initializer for _direccion
    80  000D87  02                 	db	2
    81  0000                     _LATCbits	set	3979
    82  0000                     _INTCONbits	set	4082
    83  0000                     _PIE1bits	set	3997
    84  0000                     _RCONbits	set	4048
    85  0000                     _PIE2	set	4000
    86  0000                     _PIE1	set	3997
    87  0000                     _INTCON3	set	4080
    88  0000                     _CCP2CONbits	set	4026
    89  0000                     _CCPR2L	set	4027
    90  0000                     _CCP1CONbits	set	4029
    91  0000                     _CCPR1L	set	4030
    92  0000                     _PR2	set	4043
    93  0000                     _T2CONbits	set	4042
    94  0000                     _T2CON	set	4042
    95  0000                     _TRISBbits	set	3987
    96  0000                     _TRISCbits	set	3988
    97  0000                     _TRISAbits	set	3986
    98  0000                     _UCFGbits	set	3951
    99  0000                     _UCONbits	set	3949
   100  0000                     _ADCON1bits	set	4033
   101  0000                     _PORTCbits	set	3970
   102  0000                     _PORTBbits	set	3969
   103  0000                     _LATAbits	set	3977
   104  0000                     _PORTAbits	set	3968
   105  0000                     _TMR2IF	set	31985
   106                           
   107                           ; #config settings
   108  0000                     
   109                           	psect	cinit
   110  000CFE                     __pcinit:
   111                           	opt stack 0
   112  000CFE                     start_initialization:
   113                           	opt stack 0
   114  000CFE                     __initialization:
   115                           	opt stack 0
   116                           
   117                           ; Initialize objects allocated to COMRAM (4 bytes)
   118                           ; load TBLPTR registers with __pidataCOMRAM
   119  000CFE  0E84               	movlw	low __pidataCOMRAM
   120  000D00  6EF6               	movwf	tblptrl,c
   121  000D02  0E0D               	movlw	high __pidataCOMRAM
   122  000D04  6EF7               	movwf	tblptrh,c
   123  000D06  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   124  000D08  6EF8               	movwf	tblptru,c
   125  000D0A  EE00  F049         	lfsr	0,__pdataCOMRAM
   126  000D0E  EE10 F004          	lfsr	1,4
   127  000D12                     copy_data0:
   128  000D12  0009               	tblrd		*+
   129  000D14  CFF5 FFEE          	movff	tablat,postinc0
   130  000D18  50E5               	movf	postdec1,w,c
   131  000D1A  50E1               	movf	fsr1l,w,c
   132  000D1C  E1FA               	bnz	copy_data0
   133                           
   134                           ; Clear objects allocated to BANK0 (12 bytes)
   135  000D1E  EE00  F07B         	lfsr	0,__pbssBANK0
   136  000D22  0E0C               	movlw	12
   137  000D24                     clear_0:
   138  000D24  6AEE               	clrf	postinc0,c
   139  000D26  06E8               	decf	wreg,f,c
   140  000D28  E1FD               	bnz	clear_0
   141                           
   142                           ; Clear objects allocated to COMRAM (15 bytes)
   143  000D2A  EE00  F03A         	lfsr	0,__pbssCOMRAM
   144  000D2E  0E0F               	movlw	15
   145  000D30                     clear_1:
   146  000D30  6AEE               	clrf	postinc0,c
   147  000D32  06E8               	decf	wreg,f,c
   148  000D34  E1FD               	bnz	clear_1
   149  000D36                     end_of_initialization:
   150                           	opt stack 0
   151  000D36                     __end_of__initialization:
   152                           	opt stack 0
   153  000D36  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   154  000D38  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   155  000D3A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   156  000D3C  6EF8               	movwf	tblptru,c
   157  000D3E  0100               	movlb	0
   158  000D40  EFBD  F006         	goto	_main	;jump to C main() function
   159                           tblptru	equ	0xFF8
   160                           tblptrh	equ	0xFF7
   161                           tblptrl	equ	0xFF6
   162                           tablat	equ	0xFF5
   163                           postinc0	equ	0xFEE
   164                           wreg	equ	0xFE8
   165                           postdec1	equ	0xFE5
   166                           fsr1l	equ	0xFE1
   167                           
   168                           	psect	bssCOMRAM
   169  00003A                     __pbssCOMRAM:
   170                           	opt stack 0
   171  00003A                     estrategiaCiego@m:
   172                           	opt stack 0
   173  00003A                     	ds	4
   174  00003E                     estrategiaClasica@m:
   175                           	opt stack 0
   176  00003E                     	ds	4
   177  000042                     loop@m:
   178                           	opt stack 0
   179  000042                     	ds	4
   180  000046                     estrategiaCiego@estado:
   181                           	opt stack 0
   182  000046                     	ds	1
   183  000047                     estrategiaClasica@estado:
   184                           	opt stack 0
   185  000047                     	ds	1
   186  000048                     _estadoMenu:
   187                           	opt stack 0
   188  000048                     	ds	1
   189                           tblptru	equ	0xFF8
   190                           tblptrh	equ	0xFF7
   191                           tblptrl	equ	0xFF6
   192                           tablat	equ	0xFF5
   193                           postinc0	equ	0xFEE
   194                           wreg	equ	0xFE8
   195                           postdec1	equ	0xFE5
   196                           fsr1l	equ	0xFE1
   197                           
   198                           	psect	dataCOMRAM
   199  000049                     __pdataCOMRAM:
   200                           	opt stack 0
   201  000049                     estrategiaAtras@estado:
   202                           	opt stack 0
   203  000049                     	ds	1
   204  00004A                     estrategiaAdelante@estado:
   205                           	opt stack 0
   206  00004A                     	ds	1
   207  00004B                     loop@estrategia:
   208                           	opt stack 0
   209  00004B                     	ds	1
   210  00004C                     _direccion:
   211                           	opt stack 0
   212  00004C                     	ds	1
   213                           tblptru	equ	0xFF8
   214                           tblptrh	equ	0xFF7
   215                           tblptrl	equ	0xFF6
   216                           tablat	equ	0xFF5
   217                           postinc0	equ	0xFEE
   218                           wreg	equ	0xFE8
   219                           postdec1	equ	0xFE5
   220                           fsr1l	equ	0xFE1
   221                           
   222                           	psect	bssBANK0
   223  00007B                     __pbssBANK0:
   224                           	opt stack 0
   225  00007B                     _millisCounter:
   226                           	opt stack 0
   227  00007B                     	ds	4
   228  00007F                     estrategiaAtras@m:
   229                           	opt stack 0
   230  00007F                     	ds	4
   231  000083                     estrategiaAdelante@m:
   232                           	opt stack 0
   233  000083                     	ds	4
   234                           tblptru	equ	0xFF8
   235                           tblptrh	equ	0xFF7
   236                           tblptrl	equ	0xFF6
   237                           tablat	equ	0xFF5
   238                           postinc0	equ	0xFEE
   239                           wreg	equ	0xFE8
   240                           postdec1	equ	0xFE5
   241                           fsr1l	equ	0xFE1
   242                           
   243                           	psect	cstackBANK0
   244  000060                     __pcstackBANK0:
   245                           	opt stack 0
   246  000060                     ___fttol@sign1:
   247                           	opt stack 0
   248                           
   249                           ; 1 bytes @ 0x0
   250  000060                     	ds	1
   251  000061                     ___fttol@lval:
   252                           	opt stack 0
   253                           
   254                           ; 4 bytes @ 0x1
   255  000061                     	ds	4
   256  000065                     ___fttol@exp1:
   257                           	opt stack 0
   258                           
   259                           ; 1 bytes @ 0x5
   260  000065                     	ds	1
   261  000066                     ??_setMotores:
   262                           
   263                           ; 1 bytes @ 0x6
   264  000066                     	ds	2
   265  000068                     _setMotores$929:
   266                           	opt stack 0
   267                           
   268                           ; 2 bytes @ 0x8
   269  000068                     	ds	2
   270  00006A                     _setMotores$930:
   271                           	opt stack 0
   272                           
   273                           ; 2 bytes @ 0xA
   274  00006A                     	ds	2
   275  00006C                     setMotores@dutyI:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0xC
   279  00006C                     	ds	2
   280  00006E                     setMotores@dutyD:
   281                           	opt stack 0
   282                           
   283                           ; 2 bytes @ 0xE
   284  00006E                     	ds	2
   285  000070                     ??_estrategiaClasica:
   286  000070                     ??_estrategiaCiego:
   287                           
   288                           ; 1 bytes @ 0x10
   289  000070                     	ds	4
   290  000074                     ??_loop:
   291                           
   292                           ; 1 bytes @ 0x14
   293  000074                     	ds	5
   294  000079                     _loop$316:
   295                           	opt stack 0
   296                           
   297                           ; 1 bytes @ 0x19
   298  000079                     	ds	1
   299  00007A                     _loop$325:
   300                           	opt stack 0
   301                           
   302                           ; 1 bytes @ 0x1A
   303  00007A                     	ds	1
   304                           tblptru	equ	0xFF8
   305                           tblptrh	equ	0xFF7
   306                           tblptrl	equ	0xFF6
   307                           tablat	equ	0xFF5
   308                           postinc0	equ	0xFEE
   309                           wreg	equ	0xFE8
   310                           postdec1	equ	0xFE5
   311                           fsr1l	equ	0xFE1
   312                           
   313                           	psect	cstackCOMRAM
   314  000001                     __pcstackCOMRAM:
   315                           	opt stack 0
   316  000001                     ??_ISR:
   317                           
   318                           ; 1 bytes @ 0x0
   319  000001                     	ds	18
   320  000013                     ?___ftpack:
   321                           	opt stack 0
   322  000013                     ?_millis:
   323                           	opt stack 0
   324  000013                     ___ftpack@arg:
   325                           	opt stack 0
   326                           
   327                           ; 3 bytes @ 0x12
   328  000013                     	ds	3
   329  000016                     ___ftpack@exp:
   330                           	opt stack 0
   331                           
   332                           ; 1 bytes @ 0x15
   333  000016                     	ds	1
   334  000017                     ___ftpack@sign:
   335                           	opt stack 0
   336                           
   337                           ; 1 bytes @ 0x16
   338  000017                     	ds	1
   339  000018                     ??___ftpack:
   340                           
   341                           ; 1 bytes @ 0x17
   342  000018                     	ds	3
   343  00001B                     ?___lwtoft:
   344                           	opt stack 0
   345  00001B                     ___lwtoft@c:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x1A
   349  00001B                     	ds	3
   350  00001E                     ?___ftmul:
   351                           	opt stack 0
   352  00001E                     ___ftmul@f1:
   353                           	opt stack 0
   354                           
   355                           ; 3 bytes @ 0x1D
   356  00001E                     	ds	3
   357  000021                     ___ftmul@f2:
   358                           	opt stack 0
   359                           
   360                           ; 3 bytes @ 0x20
   361  000021                     	ds	3
   362  000024                     ??___ftmul:
   363                           
   364                           ; 1 bytes @ 0x23
   365  000024                     	ds	3
   366  000027                     ___ftmul@exp:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x26
   370  000027                     	ds	1
   371  000028                     ___ftmul@f3_as_product:
   372                           	opt stack 0
   373                           
   374                           ; 3 bytes @ 0x27
   375  000028                     	ds	3
   376  00002B                     ___ftmul@cntr:
   377                           	opt stack 0
   378                           
   379                           ; 1 bytes @ 0x2A
   380  00002B                     	ds	1
   381  00002C                     ___ftmul@sign:
   382                           	opt stack 0
   383                           
   384                           ; 1 bytes @ 0x2B
   385  00002C                     	ds	1
   386  00002D                     ?___fttol:
   387                           	opt stack 0
   388  00002D                     ___fttol@f1:
   389                           	opt stack 0
   390                           
   391                           ; 3 bytes @ 0x2C
   392  00002D                     	ds	4
   393  000031                     ??___fttol:
   394                           
   395                           ; 1 bytes @ 0x30
   396  000031                     	ds	5
   397  000036                     setMotores@speedI:
   398                           	opt stack 0
   399                           
   400                           ; 2 bytes @ 0x35
   401  000036                     	ds	2
   402  000038                     setMotores@speedD:
   403                           	opt stack 0
   404                           
   405                           ; 2 bytes @ 0x37
   406  000038                     	ds	2
   407  00003A                     tblptru	equ	0xFF8
   408                           tblptrh	equ	0xFF7
   409                           tblptrl	equ	0xFF6
   410                           tablat	equ	0xFF5
   411                           postinc0	equ	0xFEE
   412                           wreg	equ	0xFE8
   413                           postdec1	equ	0xFE5
   414                           fsr1l	equ	0xFE1
   415                           
   416                           ; 1 bytes @ 0x39
   417 ;;
   418 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   419 ;;
   420 ;; *************** function _main *****************
   421 ;; Defined at:
   422 ;;		line 328 in file "main.c"
   423 ;; Parameters:    Size  Location     Type
   424 ;;		None
   425 ;; Auto vars:     Size  Location     Type
   426 ;;		None
   427 ;; Return value:  Size  Location     Type
   428 ;;                  1    wreg      void 
   429 ;; Registers used:
   430 ;;		wreg, status,2, status,0, cstack
   431 ;; Tracked objects:
   432 ;;		On entry : 0/0
   433 ;;		On exit  : 0/0
   434 ;;		Unchanged: 0/0
   435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   436 ;;      Params:         0       0       0       0       0       0       0       0       0
   437 ;;      Locals:         0       0       0       0       0       0       0       0       0
   438 ;;      Temps:          0       0       0       0       0       0       0       0       0
   439 ;;      Totals:         0       0       0       0       0       0       0       0       0
   440 ;;Total ram usage:        0 bytes
   441 ;; Hardware stack levels required when called:    6
   442 ;; This function calls:
   443 ;;		_init
   444 ;;		_loop
   445 ;; This function is called by:
   446 ;;		Startup code after reset
   447 ;; This function uses a non-reentrant model
   448 ;;
   449                           
   450                           	psect	text0
   451  000D7A                     __ptext0:
   452                           	opt stack 0
   453  000D7A                     _main:
   454                           	opt stack 25
   455                           
   456                           ;main.c: 329: init();
   457                           
   458                           ;incstack = 0
   459  000D7A  EC32  F006         	call	_init	;wreg free
   460  000D7E                     l158:
   461  000D7E  EC09  F000         	call	_loop	;wreg free
   462  000D82  D7FD               	goto	l158
   463  000D84                     __end_of_main:
   464                           	opt stack 0
   465                           tblptru	equ	0xFF8
   466                           tblptrh	equ	0xFF7
   467                           tblptrl	equ	0xFF6
   468                           tablat	equ	0xFF5
   469                           postinc0	equ	0xFEE
   470                           wreg	equ	0xFE8
   471                           postdec1	equ	0xFE5
   472                           fsr1l	equ	0xFE1
   473                           
   474 ;; *************** function _loop *****************
   475 ;; Defined at:
   476 ;;		line 7 in file "main.c"
   477 ;; Parameters:    Size  Location     Type
   478 ;;		None
   479 ;; Auto vars:     Size  Location     Type
   480 ;;		None
   481 ;; Return value:  Size  Location     Type
   482 ;;                  1    wreg      void 
   483 ;; Registers used:
   484 ;;		wreg, status,2, status,0, cstack
   485 ;; Tracked objects:
   486 ;;		On entry : 0/0
   487 ;;		On exit  : 0/0
   488 ;;		Unchanged: 0/0
   489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   490 ;;      Params:         0       0       0       0       0       0       0       0       0
   491 ;;      Locals:         0       2       0       0       0       0       0       0       0
   492 ;;      Temps:          0       5       0       0       0       0       0       0       0
   493 ;;      Totals:         0       7       0       0       0       0       0       0       0
   494 ;;Total ram usage:        7 bytes
   495 ;; Hardware stack levels used:    1
   496 ;; Hardware stack levels required when called:    5
   497 ;; This function calls:
   498 ;;		_estrategiaAdelante
   499 ;;		_estrategiaAtras
   500 ;;		_estrategiaCiego
   501 ;;		_estrategiaClasica
   502 ;;		_millis
   503 ;;		_setMotores
   504 ;; This function is called by:
   505 ;;		_main
   506 ;; This function uses a non-reentrant model
   507 ;;
   508                           
   509                           	psect	text1
   510  000012                     __ptext1:
   511                           	opt stack 0
   512  000012                     _loop:
   513                           	opt stack 25
   514                           
   515                           ;main.c: 8: static unsigned long m = 0;
   516                           ;main.c: 9: static char estrategia = E_CLASICA;
   517                           ;main.c: 11: switch(estadoMenu){
   518                           
   519                           ;incstack = 0
   520  000012  D0EF               	goto	l33
   521  000014                     l34:
   522                           
   523                           ;main.c: 13: if((unsigned)!PORTAbits.RA1){
   524  000014  B280               	btfsc	3968,1,c	;volatile
   525  000016  D019               	goto	l35
   526                           
   527                           ;main.c: 14: LATAbits.LA2 = 1;
   528  000018  8489               	bsf	3977,2,c	;volatile
   529                           
   530                           ;main.c: 15: LATAbits.LA3 = 1;
   531  00001A  8689               	bsf	3977,3,c	;volatile
   532                           
   533                           ;main.c: 16: LATAbits.LA4 = 1;
   534  00001C  8889               	bsf	3977,4,c	;volatile
   535                           
   536                           ;main.c: 17: m = millis();
   537  00001E  ECB4  F006         	call	_millis	;wreg free
   538  000022  C013  F042         	movff	?_millis,loop@m
   539  000026  C014  F043         	movff	?_millis+1,loop@m+1
   540  00002A  C015  F044         	movff	?_millis+2,loop@m+2
   541  00002E  C016  F045         	movff	?_millis+3,loop@m+3
   542                           
   543                           ;main.c: 18: direccion = DER;
   544  000032  0E02               	movlw	2
   545  000034  6E4C               	movwf	_direccion,c
   546                           
   547                           ;main.c: 19: estadoMenu = ESPERA;
   548  000036  0E02               	movlw	2
   549  000038  6E48               	movwf	_estadoMenu,c
   550                           
   551                           ;main.c: 20: while((unsigned)!PORTAbits.RA1)
   552  00003A  D004               	goto	u2490
   553  00003C                     
   554                           ;main.c: 22: estadoMenu = LIMPIAR;
   555  00003C  0E01               	movlw	1
   556  00003E  6E48               	movwf	_estadoMenu,c
   557  000040  AA80               	btfss	3968,5,c	;volatile
   558  000042  D7FC               	goto	l39
   559  000044                     u2490:
   560  000044  B280               	btfsc	3968,1,c	;volatile
   561  000046  0012               	return	
   562  000048  D7FB               	goto	l38
   563  00004A                     l35:
   564                           
   565                           ;main.c: 24: }
   566                           ;main.c: 26: if((unsigned)!PORTAbits.RA5){
   567  00004A  BA80               	btfsc	3968,5,c	;volatile
   568  00004C  D019               	goto	l43
   569                           
   570                           ;main.c: 27: LATAbits.LA2 = 1;
   571  00004E  8489               	bsf	3977,2,c	;volatile
   572                           
   573                           ;main.c: 28: LATAbits.LA3 = 1;
   574  000050  8689               	bsf	3977,3,c	;volatile
   575                           
   576                           ;main.c: 29: LATAbits.LA4 = 1;
   577  000052  8889               	bsf	3977,4,c	;volatile
   578                           
   579                           ;main.c: 30: m = millis();
   580  000054  ECB4  F006         	call	_millis	;wreg free
   581  000058  C013  F042         	movff	?_millis,loop@m
   582  00005C  C014  F043         	movff	?_millis+1,loop@m+1
   583  000060  C015  F044         	movff	?_millis+2,loop@m+2
   584  000064  C016  F045         	movff	?_millis+3,loop@m+3
   585                           
   586                           ;main.c: 31: direccion = IZQ;
   587  000068  0E05               	movlw	5
   588  00006A  6E4C               	movwf	_direccion,c
   589                           
   590                           ;main.c: 32: estadoMenu = ESPERA;
   591  00006C  0E02               	movlw	2
   592  00006E  6E48               	movwf	_estadoMenu,c
   593                           
   594                           ;main.c: 33: while((unsigned)!PORTAbits.RA5)
   595  000070  D004               	goto	u2520
   596  000072                     
   597                           ;main.c: 35: estadoMenu = LIMPIAR;
   598  000072  0E01               	movlw	1
   599  000074  6E48               	movwf	_estadoMenu,c
   600  000076  A280               	btfss	3968,1,c	;volatile
   601  000078  D7FC               	goto	l47
   602  00007A                     u2520:
   603  00007A  BA80               	btfsc	3968,5,c	;volatile
   604  00007C  0012               	return	
   605  00007E  D7FB               	goto	l46
   606  000080                     l43:
   607                           
   608                           ;main.c: 37: }
   609                           ;main.c: 39: setMotores(0, 0);
   610  000080  0E00               	movlw	0
   611  000082  6E37               	movwf	setMotores@speedI+1,c
   612  000084  0E00               	movlw	0
   613  000086  6E36               	movwf	setMotores@speedI,c
   614  000088  0E00               	movlw	0
   615  00008A  6E39               	movwf	setMotores@speedD+1,c
   616  00008C  0E00               	movlw	0
   617  00008E  6E38               	movwf	setMotores@speedD,c
   618  000090  ECFD  F001         	call	_setMotores	;wreg free
   619                           
   620                           ;main.c: 40: LATAbits.LA2 = (unsigned)((unsigned)!PORTBbits.RB5 || (unsigned)!PORTBbits.
      +                          RB4 || (unsigned)!PORTBbits.RB3);
   621  000094  0E01               	movlw	1
   622  000096  0100               	movlb	0	; () banked
   623  000098  6F79               	movwf	_loop$316& (0+255),b
   624                           
   625                           ; BSR set to: 0
   626  00009A  BA81               	btfsc	3969,5,c	;volatile
   627                           
   628                           ; BSR set to: 0
   629  00009C  A881               	btfss	3969,4,c	;volatile
   630  00009E  D004               	goto	l51
   631                           
   632                           ; BSR set to: 0
   633  0000A0  A681               	btfss	3969,3,c	;volatile
   634  0000A2  D002               	goto	l51
   635                           
   636                           ; BSR set to: 0
   637  0000A4  0E00               	movlw	0
   638  0000A6  6F79               	movwf	_loop$316& (0+255),b
   639  0000A8                     l51:
   640                           
   641                           ; BSR set to: 0
   642                           
   643                           ; BSR set to: 0
   644  0000A8  B179               	btfsc	_loop$316& (0+255),0,b
   645  0000AA  D002               	bra	u2575
   646  0000AC  9489               	bcf	3977,2,c	;volatile
   647  0000AE  D001               	bra	u2576
   648  0000B0                     u2575:
   649  0000B0  8489               	bsf	3977,2,c	;volatile
   650  0000B2                     u2576:
   651                           
   652                           ;main.c: 41: LATAbits.LA3 = (unsigned)((unsigned)!PORTBbits.RB1);
   653  0000B2  B281               	btfsc	3969,1,c	;volatile
   654  0000B4  D004               	goto	u2580
   655  0000B6  0100               	movlb	0	; () banked
   656  0000B8  6B74               	clrf	??_loop& (0+255),b
   657  0000BA  2B74               	incf	??_loop& (0+255),f,b
   658  0000BC  D002               	goto	u2598
   659  0000BE                     u2580:
   660  0000BE  0100               	movlb	0	; () banked
   661  0000C0  6B74               	clrf	??_loop& (0+255),b
   662  0000C2                     u2598:
   663  0000C2  4774               	rlncf	??_loop& (0+255),f,b
   664  0000C4  4774               	rlncf	??_loop& (0+255),f,b
   665  0000C6  4774               	rlncf	??_loop& (0+255),f,b
   666  0000C8  5089               	movf	3977,w,c	;volatile
   667  0000CA  1974               	xorwf	??_loop& (0+255),w,b
   668  0000CC  0BF7               	andlw	-9
   669  0000CE  1974               	xorwf	??_loop& (0+255),w,b
   670  0000D0  6E89               	movwf	3977,c	;volatile
   671                           
   672                           ; BSR set to: 0
   673                           ;main.c: 42: LATAbits.LA4 = (unsigned)((unsigned)!PORTCbits.RC5 || (unsigned)!PORTCbits.
      +                          RC4 || (unsigned)!PORTCbits.RC6);
   674  0000D2  0E01               	movlw	1
   675  0000D4  6F7A               	movwf	_loop$325& (0+255),b
   676                           
   677                           ; BSR set to: 0
   678  0000D6  BA82               	btfsc	3970,5,c	;volatile
   679                           
   680                           ; BSR set to: 0
   681  0000D8  A882               	btfss	3970,4,c	;volatile
   682  0000DA  D004               	goto	l53
   683                           
   684                           ; BSR set to: 0
   685  0000DC  AC82               	btfss	3970,6,c	;volatile
   686  0000DE  D002               	goto	l53
   687                           
   688                           ; BSR set to: 0
   689  0000E0  0E00               	movlw	0
   690  0000E2  6F7A               	movwf	_loop$325& (0+255),b
   691  0000E4                     l53:
   692                           
   693                           ; BSR set to: 0
   694                           
   695                           ; BSR set to: 0
   696  0000E4  B17A               	btfsc	_loop$325& (0+255),0,b
   697  0000E6  D002               	bra	u2635
   698  0000E8  9889               	bcf	3977,4,c	;volatile
   699  0000EA  D001               	bra	u2636
   700  0000EC                     u2635:
   701  0000EC  8889               	bsf	3977,4,c	;volatile
   702  0000EE                     u2636:
   703                           
   704                           ;main.c: 43: return;
   705  0000EE  0012               	return	
   706  0000F0                     l54:
   707                           
   708                           ;main.c: 46: if((unsigned)!PORTAbits.RA1 || (unsigned)!PORTAbits.RA5){
   709  0000F0  A280               	btfss	3968,1,c	;volatile
   710  0000F2  D002               	goto	u2650
   711  0000F4  BA80               	btfsc	3968,5,c	;volatile
   712  0000F6  D007               	goto	l55
   713  0000F8                     u2650:
   714                           
   715                           ;main.c: 47: estadoMenu = MENU;
   716  0000F8  0E00               	movlw	0
   717  0000FA  6E48               	movwf	_estadoMenu,c
   718  0000FC  A280               	btfss	3968,1,c	;volatile
   719  0000FE  D7FE               	goto	l59
   720  000100  BA80               	btfsc	3968,5,c	;volatile
   721  000102  0012               	return	
   722  000104  D7FB               	goto	l59
   723  000106                     l55:
   724                           
   725                           ;main.c: 50: }
   726                           ;main.c: 52: LATAbits.LA2 = 1;
   727  000106  8489               	bsf	3977,2,c	;volatile
   728                           
   729                           ;main.c: 53: LATAbits.LA3 = 0;
   730  000108  9689               	bcf	3977,3,c	;volatile
   731                           
   732                           ;main.c: 54: LATAbits.LA4 = 1;
   733  00010A  8889               	bsf	3977,4,c	;volatile
   734                           
   735                           ;main.c: 55: setMotores(1000, 1000);
   736  00010C  0E03               	movlw	3
   737  00010E  6E37               	movwf	setMotores@speedI+1,c
   738  000110  0EE8               	movlw	232
   739  000112  6E36               	movwf	setMotores@speedI,c
   740  000114  0E03               	movlw	3
   741  000116  6E39               	movwf	setMotores@speedD+1,c
   742  000118  0EE8               	movlw	232
   743  00011A  6E38               	movwf	setMotores@speedD,c
   744  00011C  ECFD  F001         	call	_setMotores	;wreg free
   745                           
   746                           ;main.c: 56: return;
   747  000120  0012               	return	
   748  000122                     
   749                           ;main.c: 59: if(millis() > (m + 4970U)){
   750  000122  ECB4  F006         	call	_millis	;wreg free
   751  000126  0E6A               	movlw	106
   752  000128  2442               	addwf	loop@m,w,c
   753  00012A  0100               	movlb	0	; () banked
   754  00012C  6F74               	movwf	??_loop& (0+255),b
   755  00012E  0E13               	movlw	19
   756  000130  2043               	addwfc	loop@m+1,w,c
   757  000132  6F75               	movwf	(??_loop+1)& (0+255),b
   758  000134  0E00               	movlw	0
   759  000136  2044               	addwfc	loop@m+2,w,c
   760  000138  6F76               	movwf	(??_loop+2)& (0+255),b
   761  00013A  0E00               	movlw	0
   762  00013C  2045               	addwfc	loop@m+3,w,c
   763  00013E  6F77               	movwf	(??_loop+3)& (0+255),b
   764  000140  5013               	movf	?_millis,w,c
   765  000142  5D74               	subwf	??_loop& (0+255),w,b
   766  000144  5014               	movf	?_millis+1,w,c
   767  000146  5975               	subwfb	(??_loop+1)& (0+255),w,b
   768  000148  5015               	movf	?_millis+2,w,c
   769  00014A  5976               	subwfb	(??_loop+2)& (0+255),w,b
   770  00014C  5016               	movf	?_millis+3,w,c
   771  00014E  5977               	subwfb	(??_loop+3)& (0+255),w,b
   772  000150  B0D8               	btfsc	status,0,c
   773  000152  D006               	goto	l62
   774                           
   775                           ; BSR set to: 0
   776                           ;main.c: 63: estadoMenu = estrategia;
   777  000154  C04B  F048         	movff	loop@estrategia,_estadoMenu
   778                           
   779                           ;main.c: 65: LATAbits.LA2 = 0;
   780  000158  9489               	bcf	3977,2,c	;volatile
   781                           
   782                           ;main.c: 66: LATAbits.LA3 = 0;
   783  00015A  9689               	bcf	3977,3,c	;volatile
   784                           
   785                           ;main.c: 67: LATAbits.LA4 = 1;
   786  00015C  8889               	bsf	3977,4,c	;volatile
   787                           
   788                           ;main.c: 68: return;
   789  00015E  0012               	return	
   790  000160                     l62:
   791                           
   792                           ; BSR set to: 0
   793                           ;main.c: 69: }
   794                           ;main.c: 71: if((unsigned)!PORTCbits.RC7){
   795  000160  BE82               	btfsc	3970,7,c	;volatile
   796  000162  D008               	goto	l65
   797                           
   798                           ; BSR set to: 0
   799                           ;main.c: 72: if(direccion == DER) estrategia = E_ADELANTE;
   800  000164  0E02               	movlw	2
   801  000166  184C               	xorwf	_direccion,w,c
   802  000168  A4D8               	btfss	status,2,c
   803  00016A  D002               	goto	l64
   804                           
   805                           ; BSR set to: 0
   806  00016C  0E05               	movlw	5
   807  00016E  D001               	goto	L1
   808  000170                     l64:
   809                           
   810                           ; BSR set to: 0
   811                           ;main.c: 73: else estrategia = E_ATRAS;
   812                           
   813                           ; BSR set to: 0
   814  000170  0E06               	movlw	6
   815  000172                     L1:
   816  000172  6E4B               	movwf	loop@estrategia,c
   817  000174                     l65:
   818                           
   819                           ; BSR set to: 0
   820                           ;main.c: 74: }
   821                           ;main.c: 76: setMotores(0, 0);
   822                           
   823                           ; BSR set to: 0
   824                           
   825                           ; BSR set to: 0
   826  000174  0E00               	movlw	0
   827  000176  6E37               	movwf	setMotores@speedI+1,c
   828  000178  0E00               	movlw	0
   829  00017A  6E36               	movwf	setMotores@speedI,c
   830  00017C  0E00               	movlw	0
   831  00017E  6E39               	movwf	setMotores@speedD+1,c
   832  000180  0E00               	movlw	0
   833  000182  6E38               	movwf	setMotores@speedD,c
   834  000184  ECFD  F001         	call	_setMotores	;wreg free
   835                           
   836                           ;main.c: 77: LATAbits.LA2 = 1;
   837  000188  8489               	bsf	3977,2,c	;volatile
   838                           
   839                           ;main.c: 78: LATAbits.LA3 = (unsigned)(millis() > (m + (4970U / 2)));
   840  00018A  ECB4  F006         	call	_millis	;wreg free
   841  00018E  0EB5               	movlw	181
   842  000190  2442               	addwf	loop@m,w,c
   843  000192  0100               	movlb	0	; () banked
   844  000194  6F74               	movwf	??_loop& (0+255),b
   845  000196  0E09               	movlw	9
   846  000198  2043               	addwfc	loop@m+1,w,c
   847  00019A  6F75               	movwf	(??_loop+1)& (0+255),b
   848  00019C  0E00               	movlw	0
   849  00019E  2044               	addwfc	loop@m+2,w,c
   850  0001A0  6F76               	movwf	(??_loop+2)& (0+255),b
   851  0001A2  0E00               	movlw	0
   852  0001A4  2045               	addwfc	loop@m+3,w,c
   853  0001A6  6F77               	movwf	(??_loop+3)& (0+255),b
   854  0001A8  5013               	movf	?_millis,w,c
   855  0001AA  5D74               	subwf	??_loop& (0+255),w,b
   856  0001AC  5014               	movf	?_millis+1,w,c
   857  0001AE  5975               	subwfb	(??_loop+1)& (0+255),w,b
   858  0001B0  5015               	movf	?_millis+2,w,c
   859  0001B2  5976               	subwfb	(??_loop+2)& (0+255),w,b
   860  0001B4  5016               	movf	?_millis+3,w,c
   861  0001B6  5977               	subwfb	(??_loop+3)& (0+255),w,b
   862  0001B8  B0D8               	btfsc	status,0,c
   863  0001BA  D003               	goto	u2710
   864  0001BC  6B78               	clrf	(??_loop+4)& (0+255),b
   865  0001BE  2B78               	incf	(??_loop+4)& (0+255),f,b
   866  0001C0  D002               	goto	u2728
   867  0001C2                     u2710:
   868  0001C2  0100               	movlb	0	; () banked
   869  0001C4  6B78               	clrf	(??_loop+4)& (0+255),b
   870  0001C6                     u2728:
   871  0001C6  4778               	rlncf	(??_loop+4)& (0+255),f,b
   872  0001C8  4778               	rlncf	(??_loop+4)& (0+255),f,b
   873  0001CA  4778               	rlncf	(??_loop+4)& (0+255),f,b
   874  0001CC  5089               	movf	3977,w,c	;volatile
   875  0001CE  1978               	xorwf	(??_loop+4)& (0+255),w,b
   876  0001D0  0BF7               	andlw	-9
   877  0001D2  1978               	xorwf	(??_loop+4)& (0+255),w,b
   878  0001D4  6E89               	movwf	3977,c	;volatile
   879                           
   880                           ; BSR set to: 0
   881                           ;main.c: 79: LATAbits.LA4 = 0;
   882  0001D6  9889               	bcf	3977,4,c	;volatile
   883                           
   884                           ; BSR set to: 0
   885                           ;main.c: 80: return;
   886  0001D8  0012               	return	
   887  0001DA                     
   888                           ;main.c: 83: estrategiaClasica();
   889                           
   890                           ; BSR set to: 0
   891  0001DA  EC10  F001         	call	_estrategiaClasica	;wreg free
   892                           
   893                           ;main.c: 84: return;
   894  0001DE  0012               	return	
   895  0001E0                     
   896                           ;main.c: 87: estrategiaCiego();
   897  0001E0  ECE8  F002         	call	_estrategiaCiego	;wreg free
   898                           
   899                           ;main.c: 88: return;
   900  0001E4  0012               	return	
   901  0001E6                     
   902                           ;main.c: 91: estrategiaAdelante();
   903  0001E6  EC91  F004         	call	_estrategiaAdelante	;wreg free
   904                           
   905                           ;main.c: 92: return;
   906  0001EA  0012               	return	
   907  0001EC                     
   908                           ;main.c: 95: estrategiaAtras();
   909  0001EC  EC16  F004         	call	_estrategiaAtras	;wreg free
   910                           
   911                           ;main.c: 97: }
   912                           
   913                           ;main.c: 96: return;
   914  0001F0  0012               	return	
   915  0001F2                     l33:
   916  0001F2  5048               	movf	_estadoMenu,w,c
   917                           
   918                           ; Switch size 1, requested type "time"
   919                           ; Number of cases is 7, Range of values is 0 to 6
   920                           ; switch strategies available:
   921                           ; Name         Instructions Cycles
   922                           ; simple_byte           22    12 (average)
   923                           ;	Chosen strategy is simple_byte
   924  0001F4  0A00               	xorlw	0	; case 0
   925  0001F6  B4D8               	btfsc	status,2,c
   926  0001F8  D70D               	goto	l34
   927  0001FA  0A01               	xorlw	1	; case 1
   928  0001FC  B4D8               	btfsc	status,2,c
   929  0001FE  D778               	goto	l54
   930  000200  0A03               	xorlw	3	; case 2
   931  000202  B4D8               	btfsc	status,2,c
   932  000204  D78E               	goto	l61
   933  000206  0A01               	xorlw	1	; case 3
   934  000208  B4D8               	btfsc	status,2,c
   935  00020A  D7E7               	goto	l66
   936  00020C  0A07               	xorlw	7	; case 4
   937  00020E  B4D8               	btfsc	status,2,c
   938  000210  D7E7               	goto	l67
   939  000212  0A01               	xorlw	1	; case 5
   940  000214  B4D8               	btfsc	status,2,c
   941  000216  D7E7               	goto	l68
   942  000218  0A03               	xorlw	3	; case 6
   943  00021A  A4D8               	btfss	status,2,c
   944  00021C  0012               	return	
   945  00021E  D7E6               	goto	l69
   946  000220                     __end_of_loop:
   947                           	opt stack 0
   948                           tblptru	equ	0xFF8
   949                           tblptrh	equ	0xFF7
   950                           tblptrl	equ	0xFF6
   951                           tablat	equ	0xFF5
   952                           postinc0	equ	0xFEE
   953                           wreg	equ	0xFE8
   954                           postdec1	equ	0xFE5
   955                           fsr1l	equ	0xFE1
   956                           status	equ	0xFD8
   957                           
   958 ;; *************** function _estrategiaClasica *****************
   959 ;; Defined at:
   960 ;;		line 100 in file "main.c"
   961 ;; Parameters:    Size  Location     Type
   962 ;;		None
   963 ;; Auto vars:     Size  Location     Type
   964 ;;		None
   965 ;; Return value:  Size  Location     Type
   966 ;;                  1    wreg      void 
   967 ;; Registers used:
   968 ;;		wreg, status,2, status,0, cstack
   969 ;; Tracked objects:
   970 ;;		On entry : 0/0
   971 ;;		On exit  : 0/0
   972 ;;		Unchanged: 0/0
   973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   974 ;;      Params:         0       0       0       0       0       0       0       0       0
   975 ;;      Locals:         0       0       0       0       0       0       0       0       0
   976 ;;      Temps:          0       4       0       0       0       0       0       0       0
   977 ;;      Totals:         0       4       0       0       0       0       0       0       0
   978 ;;Total ram usage:        4 bytes
   979 ;; Hardware stack levels used:    1
   980 ;; Hardware stack levels required when called:    4
   981 ;; This function calls:
   982 ;;		_millis
   983 ;;		_setMotores
   984 ;; This function is called by:
   985 ;;		_loop
   986 ;; This function uses a non-reentrant model
   987 ;;
   988                           
   989                           	psect	text2
   990  000220                     __ptext2:
   991                           	opt stack 0
   992  000220                     _estrategiaClasica:
   993                           	opt stack 25
   994                           
   995                           ;main.c: 101: static unsigned long m = 0;
   996                           ;main.c: 102: static char estado = ANALISIS;
   997                           ;main.c: 104: switch(estado){
   998                           
   999                           ;incstack = 0
  1000  000220  D0CF               	goto	l77
  1001  000222                     l78:
  1002                           
  1003                           ;main.c: 106: if((unsigned)!PORTBbits.RB3 || (unsigned)!PORTCbits.RC6){
  1004  000222  A681               	btfss	3969,3,c	;volatile
  1005  000224  D002               	goto	u2160
  1006  000226  BC82               	btfsc	3970,6,c	;volatile
  1007  000228  D00D               	goto	l79
  1008  00022A                     u2160:
  1009                           
  1010                           ;main.c: 107: estado = ATRAS;
  1011  00022A  0E08               	movlw	8
  1012  00022C  6E47               	movwf	estrategiaClasica@estado,c
  1013                           
  1014                           ;main.c: 108: m = millis();
  1015  00022E  ECB4  F006         	call	_millis	;wreg free
  1016  000232  C013  F03E         	movff	?_millis,estrategiaClasica@m
  1017  000236  C014  F03F         	movff	?_millis+1,estrategiaClasica@m+1
  1018  00023A  C015  F040         	movff	?_millis+2,estrategiaClasica@m+2
  1019  00023E  C016  F041         	movff	?_millis+3,estrategiaClasica@m+3
  1020                           
  1021                           ;main.c: 109: return;
  1022  000242  0012               	return	
  1023  000244                     l79:
  1024                           
  1025                           ;main.c: 110: }
  1026                           ;main.c: 112: if((unsigned)!PORTBbits.RB1){
  1027  000244  B281               	btfsc	3969,1,c	;volatile
  1028  000246  D017               	goto	l83
  1029                           
  1030                           ;main.c: 113: if((unsigned)!PORTBbits.RB4){
  1031  000248  B881               	btfsc	3969,4,c	;volatile
  1032  00024A  D008               	goto	l84
  1033                           
  1034                           ;main.c: 114: if((unsigned)!PORTCbits.RC5){
  1035  00024C  BA82               	btfsc	3970,5,c	;volatile
  1036  00024E  D003               	goto	l85
  1037                           
  1038                           ;main.c: 115: estado = ATAQUE;
  1039  000250  0E01               	movlw	1
  1040  000252  6E47               	movwf	estrategiaClasica@estado,c
  1041                           
  1042                           ;main.c: 116: return;
  1043  000254  0012               	return	
  1044  000256                     l85:
  1045                           
  1046                           ;main.c: 117: }
  1047                           ;main.c: 119: estado = IZQAV;
  1048  000256  0E07               	movlw	7
  1049  000258  6E47               	movwf	estrategiaClasica@estado,c
  1050                           
  1051                           ;main.c: 120: return;
  1052  00025A  0012               	return	
  1053  00025C                     l84:
  1054                           
  1055                           ;main.c: 121: }
  1056                           ;main.c: 123: if((unsigned)!PORTCbits.RC5){
  1057  00025C  BA82               	btfsc	3970,5,c	;volatile
  1058  00025E  D008               	goto	l86
  1059                           
  1060                           ;main.c: 124: if((unsigned)!PORTBbits.RB4){
  1061  000260  B881               	btfsc	3969,4,c	;volatile
  1062  000262  D003               	goto	l87
  1063                           
  1064                           ;main.c: 125: estado = ATAQUE;
  1065  000264  0E01               	movlw	1
  1066  000266  6E47               	movwf	estrategiaClasica@estado,c
  1067                           
  1068                           ;main.c: 126: return;
  1069  000268  0012               	return	
  1070  00026A                     l87:
  1071                           
  1072                           ;main.c: 127: }
  1073                           ;main.c: 129: estado = DERAV;
  1074  00026A  0E04               	movlw	4
  1075  00026C  6E47               	movwf	estrategiaClasica@estado,c
  1076                           
  1077                           ;main.c: 130: return;
  1078  00026E  0012               	return	
  1079  000270                     l86:
  1080                           
  1081                           ;main.c: 131: }
  1082                           ;main.c: 133: estado = ATAQUE;
  1083  000270  0E01               	movlw	1
  1084  000272  6E47               	movwf	estrategiaClasica@estado,c
  1085                           
  1086                           ;main.c: 134: return;
  1087  000274  0012               	return	
  1088  000276                     l83:
  1089                           
  1090                           ;main.c: 135: }
  1091                           ;main.c: 137: if((unsigned)!PORTBbits.RB4){
  1092  000276  B881               	btfsc	3969,4,c	;volatile
  1093  000278  D003               	goto	l88
  1094                           
  1095                           ;main.c: 138: estado = IZQA;
  1096  00027A  0E06               	movlw	6
  1097  00027C  6E47               	movwf	estrategiaClasica@estado,c
  1098                           
  1099                           ;main.c: 139: return;
  1100  00027E  0012               	return	
  1101  000280                     l88:
  1102                           
  1103                           ;main.c: 140: }
  1104                           ;main.c: 142: if((unsigned)!PORTCbits.RC5){
  1105  000280  BA82               	btfsc	3970,5,c	;volatile
  1106  000282  D003               	goto	l89
  1107                           
  1108                           ;main.c: 143: estado = DERA;
  1109  000284  0E03               	movlw	3
  1110  000286  6E47               	movwf	estrategiaClasica@estado,c
  1111                           
  1112                           ;main.c: 144: return;
  1113  000288  0012               	return	
  1114  00028A                     l89:
  1115                           
  1116                           ;main.c: 145: }
  1117                           ;main.c: 147: if((unsigned)!PORTBbits.RB5){
  1118  00028A  BA81               	btfsc	3969,5,c	;volatile
  1119  00028C  D003               	goto	l90
  1120                           
  1121                           ;main.c: 148: estado = IZQ;
  1122  00028E  0E05               	movlw	5
  1123  000290  6E47               	movwf	estrategiaClasica@estado,c
  1124                           
  1125                           ;main.c: 149: return;
  1126  000292  0012               	return	
  1127  000294                     l90:
  1128                           
  1129                           ;main.c: 150: }
  1130                           ;main.c: 152: if((unsigned)!PORTCbits.RC4){
  1131  000294  B882               	btfsc	3970,4,c	;volatile
  1132  000296  D003               	goto	l91
  1133                           
  1134                           ;main.c: 153: estado = DER;
  1135  000298  0E02               	movlw	2
  1136  00029A  6E47               	movwf	estrategiaClasica@estado,c
  1137                           
  1138                           ;main.c: 154: return;
  1139  00029C  0012               	return	
  1140  00029E                     l91:
  1141                           
  1142                           ;main.c: 155: }
  1143                           ;main.c: 157: estado = direccion;
  1144  00029E  C04C  F047         	movff	_direccion,estrategiaClasica@estado
  1145                           
  1146                           ;main.c: 158: return;
  1147  0002A2  0012               	return	
  1148  0002A4                     
  1149                           ;main.c: 161: setMotores(1000, 1000);
  1150  0002A4  0E03               	movlw	3
  1151  0002A6  6E37               	movwf	setMotores@speedI+1,c
  1152  0002A8  0EE8               	movlw	232
  1153  0002AA  6E36               	movwf	setMotores@speedI,c
  1154  0002AC  0E03               	movlw	3
  1155  0002AE  6E39               	movwf	setMotores@speedD+1,c
  1156  0002B0  0EE8               	movlw	232
  1157  0002B2  6E38               	movwf	setMotores@speedD,c
  1158  0002B4  ECFD  F001         	call	_setMotores	;wreg free
  1159                           
  1160                           ;main.c: 162: estado = ANALISIS;
  1161  0002B8  0E00               	movlw	0
  1162  0002BA  6E47               	movwf	estrategiaClasica@estado,c
  1163                           
  1164                           ;main.c: 163: return;
  1165  0002BC  0012               	return	
  1166  0002BE                     
  1167                           ;main.c: 166: setMotores(1000, 1000 / 2);
  1168  0002BE  0E03               	movlw	3
  1169  0002C0  6E37               	movwf	setMotores@speedI+1,c
  1170  0002C2  0EE8               	movlw	232
  1171  0002C4  6E36               	movwf	setMotores@speedI,c
  1172  0002C6  0E01               	movlw	1
  1173  0002C8  6E39               	movwf	setMotores@speedD+1,c
  1174  0002CA  0EF4               	movlw	244
  1175  0002CC  6E38               	movwf	setMotores@speedD,c
  1176  0002CE  ECFD  F001         	call	_setMotores	;wreg free
  1177                           
  1178                           ;main.c: 167: direccion = DER;
  1179  0002D2  0E02               	movlw	2
  1180  0002D4  6E4C               	movwf	_direccion,c
  1181                           
  1182                           ;main.c: 168: estado = ANALISIS;
  1183  0002D6  0E00               	movlw	0
  1184  0002D8  6E47               	movwf	estrategiaClasica@estado,c
  1185                           
  1186                           ;main.c: 169: return;
  1187  0002DA  0012               	return	
  1188  0002DC                     
  1189                           ;main.c: 172: setMotores(1000 / 2, 1000);
  1190  0002DC  0E01               	movlw	1
  1191  0002DE  6E37               	movwf	setMotores@speedI+1,c
  1192  0002E0  0EF4               	movlw	244
  1193  0002E2  6E36               	movwf	setMotores@speedI,c
  1194  0002E4  0E03               	movlw	3
  1195  0002E6  6E39               	movwf	setMotores@speedD+1,c
  1196  0002E8  0EE8               	movlw	232
  1197  0002EA  6E38               	movwf	setMotores@speedD,c
  1198  0002EC  ECFD  F001         	call	_setMotores	;wreg free
  1199                           
  1200                           ;main.c: 173: direccion = IZQ;
  1201  0002F0  0E05               	movlw	5
  1202  0002F2  6E4C               	movwf	_direccion,c
  1203                           
  1204                           ;main.c: 174: estado = ANALISIS;
  1205  0002F4  0E00               	movlw	0
  1206  0002F6  6E47               	movwf	estrategiaClasica@estado,c
  1207                           
  1208                           ;main.c: 175: return;
  1209  0002F8  0012               	return	
  1210  0002FA                     
  1211                           ;main.c: 178: if(millis() > (m + 300U)){
  1212  0002FA  ECB4  F006         	call	_millis	;wreg free
  1213  0002FE  0E2C               	movlw	44
  1214  000300  243E               	addwf	estrategiaClasica@m,w,c
  1215  000302  0100               	movlb	0	; () banked
  1216  000304  6F70               	movwf	??_estrategiaClasica& (0+255),b
  1217  000306  0E01               	movlw	1
  1218  000308  203F               	addwfc	estrategiaClasica@m+1,w,c
  1219  00030A  6F71               	movwf	(??_estrategiaClasica+1)& (0+255),b
  1220  00030C  0E00               	movlw	0
  1221  00030E  2040               	addwfc	estrategiaClasica@m+2,w,c
  1222  000310  6F72               	movwf	(??_estrategiaClasica+2)& (0+255),b
  1223  000312  0E00               	movlw	0
  1224  000314  2041               	addwfc	estrategiaClasica@m+3,w,c
  1225  000316  6F73               	movwf	(??_estrategiaClasica+3)& (0+255),b
  1226  000318  5013               	movf	?_millis,w,c
  1227  00031A  5D70               	subwf	??_estrategiaClasica& (0+255),w,b
  1228  00031C  5014               	movf	?_millis+1,w,c
  1229  00031E  5971               	subwfb	(??_estrategiaClasica+1)& (0+255),w,b
  1230  000320  5015               	movf	?_millis+2,w,c
  1231  000322  5972               	subwfb	(??_estrategiaClasica+2)& (0+255),w,b
  1232  000324  5016               	movf	?_millis+3,w,c
  1233  000326  5973               	subwfb	(??_estrategiaClasica+3)& (0+255),w,b
  1234  000328  B0D8               	btfsc	status,0,c
  1235  00032A  D003               	goto	l96
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;main.c: 179: estado = ANALISIS;
  1239  00032C  0E00               	movlw	0
  1240  00032E  6E47               	movwf	estrategiaClasica@estado,c
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;main.c: 180: return;
  1244  000330  0012               	return	
  1245  000332                     l96:
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;main.c: 181: }
  1249                           ;main.c: 183: setMotores(-1000, -1000);
  1250                           
  1251                           ; BSR set to: 0
  1252  000332  0EFC               	movlw	252
  1253  000334  6E37               	movwf	setMotores@speedI+1,c
  1254  000336  0E18               	movlw	24
  1255  000338  6E36               	movwf	setMotores@speedI,c
  1256  00033A  0EFC               	movlw	252
  1257  00033C  6E39               	movwf	setMotores@speedD+1,c
  1258  00033E  0E18               	movlw	24
  1259  000340  6E38               	movwf	setMotores@speedD,c
  1260  000342  ECFD  F001         	call	_setMotores	;wreg free
  1261                           
  1262                           ;main.c: 184: return;
  1263  000346  0012               	return	
  1264  000348                     
  1265                           ;main.c: 187: setMotores(0, 1000);
  1266  000348  0E00               	movlw	0
  1267  00034A  6E37               	movwf	setMotores@speedI+1,c
  1268  00034C  0E00               	movlw	0
  1269  00034E  6E36               	movwf	setMotores@speedI,c
  1270  000350  0E03               	movlw	3
  1271  000352  6E39               	movwf	setMotores@speedD+1,c
  1272  000354  0EE8               	movlw	232
  1273  000356  6E38               	movwf	setMotores@speedD,c
  1274  000358  ECFD  F001         	call	_setMotores	;wreg free
  1275                           
  1276                           ;main.c: 188: direccion = IZQ;
  1277  00035C  0E05               	movlw	5
  1278  00035E  6E4C               	movwf	_direccion,c
  1279                           
  1280                           ;main.c: 189: estado = ANALISIS;
  1281  000360  0E00               	movlw	0
  1282  000362  6E47               	movwf	estrategiaClasica@estado,c
  1283                           
  1284                           ;main.c: 190: return;
  1285  000364  0012               	return	
  1286  000366                     
  1287                           ;main.c: 193: setMotores(1000, 0);
  1288  000366  0E03               	movlw	3
  1289  000368  6E37               	movwf	setMotores@speedI+1,c
  1290  00036A  0EE8               	movlw	232
  1291  00036C  6E36               	movwf	setMotores@speedI,c
  1292  00036E  0E00               	movlw	0
  1293  000370  6E39               	movwf	setMotores@speedD+1,c
  1294  000372  0E00               	movlw	0
  1295  000374  6E38               	movwf	setMotores@speedD,c
  1296  000376  ECFD  F001         	call	_setMotores	;wreg free
  1297                           
  1298                           ;main.c: 194: direccion = DER;
  1299  00037A  0E02               	movlw	2
  1300  00037C  6E4C               	movwf	_direccion,c
  1301                           
  1302                           ;main.c: 195: estado = ANALISIS;
  1303  00037E  0E00               	movlw	0
  1304  000380  6E47               	movwf	estrategiaClasica@estado,c
  1305                           
  1306                           ;main.c: 196: return;
  1307  000382  0012               	return	
  1308  000384                     
  1309                           ;main.c: 199: setMotores(-700, 700);
  1310  000384  0EFD               	movlw	253
  1311  000386  6E37               	movwf	setMotores@speedI+1,c
  1312  000388  0E44               	movlw	68
  1313  00038A  6E36               	movwf	setMotores@speedI,c
  1314  00038C  0E02               	movlw	2
  1315  00038E  6E39               	movwf	setMotores@speedD+1,c
  1316  000390  0EBC               	movlw	188
  1317  000392  6E38               	movwf	setMotores@speedD,c
  1318  000394  ECFD  F001         	call	_setMotores	;wreg free
  1319                           
  1320                           ;main.c: 200: direccion = IZQ;
  1321  000398  0E05               	movlw	5
  1322  00039A  6E4C               	movwf	_direccion,c
  1323                           
  1324                           ;main.c: 201: estado = ANALISIS;
  1325  00039C  0E00               	movlw	0
  1326  00039E  6E47               	movwf	estrategiaClasica@estado,c
  1327                           
  1328                           ;main.c: 202: return;
  1329  0003A0  0012               	return	
  1330  0003A2                     
  1331                           ;main.c: 205: setMotores(700, -700);
  1332  0003A2  0E02               	movlw	2
  1333  0003A4  6E37               	movwf	setMotores@speedI+1,c
  1334  0003A6  0EBC               	movlw	188
  1335  0003A8  6E36               	movwf	setMotores@speedI,c
  1336  0003AA  0EFD               	movlw	253
  1337  0003AC  6E39               	movwf	setMotores@speedD+1,c
  1338  0003AE  0E44               	movlw	68
  1339  0003B0  6E38               	movwf	setMotores@speedD,c
  1340  0003B2  ECFD  F001         	call	_setMotores	;wreg free
  1341                           
  1342                           ;main.c: 206: direccion = DER;
  1343  0003B6  0E02               	movlw	2
  1344  0003B8  6E4C               	movwf	_direccion,c
  1345                           
  1346                           ;main.c: 207: estado = ANALISIS;
  1347  0003BA  0E00               	movlw	0
  1348  0003BC  6E47               	movwf	estrategiaClasica@estado,c
  1349                           
  1350                           ;main.c: 209: }
  1351                           
  1352                           ;main.c: 208: return;
  1353  0003BE  0012               	return	
  1354  0003C0                     l77:
  1355  0003C0  5047               	movf	estrategiaClasica@estado,w,c
  1356                           
  1357                           ; Switch size 1, requested type "space"
  1358                           ; Number of cases is 9, Range of values is 0 to 8
  1359                           ; switch strategies available:
  1360                           ; Name         Instructions Cycles
  1361                           ; simple_byte           28    15 (average)
  1362                           ;	Chosen strategy is simple_byte
  1363  0003C2  0A00               	xorlw	0	; case 0
  1364  0003C4  B4D8               	btfsc	status,2,c
  1365  0003C6  D72D               	goto	l78
  1366  0003C8  0A01               	xorlw	1	; case 1
  1367  0003CA  B4D8               	btfsc	status,2,c
  1368  0003CC  D76B               	goto	l92
  1369  0003CE  0A03               	xorlw	3	; case 2
  1370  0003D0  B4D8               	btfsc	status,2,c
  1371  0003D2  D7E7               	goto	l100
  1372  0003D4  0A01               	xorlw	1	; case 3
  1373  0003D6  B4D8               	btfsc	status,2,c
  1374  0003D8  D7C6               	goto	l98
  1375  0003DA  0A07               	xorlw	7	; case 4
  1376  0003DC  B4D8               	btfsc	status,2,c
  1377  0003DE  D76F               	goto	l93
  1378  0003E0  0A01               	xorlw	1	; case 5
  1379  0003E2  B4D8               	btfsc	status,2,c
  1380  0003E4  D7CF               	goto	l99
  1381  0003E6  0A03               	xorlw	3	; case 6
  1382  0003E8  B4D8               	btfsc	status,2,c
  1383  0003EA  D7AE               	goto	l97
  1384  0003EC  0A01               	xorlw	1	; case 7
  1385  0003EE  B4D8               	btfsc	status,2,c
  1386  0003F0  D775               	goto	l94
  1387  0003F2  0A0F               	xorlw	15	; case 8
  1388  0003F4  A4D8               	btfss	status,2,c
  1389  0003F6  0012               	return	
  1390  0003F8  D780               	goto	l95
  1391  0003FA                     __end_of_estrategiaClasica:
  1392                           	opt stack 0
  1393                           tblptru	equ	0xFF8
  1394                           tblptrh	equ	0xFF7
  1395                           tblptrl	equ	0xFF6
  1396                           tablat	equ	0xFF5
  1397                           postinc0	equ	0xFEE
  1398                           wreg	equ	0xFE8
  1399                           postdec1	equ	0xFE5
  1400                           fsr1l	equ	0xFE1
  1401                           status	equ	0xFD8
  1402                           
  1403 ;; *************** function _estrategiaCiego *****************
  1404 ;; Defined at:
  1405 ;;		line 212 in file "main.c"
  1406 ;; Parameters:    Size  Location     Type
  1407 ;;		None
  1408 ;; Auto vars:     Size  Location     Type
  1409 ;;		None
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  1    wreg      void 
  1412 ;; Registers used:
  1413 ;;		wreg, status,2, status,0, cstack
  1414 ;; Tracked objects:
  1415 ;;		On entry : 0/0
  1416 ;;		On exit  : 0/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1419 ;;      Params:         0       0       0       0       0       0       0       0       0
  1420 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1421 ;;      Temps:          0       4       0       0       0       0       0       0       0
  1422 ;;      Totals:         0       4       0       0       0       0       0       0       0
  1423 ;;Total ram usage:        4 bytes
  1424 ;; Hardware stack levels used:    1
  1425 ;; Hardware stack levels required when called:    4
  1426 ;; This function calls:
  1427 ;;		_millis
  1428 ;;		_setMotores
  1429 ;; This function is called by:
  1430 ;;		_loop
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434                           	psect	text3
  1435  0005D0                     __ptext3:
  1436                           	opt stack 0
  1437  0005D0                     _estrategiaCiego:
  1438                           	opt stack 25
  1439                           
  1440                           ;main.c: 213: static unsigned long m = 0;
  1441                           ;main.c: 214: static char estado = ANALISIS;
  1442                           ;main.c: 216: switch(estado){
  1443                           
  1444                           ;incstack = 0
  1445  0005D0  D0A0               	goto	l108
  1446  0005D2                     l109:
  1447                           
  1448                           ;main.c: 218: if((unsigned)!PORTBbits.RB3 || (unsigned)!PORTCbits.RC6){
  1449  0005D2  A681               	btfss	3969,3,c	;volatile
  1450  0005D4  D002               	goto	u2280
  1451  0005D6  BC82               	btfsc	3970,6,c	;volatile
  1452  0005D8  D00D               	goto	l110
  1453  0005DA                     u2280:
  1454                           
  1455                           ;main.c: 219: estado = ATRAS;
  1456  0005DA  0E08               	movlw	8
  1457  0005DC  6E46               	movwf	estrategiaCiego@estado,c
  1458                           
  1459                           ;main.c: 220: m = millis();
  1460  0005DE  ECB4  F006         	call	_millis	;wreg free
  1461  0005E2  C013  F03A         	movff	?_millis,estrategiaCiego@m
  1462  0005E6  C014  F03B         	movff	?_millis+1,estrategiaCiego@m+1
  1463  0005EA  C015  F03C         	movff	?_millis+2,estrategiaCiego@m+2
  1464  0005EE  C016  F03D         	movff	?_millis+3,estrategiaCiego@m+3
  1465                           
  1466                           ;main.c: 221: return;
  1467  0005F2  0012               	return	
  1468  0005F4                     l110:
  1469                           
  1470                           ;main.c: 222: }
  1471                           ;main.c: 224: estado = ATAQUE;
  1472  0005F4  0E01               	movlw	1
  1473  0005F6  6E46               	movwf	estrategiaCiego@estado,c
  1474                           
  1475                           ;main.c: 225: return;
  1476  0005F8  0012               	return	
  1477  0005FA                     
  1478                           ;main.c: 228: setMotores(1000, 1000);
  1479  0005FA  0E03               	movlw	3
  1480  0005FC  6E37               	movwf	setMotores@speedI+1,c
  1481  0005FE  0EE8               	movlw	232
  1482  000600  6E36               	movwf	setMotores@speedI,c
  1483  000602  0E03               	movlw	3
  1484  000604  6E39               	movwf	setMotores@speedD+1,c
  1485  000606  0EE8               	movlw	232
  1486  000608  6E38               	movwf	setMotores@speedD,c
  1487  00060A  ECFD  F001         	call	_setMotores	;wreg free
  1488                           
  1489                           ;main.c: 229: estado = ANALISIS;
  1490  00060E  0E00               	movlw	0
  1491  000610  6E46               	movwf	estrategiaCiego@estado,c
  1492                           
  1493                           ;main.c: 230: return;
  1494  000612  0012               	return	
  1495  000614                     
  1496                           ;main.c: 233: if(millis() > (m + 300U)){
  1497  000614  ECB4  F006         	call	_millis	;wreg free
  1498  000618  0E2C               	movlw	44
  1499  00061A  243A               	addwf	estrategiaCiego@m,w,c
  1500  00061C  0100               	movlb	0	; () banked
  1501  00061E  6F70               	movwf	??_estrategiaCiego& (0+255),b
  1502  000620  0E01               	movlw	1
  1503  000622  203B               	addwfc	estrategiaCiego@m+1,w,c
  1504  000624  6F71               	movwf	(??_estrategiaCiego+1)& (0+255),b
  1505  000626  0E00               	movlw	0
  1506  000628  203C               	addwfc	estrategiaCiego@m+2,w,c
  1507  00062A  6F72               	movwf	(??_estrategiaCiego+2)& (0+255),b
  1508  00062C  0E00               	movlw	0
  1509  00062E  203D               	addwfc	estrategiaCiego@m+3,w,c
  1510  000630  6F73               	movwf	(??_estrategiaCiego+3)& (0+255),b
  1511  000632  5013               	movf	?_millis,w,c
  1512  000634  5D70               	subwf	??_estrategiaCiego& (0+255),w,b
  1513  000636  5014               	movf	?_millis+1,w,c
  1514  000638  5971               	subwfb	(??_estrategiaCiego+1)& (0+255),w,b
  1515  00063A  5015               	movf	?_millis+2,w,c
  1516  00063C  5972               	subwfb	(??_estrategiaCiego+2)& (0+255),w,b
  1517  00063E  5016               	movf	?_millis+3,w,c
  1518  000640  5973               	subwfb	(??_estrategiaCiego+3)& (0+255),w,b
  1519  000642  B0D8               	btfsc	status,0,c
  1520  000644  D00D               	goto	l116
  1521                           
  1522                           ; BSR set to: 0
  1523                           ;main.c: 234: estado = direccion;
  1524  000646  C04C  F046         	movff	_direccion,estrategiaCiego@estado
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;main.c: 235: m = millis();
  1528  00064A  ECB4  F006         	call	_millis	;wreg free
  1529  00064E  C013  F03A         	movff	?_millis,estrategiaCiego@m
  1530  000652  C014  F03B         	movff	?_millis+1,estrategiaCiego@m+1
  1531  000656  C015  F03C         	movff	?_millis+2,estrategiaCiego@m+2
  1532  00065A  C016  F03D         	movff	?_millis+3,estrategiaCiego@m+3
  1533                           
  1534                           ;main.c: 236: return;
  1535  00065E  0012               	return	
  1536  000660                     l116:
  1537                           
  1538                           ;main.c: 237: }
  1539                           ;main.c: 239: setMotores(-1000, -1000);
  1540  000660  0EFC               	movlw	252
  1541  000662  6E37               	movwf	setMotores@speedI+1,c
  1542  000664  0E18               	movlw	24
  1543  000666  6E36               	movwf	setMotores@speedI,c
  1544  000668  0EFC               	movlw	252
  1545  00066A  6E39               	movwf	setMotores@speedD+1,c
  1546  00066C  0E18               	movlw	24
  1547  00066E  6E38               	movwf	setMotores@speedD,c
  1548  000670  ECFD  F001         	call	_setMotores	;wreg free
  1549                           
  1550                           ;main.c: 240: return;
  1551  000674  0012               	return	
  1552  000676                     
  1553                           ;main.c: 243: if(millis() > (m + 500U)){
  1554  000676  ECB4  F006         	call	_millis	;wreg free
  1555  00067A  0EF4               	movlw	244
  1556  00067C  243A               	addwf	estrategiaCiego@m,w,c
  1557  00067E  0100               	movlb	0	; () banked
  1558  000680  6F70               	movwf	??_estrategiaCiego& (0+255),b
  1559  000682  0E01               	movlw	1
  1560  000684  203B               	addwfc	estrategiaCiego@m+1,w,c
  1561  000686  6F71               	movwf	(??_estrategiaCiego+1)& (0+255),b
  1562  000688  0E00               	movlw	0
  1563  00068A  203C               	addwfc	estrategiaCiego@m+2,w,c
  1564  00068C  6F72               	movwf	(??_estrategiaCiego+2)& (0+255),b
  1565  00068E  0E00               	movlw	0
  1566  000690  203D               	addwfc	estrategiaCiego@m+3,w,c
  1567  000692  6F73               	movwf	(??_estrategiaCiego+3)& (0+255),b
  1568  000694  5013               	movf	?_millis,w,c
  1569  000696  5D70               	subwf	??_estrategiaCiego& (0+255),w,b
  1570  000698  5014               	movf	?_millis+1,w,c
  1571  00069A  5971               	subwfb	(??_estrategiaCiego+1)& (0+255),w,b
  1572  00069C  5015               	movf	?_millis+2,w,c
  1573  00069E  5972               	subwfb	(??_estrategiaCiego+2)& (0+255),w,b
  1574  0006A0  5016               	movf	?_millis+3,w,c
  1575  0006A2  5973               	subwfb	(??_estrategiaCiego+3)& (0+255),w,b
  1576  0006A4  B0D8               	btfsc	status,0,c
  1577  0006A6  D003               	goto	l118
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;main.c: 244: estado = ANALISIS;
  1581  0006A8  0E00               	movlw	0
  1582  0006AA  6E46               	movwf	estrategiaCiego@estado,c
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;main.c: 245: return;
  1586  0006AC  0012               	return	
  1587  0006AE                     l118:
  1588                           
  1589                           ; BSR set to: 0
  1590                           ;main.c: 246: }
  1591                           ;main.c: 248: setMotores(700, -700);
  1592                           
  1593                           ; BSR set to: 0
  1594  0006AE  0E02               	movlw	2
  1595  0006B0  6E37               	movwf	setMotores@speedI+1,c
  1596  0006B2  0EBC               	movlw	188
  1597  0006B4  6E36               	movwf	setMotores@speedI,c
  1598  0006B6  0EFD               	movlw	253
  1599  0006B8  6E39               	movwf	setMotores@speedD+1,c
  1600  0006BA  0E44               	movlw	68
  1601  0006BC  6E38               	movwf	setMotores@speedD,c
  1602  0006BE  ECFD  F001         	call	_setMotores	;wreg free
  1603                           
  1604                           ;main.c: 249: return;
  1605  0006C2  0012               	return	
  1606  0006C4                     
  1607                           ;main.c: 252: if(millis() > (m + 500U)){
  1608  0006C4  ECB4  F006         	call	_millis	;wreg free
  1609  0006C8  0EF4               	movlw	244
  1610  0006CA  243A               	addwf	estrategiaCiego@m,w,c
  1611  0006CC  0100               	movlb	0	; () banked
  1612  0006CE  6F70               	movwf	??_estrategiaCiego& (0+255),b
  1613  0006D0  0E01               	movlw	1
  1614  0006D2  203B               	addwfc	estrategiaCiego@m+1,w,c
  1615  0006D4  6F71               	movwf	(??_estrategiaCiego+1)& (0+255),b
  1616  0006D6  0E00               	movlw	0
  1617  0006D8  203C               	addwfc	estrategiaCiego@m+2,w,c
  1618  0006DA  6F72               	movwf	(??_estrategiaCiego+2)& (0+255),b
  1619  0006DC  0E00               	movlw	0
  1620  0006DE  203D               	addwfc	estrategiaCiego@m+3,w,c
  1621  0006E0  6F73               	movwf	(??_estrategiaCiego+3)& (0+255),b
  1622  0006E2  5013               	movf	?_millis,w,c
  1623  0006E4  5D70               	subwf	??_estrategiaCiego& (0+255),w,b
  1624  0006E6  5014               	movf	?_millis+1,w,c
  1625  0006E8  5971               	subwfb	(??_estrategiaCiego+1)& (0+255),w,b
  1626  0006EA  5015               	movf	?_millis+2,w,c
  1627  0006EC  5972               	subwfb	(??_estrategiaCiego+2)& (0+255),w,b
  1628  0006EE  5016               	movf	?_millis+3,w,c
  1629  0006F0  5973               	subwfb	(??_estrategiaCiego+3)& (0+255),w,b
  1630  0006F2  B0D8               	btfsc	status,0,c
  1631  0006F4  D003               	goto	l120
  1632                           
  1633                           ; BSR set to: 0
  1634                           ;main.c: 253: estado = ANALISIS;
  1635  0006F6  0E00               	movlw	0
  1636  0006F8  6E46               	movwf	estrategiaCiego@estado,c
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;main.c: 254: return;
  1640  0006FA  0012               	return	
  1641  0006FC                     l120:
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;main.c: 255: }
  1645                           ;main.c: 257: setMotores(-700, 700);
  1646                           
  1647                           ; BSR set to: 0
  1648  0006FC  0EFD               	movlw	253
  1649  0006FE  6E37               	movwf	setMotores@speedI+1,c
  1650  000700  0E44               	movlw	68
  1651  000702  6E36               	movwf	setMotores@speedI,c
  1652  000704  0E02               	movlw	2
  1653  000706  6E39               	movwf	setMotores@speedD+1,c
  1654  000708  0EBC               	movlw	188
  1655  00070A  6E38               	movwf	setMotores@speedD,c
  1656  00070C  ECFD  F001         	call	_setMotores	;wreg free
  1657                           
  1658                           ;main.c: 259: }
  1659                           
  1660                           ;main.c: 258: return;
  1661  000710  0012               	return	
  1662  000712                     l108:
  1663  000712  5046               	movf	estrategiaCiego@estado,w,c
  1664                           
  1665                           ; Switch size 1, requested type "space"
  1666                           ; Number of cases is 5, Range of values is 0 to 8
  1667                           ; switch strategies available:
  1668                           ; Name         Instructions Cycles
  1669                           ; simple_byte           16     9 (average)
  1670                           ;	Chosen strategy is simple_byte
  1671  000714  0A00               	xorlw	0	; case 0
  1672  000716  B4D8               	btfsc	status,2,c
  1673  000718  D75C               	goto	l109
  1674  00071A  0A01               	xorlw	1	; case 1
  1675  00071C  B4D8               	btfsc	status,2,c
  1676  00071E  D76D               	goto	l114
  1677  000720  0A03               	xorlw	3	; case 2
  1678  000722  B4D8               	btfsc	status,2,c
  1679  000724  D7A8               	goto	l117
  1680  000726  0A07               	xorlw	7	; case 5
  1681  000728  B4D8               	btfsc	status,2,c
  1682  00072A  D7CC               	goto	l119
  1683  00072C  0A0D               	xorlw	13	; case 8
  1684  00072E  A4D8               	btfss	status,2,c
  1685  000730  0012               	return	
  1686  000732  D770               	goto	l115
  1687  000734                     __end_of_estrategiaCiego:
  1688                           	opt stack 0
  1689                           tblptru	equ	0xFF8
  1690                           tblptrh	equ	0xFF7
  1691                           tblptrl	equ	0xFF6
  1692                           tablat	equ	0xFF5
  1693                           postinc0	equ	0xFEE
  1694                           wreg	equ	0xFE8
  1695                           postdec1	equ	0xFE5
  1696                           fsr1l	equ	0xFE1
  1697                           status	equ	0xFD8
  1698                           
  1699 ;; *************** function _estrategiaAtras *****************
  1700 ;; Defined at:
  1701 ;;		line 295 in file "main.c"
  1702 ;; Parameters:    Size  Location     Type
  1703 ;;		None
  1704 ;; Auto vars:     Size  Location     Type
  1705 ;;		None
  1706 ;; Return value:  Size  Location     Type
  1707 ;;                  1    wreg      void 
  1708 ;; Registers used:
  1709 ;;		wreg, status,2, status,0, cstack
  1710 ;; Tracked objects:
  1711 ;;		On entry : 0/0
  1712 ;;		On exit  : 0/0
  1713 ;;		Unchanged: 0/0
  1714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1715 ;;      Params:         0       0       0       0       0       0       0       0       0
  1716 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1717 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1718 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1719 ;;Total ram usage:        0 bytes
  1720 ;; Hardware stack levels used:    1
  1721 ;; Hardware stack levels required when called:    4
  1722 ;; This function calls:
  1723 ;;		_millis
  1724 ;;		_setMotores
  1725 ;; This function is called by:
  1726 ;;		_loop
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           	psect	text4
  1731  00082C                     __ptext4:
  1732                           	opt stack 0
  1733  00082C                     _estrategiaAtras:
  1734                           	opt stack 25
  1735                           
  1736                           ;main.c: 296: static unsigned long m = 0;
  1737                           ;main.c: 297: static char estado = POSICIONAR;
  1738                           ;main.c: 299: if((unsigned)!PORTBbits.RB5 || (unsigned)!PORTBbits.RB4 || (unsigned)!PORT
      +                          Bbits.RB1 || (unsigned)!PORTCbits.RC5 || (unsigned)!PORTCbits.RC4 || (unsigned)!PORTBbit
      +                          s.RB3 || (unsigned)!PORTCbits.RC6){
  1739                           
  1740                           ;incstack = 0
  1741  00082C  BA81               	btfsc	3969,5,c	;volatile
  1742  00082E  A881               	btfss	3969,4,c	;volatile
  1743  000830  D008               	goto	u2460
  1744  000832  B281               	btfsc	3969,1,c	;volatile
  1745  000834  AA82               	btfss	3970,5,c	;volatile
  1746  000836  D005               	goto	u2460
  1747  000838  B882               	btfsc	3970,4,c	;volatile
  1748  00083A  A681               	btfss	3969,3,c	;volatile
  1749  00083C  D002               	goto	u2460
  1750  00083E  BC82               	btfsc	3970,6,c	;volatile
  1751  000840  D003               	goto	l144
  1752  000842                     u2460:
  1753                           
  1754                           ;main.c: 300: estadoMenu = E_CLASICA;
  1755  000842  0E03               	movlw	3
  1756  000844  6E48               	movwf	_estadoMenu,c
  1757                           
  1758                           ;main.c: 301: return;
  1759  000846  0012               	return	
  1760  000848                     l144:
  1761                           
  1762                           ;main.c: 302: }
  1763                           ;main.c: 304: if(millis() < m)
  1764  000848  ECB4  F006         	call	_millis	;wreg free
  1765  00084C  0100               	movlb	0	; () banked
  1766  00084E  517F               	movf	estrategiaAtras@m& (0+255),w,b
  1767  000850  5C13               	subwf	?_millis,w,c
  1768  000852  5180               	movf	(estrategiaAtras@m+1)& (0+255),w,b
  1769  000854  5814               	subwfb	?_millis+1,w,c
  1770  000856  5181               	movf	(estrategiaAtras@m+2)& (0+255),w,b
  1771  000858  5815               	subwfb	?_millis+2,w,c
  1772  00085A  5182               	movf	(estrategiaAtras@m+3)& (0+255),w,b
  1773  00085C  5816               	subwfb	?_millis+3,w,c
  1774  00085E  A0D8               	btfss	status,0,c
  1775  000860  0012               	return	
  1776  000862  D054               	goto	l149
  1777  000864                     
  1778                           ; BSR set to: 0
  1779                           ;main.c: 309: setMotores(0, -1000);
  1780                           
  1781                           ; BSR set to: 0
  1782  000864  0E00               	movlw	0
  1783  000866  6E37               	movwf	setMotores@speedI+1,c
  1784  000868  0E00               	movlw	0
  1785  00086A  6E36               	movwf	setMotores@speedI,c
  1786  00086C  0EFC               	movlw	252
  1787  00086E  6E39               	movwf	setMotores@speedD+1,c
  1788  000870  0E18               	movlw	24
  1789  000872  6E38               	movwf	setMotores@speedD,c
  1790  000874  ECFD  F001         	call	_setMotores	;wreg free
  1791                           
  1792                           ;main.c: 310: m = millis() + 800U;
  1793  000878  ECB4  F006         	call	_millis	;wreg free
  1794  00087C  0E20               	movlw	32
  1795  00087E  2413               	addwf	?_millis,w,c
  1796  000880  0100               	movlb	0	; () banked
  1797  000882  6F7F               	movwf	estrategiaAtras@m& (0+255),b
  1798  000884  0E03               	movlw	3
  1799  000886  2014               	addwfc	?_millis+1,w,c
  1800  000888  6F80               	movwf	(estrategiaAtras@m+1)& (0+255),b
  1801  00088A  0E00               	movlw	0
  1802  00088C  2015               	addwfc	?_millis+2,w,c
  1803  00088E  6F81               	movwf	(estrategiaAtras@m+2)& (0+255),b
  1804  000890  0E00               	movlw	0
  1805  000892  2016               	addwfc	?_millis+3,w,c
  1806  000894  6F82               	movwf	(estrategiaAtras@m+3)& (0+255),b
  1807                           
  1808                           ; BSR set to: 0
  1809                           ;main.c: 311: estado = AVANZAR;
  1810  000896  0E0A               	movlw	10
  1811  000898  6E49               	movwf	estrategiaAtras@estado,c
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;main.c: 312: return;
  1815  00089A  0012               	return	
  1816  00089C                     
  1817                           ; BSR set to: 0
  1818                           ;main.c: 315: setMotores(1000, 1000);
  1819                           
  1820                           ; BSR set to: 0
  1821  00089C  0E03               	movlw	3
  1822  00089E  6E37               	movwf	setMotores@speedI+1,c
  1823  0008A0  0EE8               	movlw	232
  1824  0008A2  6E36               	movwf	setMotores@speedI,c
  1825  0008A4  0E03               	movlw	3
  1826  0008A6  6E39               	movwf	setMotores@speedD+1,c
  1827  0008A8  0EE8               	movlw	232
  1828  0008AA  6E38               	movwf	setMotores@speedD,c
  1829  0008AC  ECFD  F001         	call	_setMotores	;wreg free
  1830                           
  1831                           ;main.c: 316: m = millis() + 100U;
  1832  0008B0  0E64               	movlw	100
  1833  0008B2  ECB4  F006         	call	_millis	;wreg free
  1834  0008B6  2413               	addwf	?_millis,w,c
  1835  0008B8  0100               	movlb	0	; () banked
  1836  0008BA  6F7F               	movwf	estrategiaAtras@m& (0+255),b
  1837  0008BC  0E00               	movlw	0
  1838  0008BE  2014               	addwfc	?_millis+1,w,c
  1839  0008C0  6F80               	movwf	(estrategiaAtras@m+1)& (0+255),b
  1840  0008C2  0E00               	movlw	0
  1841  0008C4  2015               	addwfc	?_millis+2,w,c
  1842  0008C6  6F81               	movwf	(estrategiaAtras@m+2)& (0+255),b
  1843  0008C8  0E00               	movlw	0
  1844  0008CA  2016               	addwfc	?_millis+3,w,c
  1845  0008CC  6F82               	movwf	(estrategiaAtras@m+3)& (0+255),b
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;main.c: 317: estado = FRENAR;
  1849  0008CE  0E0B               	movlw	11
  1850  0008D0  6E49               	movwf	estrategiaAtras@estado,c
  1851                           
  1852                           ; BSR set to: 0
  1853                           ;main.c: 318: return;
  1854  0008D2  0012               	return	
  1855  0008D4                     
  1856                           ; BSR set to: 0
  1857                           ;main.c: 321: setMotores(0, 0);
  1858                           
  1859                           ; BSR set to: 0
  1860  0008D4  0E00               	movlw	0
  1861  0008D6  6E37               	movwf	setMotores@speedI+1,c
  1862  0008D8  0E00               	movlw	0
  1863  0008DA  6E36               	movwf	setMotores@speedI,c
  1864  0008DC  0E00               	movlw	0
  1865  0008DE  6E39               	movwf	setMotores@speedD+1,c
  1866  0008E0  0E00               	movlw	0
  1867  0008E2  6E38               	movwf	setMotores@speedD,c
  1868  0008E4  ECFD  F001         	call	_setMotores	;wreg free
  1869                           
  1870                           ;main.c: 322: m = millis() + 500U;
  1871  0008E8  ECB4  F006         	call	_millis	;wreg free
  1872  0008EC  0EF4               	movlw	244
  1873  0008EE  2413               	addwf	?_millis,w,c
  1874  0008F0  0100               	movlb	0	; () banked
  1875  0008F2  6F7F               	movwf	estrategiaAtras@m& (0+255),b
  1876  0008F4  0E01               	movlw	1
  1877  0008F6  2014               	addwfc	?_millis+1,w,c
  1878  0008F8  6F80               	movwf	(estrategiaAtras@m+1)& (0+255),b
  1879  0008FA  0E00               	movlw	0
  1880  0008FC  2015               	addwfc	?_millis+2,w,c
  1881  0008FE  6F81               	movwf	(estrategiaAtras@m+2)& (0+255),b
  1882  000900  0E00               	movlw	0
  1883  000902  2016               	addwfc	?_millis+3,w,c
  1884  000904  6F82               	movwf	(estrategiaAtras@m+3)& (0+255),b
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;main.c: 323: estado = AVANZAR;
  1888  000906  0E0A               	movlw	10
  1889  000908  6E49               	movwf	estrategiaAtras@estado,c
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;main.c: 325: }
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;main.c: 324: return;
  1896  00090A  0012               	return	
  1897  00090C                     l149:
  1898                           
  1899                           ; BSR set to: 0
  1900                           
  1901                           ; BSR set to: 0
  1902  00090C  5049               	movf	estrategiaAtras@estado,w,c
  1903                           
  1904                           ; Switch size 1, requested type "space"
  1905                           ; Number of cases is 3, Range of values is 9 to 11
  1906                           ; switch strategies available:
  1907                           ; Name         Instructions Cycles
  1908                           ; simple_byte           10     6 (average)
  1909                           ;	Chosen strategy is simple_byte
  1910  00090E  0A09               	xorlw	9	; case 9
  1911  000910  B4D8               	btfsc	status,2,c
  1912  000912  D7A8               	goto	l150
  1913  000914  0A03               	xorlw	3	; case 10
  1914  000916  B4D8               	btfsc	status,2,c
  1915  000918  D7C1               	goto	l151
  1916  00091A  0A01               	xorlw	1	; case 11
  1917  00091C  A4D8               	btfss	status,2,c
  1918  00091E  0012               	return	
  1919  000920  D7D9               	goto	l152
  1920  000922                     __end_of_estrategiaAtras:
  1921                           	opt stack 0
  1922                           tblptru	equ	0xFF8
  1923                           tblptrh	equ	0xFF7
  1924                           tblptrl	equ	0xFF6
  1925                           tablat	equ	0xFF5
  1926                           postinc0	equ	0xFEE
  1927                           wreg	equ	0xFE8
  1928                           postdec1	equ	0xFE5
  1929                           fsr1l	equ	0xFE1
  1930                           status	equ	0xFD8
  1931                           
  1932 ;; *************** function _estrategiaAdelante *****************
  1933 ;; Defined at:
  1934 ;;		line 262 in file "main.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;		None
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;		None
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1    wreg      void 
  1941 ;; Registers used:
  1942 ;;		wreg, status,2, status,0, cstack
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1948 ;;      Params:         0       0       0       0       0       0       0       0       0
  1949 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1950 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1951 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1952 ;;Total ram usage:        0 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    4
  1955 ;; This function calls:
  1956 ;;		_millis
  1957 ;;		_setMotores
  1958 ;; This function is called by:
  1959 ;;		_loop
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	text5
  1964  000922                     __ptext5:
  1965                           	opt stack 0
  1966  000922                     _estrategiaAdelante:
  1967                           	opt stack 25
  1968                           
  1969                           ;main.c: 263: static unsigned long m = 0;
  1970                           ;main.c: 264: static char estado = POSICIONAR;
  1971                           ;main.c: 266: if((unsigned)!PORTBbits.RB5 || (unsigned)!PORTBbits.RB4 || (unsigned)!PORT
      +                          Bbits.RB1 || (unsigned)!PORTCbits.RC5 || (unsigned)!PORTCbits.RC4 || (unsigned)!PORTBbit
      +                          s.RB3 || (unsigned)!PORTCbits.RC6){
  1972                           
  1973                           ;incstack = 0
  1974  000922  BA81               	btfsc	3969,5,c	;volatile
  1975  000924  A881               	btfss	3969,4,c	;volatile
  1976  000926  D008               	goto	u2380
  1977  000928  B281               	btfsc	3969,1,c	;volatile
  1978  00092A  AA82               	btfss	3970,5,c	;volatile
  1979  00092C  D005               	goto	u2380
  1980  00092E  B882               	btfsc	3970,4,c	;volatile
  1981  000930  A681               	btfss	3969,3,c	;volatile
  1982  000932  D002               	goto	u2380
  1983  000934  BC82               	btfsc	3970,6,c	;volatile
  1984  000936  D003               	goto	l128
  1985  000938                     u2380:
  1986                           
  1987                           ;main.c: 267: estadoMenu = E_CLASICA;
  1988  000938  0E03               	movlw	3
  1989  00093A  6E48               	movwf	_estadoMenu,c
  1990                           
  1991                           ;main.c: 268: return;
  1992  00093C  0012               	return	
  1993  00093E                     l128:
  1994                           
  1995                           ;main.c: 269: }
  1996                           ;main.c: 271: if(millis() < m)
  1997  00093E  ECB4  F006         	call	_millis	;wreg free
  1998  000942  0100               	movlb	0	; () banked
  1999  000944  5183               	movf	estrategiaAdelante@m& (0+255),w,b
  2000  000946  5C13               	subwf	?_millis,w,c
  2001  000948  5184               	movf	(estrategiaAdelante@m+1)& (0+255),w,b
  2002  00094A  5814               	subwfb	?_millis+1,w,c
  2003  00094C  5185               	movf	(estrategiaAdelante@m+2)& (0+255),w,b
  2004  00094E  5815               	subwfb	?_millis+2,w,c
  2005  000950  5186               	movf	(estrategiaAdelante@m+3)& (0+255),w,b
  2006  000952  5816               	subwfb	?_millis+3,w,c
  2007  000954  A0D8               	btfss	status,0,c
  2008  000956  0012               	return	
  2009  000958  D054               	goto	l133
  2010  00095A                     
  2011                           ; BSR set to: 0
  2012                           ;main.c: 276: setMotores(1000, 0);
  2013                           
  2014                           ; BSR set to: 0
  2015  00095A  0E03               	movlw	3
  2016  00095C  6E37               	movwf	setMotores@speedI+1,c
  2017  00095E  0EE8               	movlw	232
  2018  000960  6E36               	movwf	setMotores@speedI,c
  2019  000962  0E00               	movlw	0
  2020  000964  6E39               	movwf	setMotores@speedD+1,c
  2021  000966  0E00               	movlw	0
  2022  000968  6E38               	movwf	setMotores@speedD,c
  2023  00096A  ECFD  F001         	call	_setMotores	;wreg free
  2024                           
  2025                           ;main.c: 277: m = millis() + 400U;
  2026  00096E  ECB4  F006         	call	_millis	;wreg free
  2027  000972  0E90               	movlw	144
  2028  000974  2413               	addwf	?_millis,w,c
  2029  000976  0100               	movlb	0	; () banked
  2030  000978  6F83               	movwf	estrategiaAdelante@m& (0+255),b
  2031  00097A  0E01               	movlw	1
  2032  00097C  2014               	addwfc	?_millis+1,w,c
  2033  00097E  6F84               	movwf	(estrategiaAdelante@m+1)& (0+255),b
  2034  000980  0E00               	movlw	0
  2035  000982  2015               	addwfc	?_millis+2,w,c
  2036  000984  6F85               	movwf	(estrategiaAdelante@m+2)& (0+255),b
  2037  000986  0E00               	movlw	0
  2038  000988  2016               	addwfc	?_millis+3,w,c
  2039  00098A  6F86               	movwf	(estrategiaAdelante@m+3)& (0+255),b
  2040                           
  2041                           ; BSR set to: 0
  2042                           ;main.c: 278: estado = AVANZAR;
  2043  00098C  0E0A               	movlw	10
  2044  00098E  6E4A               	movwf	estrategiaAdelante@estado,c
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;main.c: 279: return;
  2048  000990  0012               	return	
  2049  000992                     
  2050                           ; BSR set to: 0
  2051                           ;main.c: 282: setMotores(1000, 1000);
  2052                           
  2053                           ; BSR set to: 0
  2054  000992  0E03               	movlw	3
  2055  000994  6E37               	movwf	setMotores@speedI+1,c
  2056  000996  0EE8               	movlw	232
  2057  000998  6E36               	movwf	setMotores@speedI,c
  2058  00099A  0E03               	movlw	3
  2059  00099C  6E39               	movwf	setMotores@speedD+1,c
  2060  00099E  0EE8               	movlw	232
  2061  0009A0  6E38               	movwf	setMotores@speedD,c
  2062  0009A2  ECFD  F001         	call	_setMotores	;wreg free
  2063                           
  2064                           ;main.c: 283: m = millis() + 100U;
  2065  0009A6  0E64               	movlw	100
  2066  0009A8  ECB4  F006         	call	_millis	;wreg free
  2067  0009AC  2413               	addwf	?_millis,w,c
  2068  0009AE  0100               	movlb	0	; () banked
  2069  0009B0  6F83               	movwf	estrategiaAdelante@m& (0+255),b
  2070  0009B2  0E00               	movlw	0
  2071  0009B4  2014               	addwfc	?_millis+1,w,c
  2072  0009B6  6F84               	movwf	(estrategiaAdelante@m+1)& (0+255),b
  2073  0009B8  0E00               	movlw	0
  2074  0009BA  2015               	addwfc	?_millis+2,w,c
  2075  0009BC  6F85               	movwf	(estrategiaAdelante@m+2)& (0+255),b
  2076  0009BE  0E00               	movlw	0
  2077  0009C0  2016               	addwfc	?_millis+3,w,c
  2078  0009C2  6F86               	movwf	(estrategiaAdelante@m+3)& (0+255),b
  2079                           
  2080                           ; BSR set to: 0
  2081                           ;main.c: 284: estado = FRENAR;
  2082  0009C4  0E0B               	movlw	11
  2083  0009C6  6E4A               	movwf	estrategiaAdelante@estado,c
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;main.c: 285: return;
  2087  0009C8  0012               	return	
  2088  0009CA                     
  2089                           ; BSR set to: 0
  2090                           ;main.c: 288: setMotores(0, 0);
  2091                           
  2092                           ; BSR set to: 0
  2093  0009CA  0E00               	movlw	0
  2094  0009CC  6E37               	movwf	setMotores@speedI+1,c
  2095  0009CE  0E00               	movlw	0
  2096  0009D0  6E36               	movwf	setMotores@speedI,c
  2097  0009D2  0E00               	movlw	0
  2098  0009D4  6E39               	movwf	setMotores@speedD+1,c
  2099  0009D6  0E00               	movlw	0
  2100  0009D8  6E38               	movwf	setMotores@speedD,c
  2101  0009DA  ECFD  F001         	call	_setMotores	;wreg free
  2102                           
  2103                           ;main.c: 289: m = millis() + 500U;
  2104  0009DE  ECB4  F006         	call	_millis	;wreg free
  2105  0009E2  0EF4               	movlw	244
  2106  0009E4  2413               	addwf	?_millis,w,c
  2107  0009E6  0100               	movlb	0	; () banked
  2108  0009E8  6F83               	movwf	estrategiaAdelante@m& (0+255),b
  2109  0009EA  0E01               	movlw	1
  2110  0009EC  2014               	addwfc	?_millis+1,w,c
  2111  0009EE  6F84               	movwf	(estrategiaAdelante@m+1)& (0+255),b
  2112  0009F0  0E00               	movlw	0
  2113  0009F2  2015               	addwfc	?_millis+2,w,c
  2114  0009F4  6F85               	movwf	(estrategiaAdelante@m+2)& (0+255),b
  2115  0009F6  0E00               	movlw	0
  2116  0009F8  2016               	addwfc	?_millis+3,w,c
  2117  0009FA  6F86               	movwf	(estrategiaAdelante@m+3)& (0+255),b
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;main.c: 290: estado = AVANZAR;
  2121  0009FC  0E0A               	movlw	10
  2122  0009FE  6E4A               	movwf	estrategiaAdelante@estado,c
  2123                           
  2124                           ; BSR set to: 0
  2125                           ;main.c: 292: }
  2126                           
  2127                           ; BSR set to: 0
  2128                           ;main.c: 291: return;
  2129  000A00  0012               	return	
  2130  000A02                     l133:
  2131                           
  2132                           ; BSR set to: 0
  2133                           
  2134                           ; BSR set to: 0
  2135  000A02  504A               	movf	estrategiaAdelante@estado,w,c
  2136                           
  2137                           ; Switch size 1, requested type "space"
  2138                           ; Number of cases is 3, Range of values is 9 to 11
  2139                           ; switch strategies available:
  2140                           ; Name         Instructions Cycles
  2141                           ; simple_byte           10     6 (average)
  2142                           ;	Chosen strategy is simple_byte
  2143  000A04  0A09               	xorlw	9	; case 9
  2144  000A06  B4D8               	btfsc	status,2,c
  2145  000A08  D7A8               	goto	l134
  2146  000A0A  0A03               	xorlw	3	; case 10
  2147  000A0C  B4D8               	btfsc	status,2,c
  2148  000A0E  D7C1               	goto	l135
  2149  000A10  0A01               	xorlw	1	; case 11
  2150  000A12  A4D8               	btfss	status,2,c
  2151  000A14  0012               	return	
  2152  000A16  D7D9               	goto	l136
  2153  000A18                     __end_of_estrategiaAdelante:
  2154                           	opt stack 0
  2155                           tblptru	equ	0xFF8
  2156                           tblptrh	equ	0xFF7
  2157                           tblptrl	equ	0xFF6
  2158                           tablat	equ	0xFF5
  2159                           postinc0	equ	0xFEE
  2160                           wreg	equ	0xFE8
  2161                           postdec1	equ	0xFE5
  2162                           fsr1l	equ	0xFE1
  2163                           status	equ	0xFD8
  2164                           
  2165 ;; *************** function _millis *****************
  2166 ;; Defined at:
  2167 ;;		line 87 in file "funciones.c"
  2168 ;; Parameters:    Size  Location     Type
  2169 ;;		None
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;		None
  2172 ;; Return value:  Size  Location     Type
  2173 ;;                  4   18[COMRAM] unsigned long 
  2174 ;; Registers used:
  2175 ;;		None
  2176 ;; Tracked objects:
  2177 ;;		On entry : 0/0
  2178 ;;		On exit  : 0/0
  2179 ;;		Unchanged: 0/0
  2180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2181 ;;      Params:         4       0       0       0       0       0       0       0       0
  2182 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2183 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2184 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2185 ;;Total ram usage:        4 bytes
  2186 ;; Hardware stack levels used:    1
  2187 ;; Hardware stack levels required when called:    1
  2188 ;; This function calls:
  2189 ;;		Nothing
  2190 ;; This function is called by:
  2191 ;;		_loop
  2192 ;;		_estrategiaClasica
  2193 ;;		_estrategiaCiego
  2194 ;;		_estrategiaAdelante
  2195 ;;		_estrategiaAtras
  2196 ;; This function uses a non-reentrant model
  2197 ;;
  2198                           
  2199                           	psect	text6
  2200  000D68                     __ptext6:
  2201                           	opt stack 0
  2202  000D68                     _millis:
  2203                           	opt stack 28
  2204                           
  2205                           ;funciones.c: 88: return millisCounter;
  2206                           
  2207                           ;incstack = 0
  2208  000D68  C07B  F013         	movff	_millisCounter,?_millis
  2209  000D6C  C07C  F014         	movff	_millisCounter+1,?_millis+1
  2210  000D70  C07D  F015         	movff	_millisCounter+2,?_millis+2
  2211  000D74  C07E  F016         	movff	_millisCounter+3,?_millis+3
  2212  000D78  0012               	return		;funcret
  2213  000D7A                     __end_of_millis:
  2214                           	opt stack 0
  2215                           tblptru	equ	0xFF8
  2216                           tblptrh	equ	0xFF7
  2217                           tblptrl	equ	0xFF6
  2218                           tablat	equ	0xFF5
  2219                           postinc0	equ	0xFEE
  2220                           wreg	equ	0xFE8
  2221                           postdec1	equ	0xFE5
  2222                           fsr1l	equ	0xFE1
  2223                           status	equ	0xFD8
  2224                           
  2225 ;; *************** function _init *****************
  2226 ;; Defined at:
  2227 ;;		line 5 in file "funciones.c"
  2228 ;; Parameters:    Size  Location     Type
  2229 ;;		None
  2230 ;; Auto vars:     Size  Location     Type
  2231 ;;		None
  2232 ;; Return value:  Size  Location     Type
  2233 ;;                  1    wreg      void 
  2234 ;; Registers used:
  2235 ;;		wreg, status,2, status,0, cstack
  2236 ;; Tracked objects:
  2237 ;;		On entry : 0/0
  2238 ;;		On exit  : 0/0
  2239 ;;		Unchanged: 0/0
  2240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2241 ;;      Params:         0       0       0       0       0       0       0       0       0
  2242 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2243 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2244 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2245 ;;Total ram usage:        0 bytes
  2246 ;; Hardware stack levels used:    1
  2247 ;; Hardware stack levels required when called:    4
  2248 ;; This function calls:
  2249 ;;		_setMotores
  2250 ;; This function is called by:
  2251 ;;		_main
  2252 ;; This function uses a non-reentrant model
  2253 ;;
  2254                           
  2255                           	psect	text7
  2256  000C64                     __ptext7:
  2257                           	opt stack 0
  2258  000C64                     _init:
  2259                           	opt stack 26
  2260                           
  2261                           ;funciones.c: 7: ADCON1bits.PCFG = 0b1111;
  2262                           
  2263                           ;incstack = 0
  2264  000C64  80C1               	bsf	4033,0,c	;volatile
  2265  000C66  82C1               	bsf	4033,1,c	;volatile
  2266  000C68  84C1               	bsf	4033,2,c	;volatile
  2267  000C6A  86C1               	bsf	4033,3,c	;volatile
  2268                           
  2269                           ;funciones.c: 10: UCONbits.USBEN = 0;
  2270  000C6C  966D               	bcf	3949,3,c	;volatile
  2271                           
  2272                           ;funciones.c: 11: UCFGbits.UTRDIS = 1;
  2273  000C6E  866F               	bsf	3951,3,c	;volatile
  2274                           
  2275                           ;funciones.c: 14: TRISAbits.RA1 = INPUT;
  2276  000C70  8292               	bsf	3986,1,c	;volatile
  2277                           
  2278                           ;funciones.c: 15: TRISAbits.RA5 = INPUT;
  2279  000C72  8A92               	bsf	3986,5,c	;volatile
  2280                           
  2281                           ;funciones.c: 16: TRISCbits.RC7 = INPUT;
  2282  000C74  8E94               	bsf	3988,7,c	;volatile
  2283                           
  2284                           ;funciones.c: 17: TRISAbits.RA2 = OUTPUT;
  2285  000C76  9492               	bcf	3986,2,c	;volatile
  2286                           
  2287                           ;funciones.c: 18: TRISAbits.RA3 = OUTPUT;
  2288  000C78  9692               	bcf	3986,3,c	;volatile
  2289                           
  2290                           ;funciones.c: 19: TRISAbits.RA4 = OUTPUT;
  2291  000C7A  9892               	bcf	3986,4,c	;volatile
  2292                           
  2293                           ;funciones.c: 20: TRISBbits.RB5 = INPUT;
  2294  000C7C  8A93               	bsf	3987,5,c	;volatile
  2295                           
  2296                           ;funciones.c: 21: TRISBbits.RB4 = INPUT;
  2297  000C7E  8893               	bsf	3987,4,c	;volatile
  2298                           
  2299                           ;funciones.c: 22: TRISBbits.RB1 = INPUT;
  2300  000C80  8293               	bsf	3987,1,c	;volatile
  2301                           
  2302                           ;funciones.c: 25: TRISBbits.RB3 = INPUT;
  2303  000C82  8693               	bsf	3987,3,c	;volatile
  2304                           
  2305                           ;funciones.c: 26: TRISCbits.RC6 = INPUT;
  2306  000C84  8C94               	bsf	3988,6,c	;volatile
  2307                           
  2308                           ;funciones.c: 27: TRISCbits.RC1 = OUTPUT;
  2309  000C86  9294               	bcf	3988,1,c	;volatile
  2310                           
  2311                           ;funciones.c: 28: TRISCbits.RC2 = OUTPUT;
  2312  000C88  9494               	bcf	3988,2,c	;volatile
  2313                           
  2314                           ;funciones.c: 29: TRISCbits.RC0 = OUTPUT;
  2315  000C8A  9094               	bcf	3988,0,c	;volatile
  2316                           
  2317                           ;funciones.c: 30: TRISAbits.RA0 = OUTPUT;
  2318  000C8C  9092               	bcf	3986,0,c	;volatile
  2319                           
  2320                           ;funciones.c: 33: T2CON = 0;
  2321  000C8E  0E00               	movlw	0
  2322  000C90  6ECA               	movwf	4042,c	;volatile
  2323                           
  2324                           ;funciones.c: 34: T2CONbits.TOUTPS=11;
  2325  000C92  50CA               	movf	4042,w,c	;volatile
  2326  000C94  0B87               	andlw	-121
  2327  000C96  0958               	iorlw	88
  2328  000C98  6ECA               	movwf	4042,c	;volatile
  2329                           
  2330                           ;funciones.c: 35: T2CONbits.T2CKPS=1;
  2331  000C9A  50CA               	movf	4042,w,c	;volatile
  2332  000C9C  0BFC               	andlw	-4
  2333  000C9E  0901               	iorlw	1
  2334  000CA0  6ECA               	movwf	4042,c	;volatile
  2335                           
  2336                           ;funciones.c: 36: PR2=249;
  2337  000CA2  0EF9               	movlw	249
  2338  000CA4  6ECB               	movwf	4043,c	;volatile
  2339                           
  2340                           ;funciones.c: 37: T2CONbits.TMR2ON=1;
  2341  000CA6  84CA               	bsf	4042,2,c	;volatile
  2342                           
  2343                           ;funciones.c: 40: CCPR1L=0;
  2344  000CA8  0E00               	movlw	0
  2345  000CAA  6EBE               	movwf	4030,c	;volatile
  2346                           
  2347                           ;funciones.c: 41: CCP1CONbits.DC1B=0;
  2348  000CAC  0ECF               	movlw	-49
  2349  000CAE  16BD               	andwf	4029,f,c	;volatile
  2350                           
  2351                           ;funciones.c: 42: CCP1CONbits.CCP1M=12;
  2352  000CB0  50BD               	movf	4029,w,c	;volatile
  2353  000CB2  0BF0               	andlw	-16
  2354  000CB4  090C               	iorlw	12
  2355  000CB6  6EBD               	movwf	4029,c	;volatile
  2356                           
  2357                           ;funciones.c: 43: CCPR2L=0;
  2358  000CB8  0E00               	movlw	0
  2359  000CBA  6EBB               	movwf	4027,c	;volatile
  2360                           
  2361                           ;funciones.c: 44: CCP2CONbits.DC2B=0;
  2362  000CBC  0ECF               	movlw	-49
  2363  000CBE  16BA               	andwf	4026,f,c	;volatile
  2364                           
  2365                           ;funciones.c: 45: CCP2CONbits.CCP2M=12;
  2366  000CC0  50BA               	movf	4026,w,c	;volatile
  2367  000CC2  0BF0               	andlw	-16
  2368  000CC4  090C               	iorlw	12
  2369  000CC6  6EBA               	movwf	4026,c	;volatile
  2370                           
  2371                           ;funciones.c: 48: INTCON3=0;
  2372  000CC8  0E00               	movlw	0
  2373  000CCA  6EF0               	movwf	intcon3,c	;volatile
  2374                           
  2375                           ;funciones.c: 49: PIE1=0;
  2376  000CCC  0E00               	movlw	0
  2377  000CCE  6E9D               	movwf	3997,c	;volatile
  2378                           
  2379                           ;funciones.c: 50: PIE2=0;
  2380  000CD0  0E00               	movlw	0
  2381  000CD2  6EA0               	movwf	4000,c	;volatile
  2382                           
  2383                           ;funciones.c: 51: RCONbits.IPEN=0;
  2384  000CD4  9ED0               	bcf	4048,7,c	;volatile
  2385                           
  2386                           ;funciones.c: 52: PIE1bits.TMR2IE=1;
  2387  000CD6  829D               	bsf	3997,1,c	;volatile
  2388                           
  2389                           ;funciones.c: 53: INTCONbits.PEIE_GIEL=1;
  2390  000CD8  8CF2               	bsf	intcon,6,c	;volatile
  2391                           
  2392                           ;funciones.c: 54: INTCONbits.GIE_GIEH=1;
  2393  000CDA  8EF2               	bsf	intcon,7,c	;volatile
  2394                           
  2395                           ;funciones.c: 55: RCONbits.IPEN = 0;
  2396  000CDC  9ED0               	bcf	4048,7,c	;volatile
  2397                           
  2398                           ;funciones.c: 56: INTCONbits.PEIE = 1;
  2399  000CDE  8CF2               	bsf	intcon,6,c	;volatile
  2400                           
  2401                           ;funciones.c: 57: INTCONbits.GIE = 1;
  2402  000CE0  8EF2               	bsf	intcon,7,c	;volatile
  2403                           
  2404                           ;funciones.c: 60: setMotores(0, 0);
  2405  000CE2  0E00               	movlw	0
  2406  000CE4  6E37               	movwf	setMotores@speedI+1,c
  2407  000CE6  0E00               	movlw	0
  2408  000CE8  6E36               	movwf	setMotores@speedI,c
  2409  000CEA  0E00               	movlw	0
  2410  000CEC  6E39               	movwf	setMotores@speedD+1,c
  2411  000CEE  0E00               	movlw	0
  2412  000CF0  6E38               	movwf	setMotores@speedD,c
  2413  000CF2  ECFD  F001         	call	_setMotores	;wreg free
  2414                           
  2415                           ;funciones.c: 61: LATAbits.LA2 = 0;
  2416  000CF6  9489               	bcf	3977,2,c	;volatile
  2417                           
  2418                           ;funciones.c: 62: LATAbits.LA3 = 0;
  2419  000CF8  9689               	bcf	3977,3,c	;volatile
  2420                           
  2421                           ;funciones.c: 63: LATAbits.LA4 = 0;
  2422  000CFA  9889               	bcf	3977,4,c	;volatile
  2423  000CFC  0012               	return		;funcret
  2424  000CFE                     __end_of_init:
  2425                           	opt stack 0
  2426                           tblptru	equ	0xFF8
  2427                           tblptrh	equ	0xFF7
  2428                           tblptrl	equ	0xFF6
  2429                           tablat	equ	0xFF5
  2430                           intcon	equ	0xFF2
  2431                           intcon3	equ	0xFF0
  2432                           postinc0	equ	0xFEE
  2433                           wreg	equ	0xFE8
  2434                           postdec1	equ	0xFE5
  2435                           fsr1l	equ	0xFE1
  2436                           status	equ	0xFD8
  2437                           
  2438 ;; *************** function _setMotores *****************
  2439 ;; Defined at:
  2440 ;;		line 66 in file "funciones.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;  speedI          2   53[COMRAM] int 
  2443 ;;  speedD          2   55[COMRAM] int 
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;  dutyD           2   14[BANK0 ] unsigned int 
  2446 ;;  dutyI           2   12[BANK0 ] unsigned int 
  2447 ;; Return value:  Size  Location     Type
  2448 ;;                  1    wreg      void 
  2449 ;; Registers used:
  2450 ;;		wreg, status,2, status,0, cstack
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2456 ;;      Params:         4       0       0       0       0       0       0       0       0
  2457 ;;      Locals:         0       8       0       0       0       0       0       0       0
  2458 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2459 ;;      Totals:         4      10       0       0       0       0       0       0       0
  2460 ;;Total ram usage:       14 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    3
  2463 ;; This function calls:
  2464 ;;		___ftmul
  2465 ;;		___fttol
  2466 ;;		___lwtoft
  2467 ;; This function is called by:
  2468 ;;		_loop
  2469 ;;		_estrategiaClasica
  2470 ;;		_estrategiaCiego
  2471 ;;		_estrategiaAdelante
  2472 ;;		_estrategiaAtras
  2473 ;;		_init
  2474 ;; This function uses a non-reentrant model
  2475 ;;
  2476                           
  2477                           	psect	text8
  2478  0003FA                     __ptext8:
  2479                           	opt stack 0
  2480  0003FA                     _setMotores:
  2481                           	opt stack 26
  2482                           
  2483                           ;funciones.c: 67: speedD = -speedD;
  2484                           
  2485                           ;incstack = 0
  2486  0003FA  6C38               	negf	setMotores@speedD,c
  2487  0003FC  1E39               	comf	setMotores@speedD+1,f,c
  2488  0003FE  B0D8               	btfsc	status,0,c
  2489  000400  2A39               	incf	setMotores@speedD+1,f,c
  2490                           
  2491                           ;funciones.c: 69: speedI = (speedI > 1000 ? 1000 : (speedI < -1000 ? -1000 : speedI));
  2492  000402  BE37               	btfsc	setMotores@speedI+1,7,c
  2493  000404  D006               	goto	u2050
  2494  000406  0EE9               	movlw	233
  2495  000408  5C36               	subwf	setMotores@speedI,w,c
  2496  00040A  0E03               	movlw	3
  2497  00040C  5837               	subwfb	setMotores@speedI+1,w,c
  2498  00040E  B0D8               	btfsc	status,0,c
  2499  000410  D017               	goto	l216
  2500  000412                     u2050:
  2501  000412  AE37               	btfss	setMotores@speedI+1,7,c
  2502  000414  D006               	goto	u2060
  2503  000416  0E18               	movlw	24
  2504  000418  5C36               	subwf	setMotores@speedI,w,c
  2505  00041A  0EFC               	movlw	252
  2506  00041C  5837               	subwfb	setMotores@speedI+1,w,c
  2507  00041E  A0D8               	btfss	status,0,c
  2508  000420  D005               	goto	l220
  2509  000422                     u2060:
  2510  000422  C036  F068         	movff	setMotores@speedI,_setMotores$929
  2511  000426  C037  F069         	movff	setMotores@speedI+1,_setMotores$929+1
  2512  00042A  D005               	goto	l222
  2513  00042C                     l220:
  2514  00042C  0EFC               	movlw	252
  2515  00042E  0100               	movlb	0	; () banked
  2516  000430  6F69               	movwf	(_setMotores$929+1)& (0+255),b
  2517  000432  0E18               	movlw	24
  2518  000434  6F68               	movwf	_setMotores$929& (0+255),b
  2519  000436                     l222:
  2520                           
  2521                           ; BSR set to: 0
  2522  000436  C068  F036         	movff	_setMotores$929,setMotores@speedI
  2523  00043A  C069  F037         	movff	_setMotores$929+1,setMotores@speedI+1
  2524  00043E  D004               	goto	l218
  2525  000440                     l216:
  2526  000440  0E03               	movlw	3
  2527  000442  6E37               	movwf	setMotores@speedI+1,c
  2528  000444  0EE8               	movlw	232
  2529  000446  6E36               	movwf	setMotores@speedI,c
  2530  000448                     l218:
  2531                           
  2532                           ;funciones.c: 70: speedD = (speedD > 1000 ? 1000 : (speedD < -1000 ? -1000 : speedD));
  2533  000448  BE39               	btfsc	setMotores@speedD+1,7,c
  2534  00044A  D006               	goto	u2070
  2535  00044C  0EE9               	movlw	233
  2536  00044E  5C38               	subwf	setMotores@speedD,w,c
  2537  000450  0E03               	movlw	3
  2538  000452  5839               	subwfb	setMotores@speedD+1,w,c
  2539  000454  B0D8               	btfsc	status,0,c
  2540  000456  D017               	goto	l224
  2541  000458                     u2070:
  2542  000458  AE39               	btfss	setMotores@speedD+1,7,c
  2543  00045A  D006               	goto	u2080
  2544  00045C  0E18               	movlw	24
  2545  00045E  5C38               	subwf	setMotores@speedD,w,c
  2546  000460  0EFC               	movlw	252
  2547  000462  5839               	subwfb	setMotores@speedD+1,w,c
  2548  000464  A0D8               	btfss	status,0,c
  2549  000466  D005               	goto	l228
  2550  000468                     u2080:
  2551  000468  C038  F06A         	movff	setMotores@speedD,_setMotores$930
  2552  00046C  C039  F06B         	movff	setMotores@speedD+1,_setMotores$930+1
  2553  000470  D005               	goto	l230
  2554  000472                     l228:
  2555  000472  0EFC               	movlw	252
  2556  000474  0100               	movlb	0	; () banked
  2557  000476  6F6B               	movwf	(_setMotores$930+1)& (0+255),b
  2558  000478  0E18               	movlw	24
  2559  00047A  6F6A               	movwf	_setMotores$930& (0+255),b
  2560  00047C                     l230:
  2561                           
  2562                           ; BSR set to: 0
  2563  00047C  C06A  F038         	movff	_setMotores$930,setMotores@speedD
  2564  000480  C06B  F039         	movff	_setMotores$930+1,setMotores@speedD+1
  2565  000484  D004               	goto	l226
  2566  000486                     l224:
  2567  000486  0E03               	movlw	3
  2568  000488  6E39               	movwf	setMotores@speedD+1,c
  2569  00048A  0EE8               	movlw	232
  2570  00048C  6E38               	movwf	setMotores@speedD,c
  2571  00048E                     l226:
  2572                           
  2573                           ;funciones.c: 72: LATAbits.LA0 = (unsigned)(speedI < 0);
  2574  00048E  AE37               	btfss	setMotores@speedI+1,7,c
  2575  000490  D004               	goto	u2090
  2576  000492  0100               	movlb	0	; () banked
  2577  000494  6B66               	clrf	??_setMotores& (0+255),b
  2578  000496  2B66               	incf	??_setMotores& (0+255),f,b
  2579  000498  D002               	goto	u2108
  2580  00049A                     u2090:
  2581  00049A  0100               	movlb	0	; () banked
  2582  00049C  6B66               	clrf	??_setMotores& (0+255),b
  2583  00049E                     u2108:
  2584  00049E  5089               	movf	3977,w,c	;volatile
  2585  0004A0  1966               	xorwf	??_setMotores& (0+255),w,b
  2586  0004A2  0BFE               	andlw	-2
  2587  0004A4  1966               	xorwf	??_setMotores& (0+255),w,b
  2588  0004A6  6E89               	movwf	3977,c	;volatile
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;funciones.c: 73: LATCbits.LC0 = (unsigned)(speedD < 0);
  2592  0004A8  AE39               	btfss	setMotores@speedD+1,7,c
  2593  0004AA  D003               	goto	u2110
  2594  0004AC  6B66               	clrf	??_setMotores& (0+255),b
  2595  0004AE  2B66               	incf	??_setMotores& (0+255),f,b
  2596  0004B0  D002               	goto	u2128
  2597  0004B2                     u2110:
  2598  0004B2  0100               	movlb	0	; () banked
  2599  0004B4  6B66               	clrf	??_setMotores& (0+255),b
  2600  0004B6                     u2128:
  2601  0004B6  508B               	movf	3979,w,c	;volatile
  2602  0004B8  1966               	xorwf	??_setMotores& (0+255),w,b
  2603  0004BA  0BFE               	andlw	-2
  2604  0004BC  1966               	xorwf	??_setMotores& (0+255),w,b
  2605  0004BE  6E8B               	movwf	3979,c	;volatile
  2606                           
  2607                           ; BSR set to: 0
  2608                           ;funciones.c: 75: unsigned int dutyI = (unsigned)(speedI < 0 ? 1000+speedI : speedI);
  2609  0004C0  BE37               	btfsc	setMotores@speedI+1,7,c
  2610  0004C2  D005               	goto	l232
  2611                           
  2612                           ; BSR set to: 0
  2613  0004C4  C036  F06C         	movff	setMotores@speedI,setMotores@dutyI
  2614  0004C8  C037  F06D         	movff	setMotores@speedI+1,setMotores@dutyI+1
  2615  0004CC  D006               	goto	l234
  2616  0004CE                     l232:
  2617                           
  2618                           ; BSR set to: 0
  2619                           
  2620                           ; BSR set to: 0
  2621  0004CE  0EE8               	movlw	232
  2622  0004D0  2436               	addwf	setMotores@speedI,w,c
  2623  0004D2  6F6C               	movwf	setMotores@dutyI& (0+255),b
  2624  0004D4  0E03               	movlw	3
  2625  0004D6  2037               	addwfc	setMotores@speedI+1,w,c
  2626  0004D8  6F6D               	movwf	(setMotores@dutyI+1)& (0+255),b
  2627  0004DA                     l234:
  2628                           
  2629                           ; BSR set to: 0
  2630                           ;funciones.c: 76: unsigned int dutyD = (unsigned)(speedD < 0 ? 1000+speedD : speedD);
  2631  0004DA  BE39               	btfsc	setMotores@speedD+1,7,c
  2632  0004DC  D005               	goto	l236
  2633                           
  2634                           ; BSR set to: 0
  2635  0004DE  C038  F06E         	movff	setMotores@speedD,setMotores@dutyD
  2636  0004E2  C039  F06F         	movff	setMotores@speedD+1,setMotores@dutyD+1
  2637  0004E6  D006               	goto	l238
  2638  0004E8                     l236:
  2639                           
  2640                           ; BSR set to: 0
  2641                           
  2642                           ; BSR set to: 0
  2643  0004E8  0EE8               	movlw	232
  2644  0004EA  2438               	addwf	setMotores@speedD,w,c
  2645  0004EC  6F6E               	movwf	setMotores@dutyD& (0+255),b
  2646  0004EE  0E03               	movlw	3
  2647  0004F0  2039               	addwfc	setMotores@speedD+1,w,c
  2648  0004F2  6F6F               	movwf	(setMotores@dutyD+1)& (0+255),b
  2649  0004F4                     l238:
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;funciones.c: 78: dutyI *= 1.023;
  2653                           
  2654                           ; BSR set to: 0
  2655  0004F4  0EF2               	movlw	242
  2656  0004F6  6E21               	movwf	___ftmul@f2,c
  2657  0004F8  0E82               	movlw	130
  2658  0004FA  6E22               	movwf	___ftmul@f2+1,c
  2659  0004FC  0E3F               	movlw	63
  2660  0004FE  6E23               	movwf	___ftmul@f2+2,c
  2661  000500  C06C  F01B         	movff	setMotores@dutyI,___lwtoft@c
  2662  000504  C06D  F01C         	movff	setMotores@dutyI+1,___lwtoft@c+1
  2663  000508  ECA2  F006         	call	___lwtoft	;wreg free
  2664  00050C  C01B  F01E         	movff	?___lwtoft,___ftmul@f1
  2665  000510  C01C  F01F         	movff	?___lwtoft+1,___ftmul@f1+1
  2666  000514  C01D  F020         	movff	?___lwtoft+2,___ftmul@f1+2
  2667  000518  EC0C  F005         	call	___ftmul	;wreg free
  2668  00051C  C01E  F02D         	movff	?___ftmul,___fttol@f1
  2669  000520  C01F  F02E         	movff	?___ftmul+1,___fttol@f1+1
  2670  000524  C020  F02F         	movff	?___ftmul+2,___fttol@f1+2
  2671  000528  EC9A  F003         	call	___fttol	;wreg free
  2672  00052C  C02D  F06C         	movff	?___fttol,setMotores@dutyI
  2673  000530  C02E  F06D         	movff	?___fttol+1,setMotores@dutyI+1
  2674                           
  2675                           ;funciones.c: 79: dutyD *= 1.023;
  2676  000534  0EF2               	movlw	242
  2677  000536  6E21               	movwf	___ftmul@f2,c
  2678  000538  0E82               	movlw	130
  2679  00053A  6E22               	movwf	___ftmul@f2+1,c
  2680  00053C  0E3F               	movlw	63
  2681  00053E  6E23               	movwf	___ftmul@f2+2,c
  2682  000540  C06E  F01B         	movff	setMotores@dutyD,___lwtoft@c
  2683  000544  C06F  F01C         	movff	setMotores@dutyD+1,___lwtoft@c+1
  2684  000548  ECA2  F006         	call	___lwtoft	;wreg free
  2685  00054C  C01B  F01E         	movff	?___lwtoft,___ftmul@f1
  2686  000550  C01C  F01F         	movff	?___lwtoft+1,___ftmul@f1+1
  2687  000554  C01D  F020         	movff	?___lwtoft+2,___ftmul@f1+2
  2688  000558  EC0C  F005         	call	___ftmul	;wreg free
  2689  00055C  C01E  F02D         	movff	?___ftmul,___fttol@f1
  2690  000560  C01F  F02E         	movff	?___ftmul+1,___fttol@f1+1
  2691  000564  C020  F02F         	movff	?___ftmul+2,___fttol@f1+2
  2692  000568  EC9A  F003         	call	___fttol	;wreg free
  2693  00056C  C02D  F06E         	movff	?___fttol,setMotores@dutyD
  2694  000570  C02E  F06F         	movff	?___fttol+1,setMotores@dutyD+1
  2695                           
  2696                           ;funciones.c: 81: CCPR1L = dutyI / 4;
  2697  000574  C06C  F066         	movff	setMotores@dutyI,??_setMotores
  2698  000578  C06D  F067         	movff	setMotores@dutyI+1,??_setMotores+1
  2699  00057C  0100               	movlb	0	; () banked
  2700  00057E  90D8               	bcf	status,0,c
  2701  000580  3367               	rrcf	(??_setMotores+1)& (0+255),f,b
  2702  000582  3366               	rrcf	??_setMotores& (0+255),f,b
  2703  000584  90D8               	bcf	status,0,c
  2704  000586  3367               	rrcf	(??_setMotores+1)& (0+255),f,b
  2705  000588  3366               	rrcf	??_setMotores& (0+255),f,b
  2706  00058A  5166               	movf	??_setMotores& (0+255),w,b
  2707  00058C  6EBE               	movwf	4030,c	;volatile
  2708                           
  2709                           ;funciones.c: 82: CCPR2L = dutyD / 4;
  2710  00058E  C06E  F066         	movff	setMotores@dutyD,??_setMotores
  2711  000592  C06F  F067         	movff	setMotores@dutyD+1,??_setMotores+1
  2712  000596  90D8               	bcf	status,0,c
  2713  000598  3367               	rrcf	(??_setMotores+1)& (0+255),f,b
  2714  00059A  3366               	rrcf	??_setMotores& (0+255),f,b
  2715  00059C  90D8               	bcf	status,0,c
  2716  00059E  3367               	rrcf	(??_setMotores+1)& (0+255),f,b
  2717  0005A0  3366               	rrcf	??_setMotores& (0+255),f,b
  2718  0005A2  5166               	movf	??_setMotores& (0+255),w,b
  2719  0005A4  6EBB               	movwf	4027,c	;volatile
  2720                           
  2721                           ;funciones.c: 83: CCP1CONbits.DC1B = dutyI % 4;
  2722  0005A6  C06C  F066         	movff	setMotores@dutyI,??_setMotores
  2723  0005AA  0E03               	movlw	3
  2724  0005AC  1766               	andwf	??_setMotores& (0+255),f,b
  2725  0005AE  3B66               	swapf	??_setMotores& (0+255),f,b
  2726  0005B0  50BD               	movf	4029,w,c	;volatile
  2727  0005B2  1966               	xorwf	??_setMotores& (0+255),w,b
  2728  0005B4  0BCF               	andlw	-49
  2729  0005B6  1966               	xorwf	??_setMotores& (0+255),w,b
  2730  0005B8  6EBD               	movwf	4029,c	;volatile
  2731                           
  2732                           ;funciones.c: 84: CCP2CONbits.DC2B = dutyD % 4;
  2733  0005BA  C06E  F066         	movff	setMotores@dutyD,??_setMotores
  2734  0005BE  0E03               	movlw	3
  2735  0005C0  1766               	andwf	??_setMotores& (0+255),f,b
  2736  0005C2  3B66               	swapf	??_setMotores& (0+255),f,b
  2737  0005C4  50BA               	movf	4026,w,c	;volatile
  2738  0005C6  1966               	xorwf	??_setMotores& (0+255),w,b
  2739  0005C8  0BCF               	andlw	-49
  2740  0005CA  1966               	xorwf	??_setMotores& (0+255),w,b
  2741  0005CC  6EBA               	movwf	4026,c	;volatile
  2742                           
  2743                           ; BSR set to: 0
  2744  0005CE  0012               	return		;funcret
  2745  0005D0                     __end_of_setMotores:
  2746                           	opt stack 0
  2747                           tblptru	equ	0xFF8
  2748                           tblptrh	equ	0xFF7
  2749                           tblptrl	equ	0xFF6
  2750                           tablat	equ	0xFF5
  2751                           intcon	equ	0xFF2
  2752                           intcon3	equ	0xFF0
  2753                           postinc0	equ	0xFEE
  2754                           wreg	equ	0xFE8
  2755                           postdec1	equ	0xFE5
  2756                           fsr1l	equ	0xFE1
  2757                           status	equ	0xFD8
  2758                           
  2759 ;; *************** function ___lwtoft *****************
  2760 ;; Defined at:
  2761 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  2762 ;; Parameters:    Size  Location     Type
  2763 ;;  c               2   26[COMRAM] unsigned int 
  2764 ;; Auto vars:     Size  Location     Type
  2765 ;;		None
  2766 ;; Return value:  Size  Location     Type
  2767 ;;                  3   26[COMRAM] float 
  2768 ;; Registers used:
  2769 ;;		wreg, status,2, status,0, cstack
  2770 ;; Tracked objects:
  2771 ;;		On entry : 0/0
  2772 ;;		On exit  : 0/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2775 ;;      Params:         3       0       0       0       0       0       0       0       0
  2776 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2777 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2778 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2779 ;;Total ram usage:        3 bytes
  2780 ;; Hardware stack levels used:    1
  2781 ;; Hardware stack levels required when called:    2
  2782 ;; This function calls:
  2783 ;;		___ftpack
  2784 ;; This function is called by:
  2785 ;;		_setMotores
  2786 ;; This function uses a non-reentrant model
  2787 ;;
  2788                           
  2789                           	psect	text9
  2790  000D44                     __ptext9:
  2791                           	opt stack 0
  2792  000D44                     ___lwtoft:
  2793                           	opt stack 26
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;incstack = 0
  2797  000D44  C01B  F013         	movff	___lwtoft@c,___ftpack@arg
  2798  000D48  C01C  F014         	movff	___lwtoft@c+1,___ftpack@arg+1
  2799  000D4C  6A15               	clrf	___ftpack@arg+2,c
  2800  000D4E  0E8E               	movlw	142
  2801  000D50  6E16               	movwf	___ftpack@exp,c
  2802  000D52  0E00               	movlw	0
  2803  000D54  6E17               	movwf	___ftpack@sign,c
  2804  000D56  EC86  F005         	call	___ftpack	;wreg free
  2805  000D5A  C013  F01B         	movff	?___ftpack,?___lwtoft
  2806  000D5E  C014  F01C         	movff	?___ftpack+1,?___lwtoft+1
  2807  000D62  C015  F01D         	movff	?___ftpack+2,?___lwtoft+2
  2808  000D66  0012               	return	
  2809  000D68                     __end_of___lwtoft:
  2810                           	opt stack 0
  2811                           tblptru	equ	0xFF8
  2812                           tblptrh	equ	0xFF7
  2813                           tblptrl	equ	0xFF6
  2814                           tablat	equ	0xFF5
  2815                           intcon	equ	0xFF2
  2816                           intcon3	equ	0xFF0
  2817                           postinc0	equ	0xFEE
  2818                           wreg	equ	0xFE8
  2819                           postdec1	equ	0xFE5
  2820                           fsr1l	equ	0xFE1
  2821                           status	equ	0xFD8
  2822                           
  2823 ;; *************** function ___fttol *****************
  2824 ;; Defined at:
  2825 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  2826 ;; Parameters:    Size  Location     Type
  2827 ;;  f1              3   44[COMRAM] float 
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;  lval            4    1[BANK0 ] unsigned long 
  2830 ;;  exp1            1    5[BANK0 ] unsigned char 
  2831 ;;  sign1           1    0[BANK0 ] unsigned char 
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  4   44[COMRAM] long 
  2834 ;; Registers used:
  2835 ;;		wreg, status,2, status,0
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2841 ;;      Params:         4       0       0       0       0       0       0       0       0
  2842 ;;      Locals:         0       6       0       0       0       0       0       0       0
  2843 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2844 ;;      Totals:         9       6       0       0       0       0       0       0       0
  2845 ;;Total ram usage:       15 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:    1
  2848 ;; This function calls:
  2849 ;;		Nothing
  2850 ;; This function is called by:
  2851 ;;		_setMotores
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           	psect	text10
  2856  000734                     __ptext10:
  2857                           	opt stack 0
  2858  000734                     ___fttol:
  2859                           	opt stack 27
  2860                           
  2861                           ;incstack = 0
  2862  000734  C02F  F031         	movff	___fttol@f1+2,??___fttol
  2863  000738  6A32               	clrf	(??___fttol+1)& (0+255),c
  2864  00073A  6A33               	clrf	(??___fttol+2)& (0+255),c
  2865  00073C  342E               	rlcf	___fttol@f1+1,w,c
  2866  00073E  3631               	rlcf	??___fttol& (0+255),f,c
  2867  000740  E301               	bnc	u1971
  2868  000742  8032               	bsf	(??___fttol+1)& (0+255),0,c
  2869  000744                     u1971:
  2870  000744  5031               	movf	??___fttol,w,c
  2871  000746  0100               	movlb	0	; () banked
  2872  000748  6F65               	movwf	___fttol@exp1& (0+255),b
  2873  00074A  5165               	movf	___fttol@exp1& (0+255),w,b
  2874  00074C  A4D8               	btfss	status,2,c
  2875  00074E  D009               	goto	l563
  2876                           
  2877                           ; BSR set to: 0
  2878  000750  0E00               	movlw	0
  2879  000752  6E2D               	movwf	?___fttol,c
  2880  000754  0E00               	movlw	0
  2881  000756  6E2E               	movwf	?___fttol+1,c
  2882  000758  0E00               	movlw	0
  2883  00075A  6E2F               	movwf	?___fttol+2,c
  2884  00075C  0E00               	movlw	0
  2885  00075E  6E30               	movwf	?___fttol+3,c
  2886                           
  2887                           ; BSR set to: 0
  2888  000760  0012               	return	
  2889  000762                     l563:
  2890                           
  2891                           ; BSR set to: 0
  2892                           
  2893                           ; BSR set to: 0
  2894  000762  0E17               	movlw	23
  2895  000764  6E31               	movwf	??___fttol& (0+255),c
  2896  000766  C02D  F032         	movff	___fttol@f1,??___fttol+1
  2897  00076A  C02E  F033         	movff	___fttol@f1+1,??___fttol+2
  2898  00076E  C02F  F034         	movff	___fttol@f1+2,??___fttol+3
  2899  000772  2831               	incf	??___fttol,w,c
  2900  000774  6E35               	movwf	(??___fttol+4)& (0+255),c
  2901  000776  D004               	goto	u1990
  2902  000778                     u1995:
  2903  000778  90D8               	bcf	status,0,c
  2904  00077A  3234               	rrcf	??___fttol+3,f,c
  2905  00077C  3233               	rrcf	??___fttol+2,f,c
  2906  00077E  3232               	rrcf	??___fttol+1,f,c
  2907  000780                     u1990:
  2908  000780  2E35               	decfsz	(??___fttol+4)& (0+255),f,c
  2909  000782  D7FA               	goto	u1995
  2910  000784  5032               	movf	??___fttol+1,w,c
  2911  000786  0100               	movlb	0	; () banked
  2912  000788  6F60               	movwf	___fttol@sign1& (0+255),b
  2913                           
  2914                           ; BSR set to: 0
  2915  00078A  8E2E               	bsf	___fttol@f1+1,7,c
  2916                           
  2917                           ; BSR set to: 0
  2918  00078C  0EFF               	movlw	255
  2919  00078E  162D               	andwf	___fttol@f1,f,c
  2920  000790  0EFF               	movlw	255
  2921  000792  162E               	andwf	___fttol@f1+1,f,c
  2922  000794  0E00               	movlw	0
  2923  000796  162F               	andwf	___fttol@f1+2,f,c
  2924                           
  2925                           ; BSR set to: 0
  2926  000798  502D               	movf	___fttol@f1,w,c
  2927  00079A  6F61               	movwf	___fttol@lval& (0+255),b
  2928  00079C  502E               	movf	___fttol@f1+1,w,c
  2929  00079E  6F62               	movwf	(___fttol@lval+1)& (0+255),b
  2930  0007A0  502F               	movf	___fttol@f1+2,w,c
  2931  0007A2  6F63               	movwf	(___fttol@lval+2)& (0+255),b
  2932  0007A4  6B64               	clrf	(___fttol@lval+3)& (0+255),b
  2933                           
  2934                           ; BSR set to: 0
  2935  0007A6  0E8E               	movlw	142
  2936  0007A8  5F65               	subwf	___fttol@exp1& (0+255),f,b
  2937                           
  2938                           ; BSR set to: 0
  2939  0007AA  AF65               	btfss	___fttol@exp1& (0+255),7,b
  2940  0007AC  D016               	goto	l565
  2941                           
  2942                           ; BSR set to: 0
  2943  0007AE  5165               	movf	___fttol@exp1& (0+255),w,b
  2944  0007B0  0A80               	xorlw	128
  2945  0007B2  0F8F               	addlw	143
  2946  0007B4  B0D8               	btfsc	status,0,c
  2947  0007B6  D009               	goto	l566
  2948                           
  2949                           ; BSR set to: 0
  2950  0007B8  0E00               	movlw	0
  2951  0007BA  6E2D               	movwf	?___fttol,c
  2952  0007BC  0E00               	movlw	0
  2953  0007BE  6E2E               	movwf	?___fttol+1,c
  2954  0007C0  0E00               	movlw	0
  2955  0007C2  6E2F               	movwf	?___fttol+2,c
  2956  0007C4  0E00               	movlw	0
  2957  0007C6  6E30               	movwf	?___fttol+3,c
  2958                           
  2959                           ; BSR set to: 0
  2960  0007C8  0012               	return	
  2961  0007CA                     l566:
  2962                           
  2963                           ; BSR set to: 0
  2964                           
  2965                           ; BSR set to: 0
  2966                           
  2967                           ; BSR set to: 0
  2968  0007CA  90D8               	bcf	status,0,c
  2969  0007CC  3364               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2970  0007CE  3363               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2971  0007D0  3362               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2972  0007D2  3361               	rrcf	___fttol@lval& (0+255),f,b
  2973                           
  2974                           ; BSR set to: 0
  2975  0007D4  3F65               	incfsz	___fttol@exp1& (0+255),f,b
  2976  0007D6  D7F9               	goto	l566
  2977                           
  2978                           ; BSR set to: 0
  2979  0007D8  D015               	goto	u2030
  2980  0007DA                     l565:
  2981                           
  2982                           ; BSR set to: 0
  2983                           
  2984                           ; BSR set to: 0
  2985  0007DA  0E17               	movlw	23
  2986  0007DC  6565               	cpfsgt	___fttol@exp1& (0+255),b
  2987  0007DE  D00F               	goto	l571
  2988                           
  2989                           ; BSR set to: 0
  2990  0007E0  0E00               	movlw	0
  2991  0007E2  6E2D               	movwf	?___fttol,c
  2992  0007E4  0E00               	movlw	0
  2993  0007E6  6E2E               	movwf	?___fttol+1,c
  2994  0007E8  0E00               	movlw	0
  2995  0007EA  6E2F               	movwf	?___fttol+2,c
  2996  0007EC  0E00               	movlw	0
  2997  0007EE  6E30               	movwf	?___fttol+3,c
  2998                           
  2999                           ; BSR set to: 0
  3000  0007F0  0012               	return	
  3001  0007F2                     
  3002                           ; BSR set to: 0
  3003                           
  3004                           ; BSR set to: 0
  3005  0007F2  90D8               	bcf	status,0,c
  3006  0007F4  3761               	rlcf	___fttol@lval& (0+255),f,b
  3007  0007F6  3762               	rlcf	(___fttol@lval+1)& (0+255),f,b
  3008  0007F8  3763               	rlcf	(___fttol@lval+2)& (0+255),f,b
  3009  0007FA  3764               	rlcf	(___fttol@lval+3)& (0+255),f,b
  3010  0007FC  0765               	decf	___fttol@exp1& (0+255),f,b
  3011  0007FE                     l571:
  3012                           
  3013                           ; BSR set to: 0
  3014                           
  3015                           ; BSR set to: 0
  3016  0007FE  5165               	movf	___fttol@exp1& (0+255),w,b
  3017  000800  A4D8               	btfss	status,2,c
  3018  000802  D7F7               	goto	l572
  3019  000804                     u2030:
  3020                           
  3021                           ; BSR set to: 0
  3022                           
  3023                           ; BSR set to: 0
  3024                           
  3025                           ; BSR set to: 0
  3026  000804  5160               	movf	___fttol@sign1& (0+255),w,b
  3027  000806  B4D8               	btfsc	status,2,c
  3028  000808  D008               	goto	l574
  3029                           
  3030                           ; BSR set to: 0
  3031  00080A  1F64               	comf	(___fttol@lval+3)& (0+255),f,b
  3032  00080C  1F63               	comf	(___fttol@lval+2)& (0+255),f,b
  3033  00080E  1F62               	comf	(___fttol@lval+1)& (0+255),f,b
  3034  000810  6D61               	negf	___fttol@lval& (0+255),b
  3035  000812  0E00               	movlw	0
  3036  000814  2362               	addwfc	(___fttol@lval+1)& (0+255),f,b
  3037  000816  2363               	addwfc	(___fttol@lval+2)& (0+255),f,b
  3038  000818  2364               	addwfc	(___fttol@lval+3)& (0+255),f,b
  3039  00081A                     l574:
  3040                           
  3041                           ; BSR set to: 0
  3042                           
  3043                           ; BSR set to: 0
  3044  00081A  C061  F02D         	movff	___fttol@lval,?___fttol
  3045  00081E  C062  F02E         	movff	___fttol@lval+1,?___fttol+1
  3046  000822  C063  F02F         	movff	___fttol@lval+2,?___fttol+2
  3047  000826  C064  F030         	movff	___fttol@lval+3,?___fttol+3
  3048  00082A  0012               	return	
  3049  00082C                     __end_of___fttol:
  3050                           	opt stack 0
  3051                           tblptru	equ	0xFF8
  3052                           tblptrh	equ	0xFF7
  3053                           tblptrl	equ	0xFF6
  3054                           tablat	equ	0xFF5
  3055                           intcon	equ	0xFF2
  3056                           intcon3	equ	0xFF0
  3057                           postinc0	equ	0xFEE
  3058                           wreg	equ	0xFE8
  3059                           postdec1	equ	0xFE5
  3060                           fsr1l	equ	0xFE1
  3061                           status	equ	0xFD8
  3062                           
  3063 ;; *************** function ___ftmul *****************
  3064 ;; Defined at:
  3065 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;  f1              3   29[COMRAM] float 
  3068 ;;  f2              3   32[COMRAM] float 
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;  f3_as_produc    3   39[COMRAM] unsigned um
  3071 ;;  sign            1   43[COMRAM] unsigned char 
  3072 ;;  cntr            1   42[COMRAM] unsigned char 
  3073 ;;  exp             1   38[COMRAM] unsigned char 
  3074 ;; Return value:  Size  Location     Type
  3075 ;;                  3   29[COMRAM] float 
  3076 ;; Registers used:
  3077 ;;		wreg, status,2, status,0, cstack
  3078 ;; Tracked objects:
  3079 ;;		On entry : 0/0
  3080 ;;		On exit  : 0/0
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3083 ;;      Params:         6       0       0       0       0       0       0       0       0
  3084 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3085 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3086 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3087 ;;Total ram usage:       15 bytes
  3088 ;; Hardware stack levels used:    1
  3089 ;; Hardware stack levels required when called:    2
  3090 ;; This function calls:
  3091 ;;		___ftpack
  3092 ;; This function is called by:
  3093 ;;		_setMotores
  3094 ;; This function uses a non-reentrant model
  3095 ;;
  3096                           
  3097                           	psect	text11
  3098  000A18                     __ptext11:
  3099                           	opt stack 0
  3100  000A18                     ___ftmul:
  3101                           	opt stack 26
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;incstack = 0
  3105  000A18  C020  F024         	movff	___ftmul@f1+2,??___ftmul
  3106  000A1C  6A25               	clrf	(??___ftmul+1)& (0+255),c
  3107  000A1E  6A26               	clrf	(??___ftmul+2)& (0+255),c
  3108  000A20  341F               	rlcf	___ftmul@f1+1,w,c
  3109  000A22  3624               	rlcf	??___ftmul& (0+255),f,c
  3110  000A24  E301               	bnc	u1911
  3111  000A26  8025               	bsf	(??___ftmul+1)& (0+255),0,c
  3112  000A28                     u1911:
  3113  000A28  5024               	movf	??___ftmul,w,c
  3114  000A2A  6E27               	movwf	___ftmul@exp,c
  3115  000A2C  5027               	movf	___ftmul@exp,w,c
  3116  000A2E  A4D8               	btfss	status,2,c
  3117  000A30  D007               	goto	l542
  3118  000A32  0E00               	movlw	0
  3119  000A34  6E1E               	movwf	?___ftmul,c
  3120  000A36  0E00               	movlw	0
  3121  000A38  6E1F               	movwf	?___ftmul+1,c
  3122  000A3A  0E00               	movlw	0
  3123  000A3C  6E20               	movwf	?___ftmul+2,c
  3124  000A3E  0012               	return	
  3125  000A40                     l542:
  3126  000A40  C023  F024         	movff	___ftmul@f2+2,??___ftmul
  3127  000A44  6A25               	clrf	(??___ftmul+1)& (0+255),c
  3128  000A46  6A26               	clrf	(??___ftmul+2)& (0+255),c
  3129  000A48  3422               	rlcf	___ftmul@f2+1,w,c
  3130  000A4A  3624               	rlcf	??___ftmul& (0+255),f,c
  3131  000A4C  E301               	bnc	u1931
  3132  000A4E  8025               	bsf	(??___ftmul+1)& (0+255),0,c
  3133  000A50                     u1931:
  3134  000A50  5024               	movf	??___ftmul,w,c
  3135  000A52  6E2C               	movwf	___ftmul@sign,c
  3136  000A54  502C               	movf	___ftmul@sign,w,c
  3137  000A56  A4D8               	btfss	status,2,c
  3138  000A58  D007               	goto	l544
  3139  000A5A  0E00               	movlw	0
  3140  000A5C  6E1E               	movwf	?___ftmul,c
  3141  000A5E  0E00               	movlw	0
  3142  000A60  6E1F               	movwf	?___ftmul+1,c
  3143  000A62  0E00               	movlw	0
  3144  000A64  6E20               	movwf	?___ftmul+2,c
  3145  000A66  0012               	return	
  3146  000A68                     l544:
  3147  000A68  502C               	movf	___ftmul@sign,w,c
  3148  000A6A  0F7B               	addlw	123
  3149  000A6C  2627               	addwf	___ftmul@exp,f,c
  3150  000A6E  C020  F02C         	movff	___ftmul@f1+2,___ftmul@sign
  3151  000A72  5023               	movf	___ftmul@f2+2,w,c
  3152  000A74  1A2C               	xorwf	___ftmul@sign,f,c
  3153  000A76  0E80               	movlw	128
  3154  000A78  162C               	andwf	___ftmul@sign,f,c
  3155  000A7A  8E1F               	bsf	___ftmul@f1+1,7,c
  3156  000A7C  8E22               	bsf	___ftmul@f2+1,7,c
  3157  000A7E  0EFF               	movlw	255
  3158  000A80  1621               	andwf	___ftmul@f2,f,c
  3159  000A82  0EFF               	movlw	255
  3160  000A84  1622               	andwf	___ftmul@f2+1,f,c
  3161  000A86  0E00               	movlw	0
  3162  000A88  1623               	andwf	___ftmul@f2+2,f,c
  3163  000A8A  0E00               	movlw	0
  3164  000A8C  6E28               	movwf	___ftmul@f3_as_product,c
  3165  000A8E  0E00               	movlw	0
  3166  000A90  6E29               	movwf	___ftmul@f3_as_product+1,c
  3167  000A92  0E00               	movlw	0
  3168  000A94  6E2A               	movwf	___ftmul@f3_as_product+2,c
  3169  000A96  0E07               	movlw	7
  3170  000A98  6E2B               	movwf	___ftmul@cntr,c
  3171  000A9A  A01E               	btfss	___ftmul@f1,0,c
  3172  000A9C  D006               	goto	l546
  3173  000A9E  5021               	movf	___ftmul@f2,w,c
  3174  000AA0  2628               	addwf	___ftmul@f3_as_product,f,c
  3175  000AA2  5022               	movf	___ftmul@f2+1,w,c
  3176  000AA4  2229               	addwfc	___ftmul@f3_as_product+1,f,c
  3177  000AA6  5023               	movf	___ftmul@f2+2,w,c
  3178  000AA8  222A               	addwfc	___ftmul@f3_as_product+2,f,c
  3179  000AAA                     l546:
  3180  000AAA  90D8               	bcf	status,0,c
  3181  000AAC  3220               	rrcf	___ftmul@f1+2,f,c
  3182  000AAE  321F               	rrcf	___ftmul@f1+1,f,c
  3183  000AB0  321E               	rrcf	___ftmul@f1,f,c
  3184  000AB2  90D8               	bcf	status,0,c
  3185  000AB4  3621               	rlcf	___ftmul@f2,f,c
  3186  000AB6  3622               	rlcf	___ftmul@f2+1,f,c
  3187  000AB8  3623               	rlcf	___ftmul@f2+2,f,c
  3188  000ABA  2E2B               	decfsz	___ftmul@cntr,f,c
  3189  000ABC  D7EE               	goto	l545
  3190  000ABE  0E09               	movlw	9
  3191  000AC0  6E2B               	movwf	___ftmul@cntr,c
  3192  000AC2  A01E               	btfss	___ftmul@f1,0,c
  3193  000AC4  D006               	goto	l549
  3194  000AC6  5021               	movf	___ftmul@f2,w,c
  3195  000AC8  2628               	addwf	___ftmul@f3_as_product,f,c
  3196  000ACA  5022               	movf	___ftmul@f2+1,w,c
  3197  000ACC  2229               	addwfc	___ftmul@f3_as_product+1,f,c
  3198  000ACE  5023               	movf	___ftmul@f2+2,w,c
  3199  000AD0  222A               	addwfc	___ftmul@f3_as_product+2,f,c
  3200  000AD2                     l549:
  3201  000AD2  90D8               	bcf	status,0,c
  3202  000AD4  3220               	rrcf	___ftmul@f1+2,f,c
  3203  000AD6  321F               	rrcf	___ftmul@f1+1,f,c
  3204  000AD8  321E               	rrcf	___ftmul@f1,f,c
  3205  000ADA  90D8               	bcf	status,0,c
  3206  000ADC  322A               	rrcf	___ftmul@f3_as_product+2,f,c
  3207  000ADE  3229               	rrcf	___ftmul@f3_as_product+1,f,c
  3208  000AE0  3228               	rrcf	___ftmul@f3_as_product,f,c
  3209  000AE2  2E2B               	decfsz	___ftmul@cntr,f,c
  3210  000AE4  D7EE               	goto	l548
  3211  000AE6  C028  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  3212  000AEA  C029  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3213  000AEE  C02A  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3214  000AF2  C027  F016         	movff	___ftmul@exp,___ftpack@exp
  3215  000AF6  C02C  F017         	movff	___ftmul@sign,___ftpack@sign
  3216  000AFA  EC86  F005         	call	___ftpack	;wreg free
  3217  000AFE  C013  F01E         	movff	?___ftpack,?___ftmul
  3218  000B02  C014  F01F         	movff	?___ftpack+1,?___ftmul+1
  3219  000B06  C015  F020         	movff	?___ftpack+2,?___ftmul+2
  3220  000B0A  0012               	return	
  3221  000B0C                     __end_of___ftmul:
  3222                           	opt stack 0
  3223                           tblptru	equ	0xFF8
  3224                           tblptrh	equ	0xFF7
  3225                           tblptrl	equ	0xFF6
  3226                           tablat	equ	0xFF5
  3227                           intcon	equ	0xFF2
  3228                           intcon3	equ	0xFF0
  3229                           postinc0	equ	0xFEE
  3230                           wreg	equ	0xFE8
  3231                           postdec1	equ	0xFE5
  3232                           fsr1l	equ	0xFE1
  3233                           status	equ	0xFD8
  3234                           
  3235 ;; *************** function ___ftpack *****************
  3236 ;; Defined at:
  3237 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;  arg             3   18[COMRAM] unsigned um
  3240 ;;  exp             1   21[COMRAM] unsigned char 
  3241 ;;  sign            1   22[COMRAM] unsigned char 
  3242 ;; Auto vars:     Size  Location     Type
  3243 ;;		None
  3244 ;; Return value:  Size  Location     Type
  3245 ;;                  3   18[COMRAM] float 
  3246 ;; Registers used:
  3247 ;;		wreg, status,2, status,0
  3248 ;; Tracked objects:
  3249 ;;		On entry : 0/0
  3250 ;;		On exit  : 0/0
  3251 ;;		Unchanged: 0/0
  3252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3253 ;;      Params:         5       0       0       0       0       0       0       0       0
  3254 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3255 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3256 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3257 ;;Total ram usage:        8 bytes
  3258 ;; Hardware stack levels used:    1
  3259 ;; Hardware stack levels required when called:    1
  3260 ;; This function calls:
  3261 ;;		Nothing
  3262 ;; This function is called by:
  3263 ;;		___ftmul
  3264 ;;		___lwtoft
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           	psect	text12
  3269  000B0C                     __ptext12:
  3270                           	opt stack 0
  3271  000B0C                     ___ftpack:
  3272                           	opt stack 26
  3273                           
  3274                           ;incstack = 0
  3275  000B0C  5016               	movf	___ftpack@exp,w,c
  3276  000B0E  B4D8               	btfsc	status,2,c
  3277  000B10  D005               	goto	u1840
  3278  000B12  5013               	movf	___ftpack@arg,w,c
  3279  000B14  1014               	iorwf	___ftpack@arg+1,w,c
  3280  000B16  1015               	iorwf	___ftpack@arg+2,w,c
  3281  000B18  A4D8               	btfss	status,2,c
  3282  000B1A  D00C               	goto	l463
  3283  000B1C                     u1840:
  3284  000B1C  0E00               	movlw	0
  3285  000B1E  6E13               	movwf	?___ftpack,c
  3286  000B20  0E00               	movlw	0
  3287  000B22  6E14               	movwf	?___ftpack+1,c
  3288  000B24  0E00               	movlw	0
  3289  000B26  6E15               	movwf	?___ftpack+2,c
  3290  000B28  0012               	return	
  3291  000B2A  2A16               	incf	___ftpack@exp,f,c
  3292  000B2C  90D8               	bcf	status,0,c
  3293  000B2E  3215               	rrcf	___ftpack@arg+2,f,c
  3294  000B30  3214               	rrcf	___ftpack@arg+1,f,c
  3295  000B32  3213               	rrcf	___ftpack@arg,f,c
  3296  000B34                     l463:
  3297  000B34  0E00               	movlw	0
  3298  000B36  1413               	andwf	___ftpack@arg,w,c
  3299  000B38  6E18               	movwf	??___ftpack& (0+255),c
  3300  000B3A  0E00               	movlw	0
  3301  000B3C  1414               	andwf	___ftpack@arg+1,w,c
  3302  000B3E  6E19               	movwf	(??___ftpack+1)& (0+255),c
  3303  000B40  0EFE               	movlw	254
  3304  000B42  1415               	andwf	___ftpack@arg+2,w,c
  3305  000B44  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  3306  000B46  5018               	movf	??___ftpack,w,c
  3307  000B48  1019               	iorwf	??___ftpack+1,w,c
  3308  000B4A  101A               	iorwf	??___ftpack+2,w,c
  3309  000B4C  B4D8               	btfsc	status,2,c
  3310  000B4E  D00C               	goto	l466
  3311  000B50  D7EC               	goto	l464
  3312  000B52  2A16               	incf	___ftpack@exp,f,c
  3313  000B54  0E01               	movlw	1
  3314  000B56  2613               	addwf	___ftpack@arg,f,c
  3315  000B58  0E00               	movlw	0
  3316  000B5A  2214               	addwfc	___ftpack@arg+1,f,c
  3317  000B5C  0E00               	movlw	0
  3318  000B5E  2215               	addwfc	___ftpack@arg+2,f,c
  3319  000B60  90D8               	bcf	status,0,c
  3320  000B62  3215               	rrcf	___ftpack@arg+2,f,c
  3321  000B64  3214               	rrcf	___ftpack@arg+1,f,c
  3322  000B66  3213               	rrcf	___ftpack@arg,f,c
  3323  000B68                     l466:
  3324  000B68  0E00               	movlw	0
  3325  000B6A  1413               	andwf	___ftpack@arg,w,c
  3326  000B6C  6E18               	movwf	??___ftpack& (0+255),c
  3327  000B6E  0E00               	movlw	0
  3328  000B70  1414               	andwf	___ftpack@arg+1,w,c
  3329  000B72  6E19               	movwf	(??___ftpack+1)& (0+255),c
  3330  000B74  0EFF               	movlw	255
  3331  000B76  1415               	andwf	___ftpack@arg+2,w,c
  3332  000B78  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  3333  000B7A  5018               	movf	??___ftpack,w,c
  3334  000B7C  1019               	iorwf	??___ftpack+1,w,c
  3335  000B7E  101A               	iorwf	??___ftpack+2,w,c
  3336  000B80  B4D8               	btfsc	status,2,c
  3337  000B82  D006               	goto	l469
  3338  000B84  D7E6               	goto	l467
  3339  000B86  0616               	decf	___ftpack@exp,f,c
  3340  000B88  90D8               	bcf	status,0,c
  3341  000B8A  3613               	rlcf	___ftpack@arg,f,c
  3342  000B8C  3614               	rlcf	___ftpack@arg+1,f,c
  3343  000B8E  3615               	rlcf	___ftpack@arg+2,f,c
  3344  000B90                     l469:
  3345  000B90  BE14               	btfsc	___ftpack@arg+1,7,c
  3346  000B92  D003               	goto	u1880
  3347  000B94  0E02               	movlw	2
  3348  000B96  6016               	cpfslt	___ftpack@exp,c
  3349  000B98  D7F6               	goto	l470
  3350  000B9A                     u1880:
  3351  000B9A  A016               	btfss	___ftpack@exp,0,c
  3352  000B9C  9E14               	bcf	___ftpack@arg+1,7,c
  3353  000B9E  90D8               	bcf	status,0,c
  3354  000BA0  3216               	rrcf	___ftpack@exp,f,c
  3355  000BA2  5016               	movf	___ftpack@exp,w,c
  3356  000BA4  1215               	iorwf	___ftpack@arg+2,f,c
  3357  000BA6  5017               	movf	___ftpack@sign,w,c
  3358  000BA8  A4D8               	btfss	status,2,c
  3359  000BAA  8E15               	bsf	___ftpack@arg+2,7,c
  3360  000BAC  C013  F013         	movff	___ftpack@arg,?___ftpack
  3361  000BB0  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  3362  000BB4  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  3363  000BB8  0012               	return	
  3364  000BBA                     __end_of___ftpack:
  3365                           	opt stack 0
  3366                           tblptru	equ	0xFF8
  3367                           tblptrh	equ	0xFF7
  3368                           tblptrl	equ	0xFF6
  3369                           tablat	equ	0xFF5
  3370                           intcon	equ	0xFF2
  3371                           intcon3	equ	0xFF0
  3372                           postinc0	equ	0xFEE
  3373                           wreg	equ	0xFE8
  3374                           postdec1	equ	0xFE5
  3375                           fsr1l	equ	0xFE1
  3376                           status	equ	0xFD8
  3377                           
  3378 ;; *************** function _ISR *****************
  3379 ;; Defined at:
  3380 ;;		line 91 in file "funciones.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;		None
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;		None
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  1    wreg      void 
  3387 ;; Registers used:
  3388 ;;		wreg, status,2, status,0
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3394 ;;      Params:         0       0       0       0       0       0       0       0       0
  3395 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3396 ;;      Temps:         18       0       0       0       0       0       0       0       0
  3397 ;;      Totals:        18       0       0       0       0       0       0       0       0
  3398 ;;Total ram usage:       18 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; This function calls:
  3401 ;;		Nothing
  3402 ;; This function is called by:
  3403 ;;		Interrupt level 2
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           	psect	intcode
  3408  000008                     __pintcode:
  3409                           	opt stack 0
  3410  000008                     _ISR:
  3411                           	opt stack 25
  3412                           
  3413                           ;incstack = 0
  3414  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3415  00000A  EDDD  F005         	call	int_func,f	;refresh shadow registers
  3416                           tblptru	equ	0xFF8
  3417                           tblptrh	equ	0xFF7
  3418                           tblptrl	equ	0xFF6
  3419                           tablat	equ	0xFF5
  3420                           intcon	equ	0xFF2
  3421                           intcon3	equ	0xFF0
  3422                           postinc0	equ	0xFEE
  3423                           wreg	equ	0xFE8
  3424                           postdec1	equ	0xFE5
  3425                           fsr1l	equ	0xFE1
  3426                           status	equ	0xFD8
  3427                           
  3428                           	psect	intcode_body
  3429  000BBA                     __pintcode_body:
  3430                           	opt stack 25
  3431  000BBA                     int_func:
  3432                           	opt stack 25
  3433  000BBA  0006               	pop		; remove dummy address from shadow register refresh
  3434  000BBC  CFFA F001          	movff	pclath,??_ISR
  3435  000BC0  CFFB F002          	movff	pclatu,??_ISR+1
  3436  000BC4  CFE9 F003          	movff	fsr0l,??_ISR+2
  3437  000BC8  CFEA F004          	movff	fsr0h,??_ISR+3
  3438  000BCC  CFE1 F005          	movff	fsr1l,??_ISR+4
  3439  000BD0  CFE2 F006          	movff	fsr1h,??_ISR+5
  3440  000BD4  CFD9 F007          	movff	fsr2l,??_ISR+6
  3441  000BD8  CFDA F008          	movff	fsr2h,??_ISR+7
  3442  000BDC  CFF3 F009          	movff	prodl,??_ISR+8
  3443  000BE0  CFF4 F00A          	movff	prodh,??_ISR+9
  3444  000BE4  CFF6 F00B          	movff	tblptrl,??_ISR+10
  3445  000BE8  CFF7 F00C          	movff	tblptrh,??_ISR+11
  3446  000BEC  CFF8 F00D          	movff	tblptru,??_ISR+12
  3447  000BF0  CFF5 F00E          	movff	tablat,??_ISR+13
  3448  000BF4  C04D  F00F         	movff	btemp,??_ISR+14
  3449  000BF8  C04E  F010         	movff	btemp+1,??_ISR+15
  3450  000BFC  C04F  F011         	movff	btemp+2,??_ISR+16
  3451  000C00  C050  F012         	movff	btemp+3,??_ISR+17
  3452                           
  3453                           ;funciones.c: 92: if(!TMR2IF) return;
  3454  000C04  A29E               	btfss	3998,1,c	;volatile
  3455  000C06  D008               	goto	i2l248
  3456                           
  3457                           ;funciones.c: 93: TMR2IF = 0;
  3458  000C08  929E               	bcf	3998,1,c	;volatile
  3459                           
  3460                           ;funciones.c: 94: millisCounter++;
  3461  000C0A  0E01               	movlw	1
  3462  000C0C  0100               	movlb	0	; () banked
  3463  000C0E  277B               	addwf	_millisCounter& (0+255),f,b
  3464  000C10  0E00               	movlw	0
  3465  000C12  237C               	addwfc	(_millisCounter+1)& (0+255),f,b
  3466  000C14  237D               	addwfc	(_millisCounter+2)& (0+255),f,b
  3467  000C16  237E               	addwfc	(_millisCounter+3)& (0+255),f,b
  3468  000C18                     i2l248:
  3469  000C18  C012  F050         	movff	??_ISR+17,btemp+3
  3470  000C1C  C011  F04F         	movff	??_ISR+16,btemp+2
  3471  000C20  C010  F04E         	movff	??_ISR+15,btemp+1
  3472  000C24  C00F  F04D         	movff	??_ISR+14,btemp
  3473  000C28  C00E  FFF5         	movff	??_ISR+13,tablat
  3474  000C2C  C00D  FFF8         	movff	??_ISR+12,tblptru
  3475  000C30  C00C  FFF7         	movff	??_ISR+11,tblptrh
  3476  000C34  C00B  FFF6         	movff	??_ISR+10,tblptrl
  3477  000C38  C00A  FFF4         	movff	??_ISR+9,prodh
  3478  000C3C  C009  FFF3         	movff	??_ISR+8,prodl
  3479  000C40  C008  FFDA         	movff	??_ISR+7,fsr2h
  3480  000C44  C007  FFD9         	movff	??_ISR+6,fsr2l
  3481  000C48  C006  FFE2         	movff	??_ISR+5,fsr1h
  3482  000C4C  C005  FFE1         	movff	??_ISR+4,fsr1l
  3483  000C50  C004  FFEA         	movff	??_ISR+3,fsr0h
  3484  000C54  C003  FFE9         	movff	??_ISR+2,fsr0l
  3485  000C58  C002  FFFB         	movff	??_ISR+1,pclatu
  3486  000C5C  C001  FFFA         	movff	??_ISR,pclath
  3487  000C60  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3488  000C62  0011               	retfie		f
  3489  000C64                     __end_of_ISR:
  3490                           	opt stack 0
  3491  0000                     pclatu	equ	0xFFB
  3492                           pclath	equ	0xFFA
  3493                           tblptru	equ	0xFF8
  3494                           tblptrh	equ	0xFF7
  3495                           tblptrl	equ	0xFF6
  3496                           tablat	equ	0xFF5
  3497                           prodh	equ	0xFF4
  3498                           prodl	equ	0xFF3
  3499                           intcon	equ	0xFF2
  3500                           intcon3	equ	0xFF0
  3501                           postinc0	equ	0xFEE
  3502                           fsr0h	equ	0xFEA
  3503                           fsr0l	equ	0xFE9
  3504                           wreg	equ	0xFE8
  3505                           postdec1	equ	0xFE5
  3506                           fsr1h	equ	0xFE2
  3507                           fsr1l	equ	0xFE1
  3508                           fsr2h	equ	0xFDA
  3509                           fsr2l	equ	0xFD9
  3510                           status	equ	0xFD8
  3511                           pclatu	equ	0xFFB
  3512                           pclath	equ	0xFFA
  3513                           tblptru	equ	0xFF8
  3514                           tblptrh	equ	0xFF7
  3515                           tblptrl	equ	0xFF6
  3516                           tablat	equ	0xFF5
  3517                           prodh	equ	0xFF4
  3518                           prodl	equ	0xFF3
  3519                           intcon	equ	0xFF2
  3520                           intcon3	equ	0xFF0
  3521                           postinc0	equ	0xFEE
  3522                           fsr0h	equ	0xFEA
  3523                           fsr0l	equ	0xFE9
  3524                           wreg	equ	0xFE8
  3525                           postdec1	equ	0xFE5
  3526                           fsr1h	equ	0xFE2
  3527                           fsr1l	equ	0xFE1
  3528                           fsr2h	equ	0xFDA
  3529                           fsr2l	equ	0xFD9
  3530                           status	equ	0xFD8
  3531                           
  3532                           	psect	rparam
  3533  0000                     pclatu	equ	0xFFB
  3534                           pclath	equ	0xFFA
  3535                           tblptru	equ	0xFF8
  3536                           tblptrh	equ	0xFF7
  3537                           tblptrl	equ	0xFF6
  3538                           tablat	equ	0xFF5
  3539                           prodh	equ	0xFF4
  3540                           prodl	equ	0xFF3
  3541                           intcon	equ	0xFF2
  3542                           intcon3	equ	0xFF0
  3543                           postinc0	equ	0xFEE
  3544                           fsr0h	equ	0xFEA
  3545                           fsr0l	equ	0xFE9
  3546                           wreg	equ	0xFE8
  3547                           postdec1	equ	0xFE5
  3548                           fsr1h	equ	0xFE2
  3549                           fsr1l	equ	0xFE1
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8
  3553                           
  3554                           	psect	temp
  3555  00004D                     btemp:
  3556                           	opt stack 0
  3557  00004D                     	ds	1
  3558  0000                     int$flags	set	btemp
  3559  0000                     wtemp6	set	btemp+1
  3560                           pclatu	equ	0xFFB
  3561                           pclath	equ	0xFFA
  3562                           tblptru	equ	0xFF8
  3563                           tblptrh	equ	0xFF7
  3564                           tblptrl	equ	0xFF6
  3565                           tablat	equ	0xFF5
  3566                           prodh	equ	0xFF4
  3567                           prodl	equ	0xFF3
  3568                           intcon	equ	0xFF2
  3569                           intcon3	equ	0xFF0
  3570                           postinc0	equ	0xFEE
  3571                           fsr0h	equ	0xFEA
  3572                           fsr0l	equ	0xFE9
  3573                           wreg	equ	0xFE8
  3574                           postdec1	equ	0xFE5
  3575                           fsr1h	equ	0xFE2
  3576                           fsr1l	equ	0xFE1
  3577                           fsr2h	equ	0xFDA
  3578                           fsr2l	equ	0xFD9
  3579                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         27
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     57      76
    BANK0           160     27      39
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _loop->_setMotores
    _estrategiaClasica->_setMotores
    _estrategiaCiego->_setMotores
    _estrategiaAtras->_setMotores
    _estrategiaAdelante->_setMotores
    _init->_setMotores
    _setMotores->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lwtoft

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_loop
    _loop->_estrategiaCiego
    _loop->_estrategiaClasica
    _estrategiaClasica->_setMotores
    _estrategiaCiego->_setMotores
    _estrategiaAtras->_setMotores
    _estrategiaAdelante->_setMotores
    _init->_setMotores
    _setMotores->___fttol

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   72158
                               _init
                               _loop
 ---------------------------------------------------------------------------------
 (1) _loop                                                 7     7      0   60144
                                             20 BANK0      7     7      0
                 _estrategiaAdelante
                    _estrategiaAtras
                    _estrategiaCiego
                  _estrategiaClasica
                             _millis
                         _setMotores
 ---------------------------------------------------------------------------------
 (2) _estrategiaClasica                                    4     4      0   12014
                                             16 BANK0      4     4      0
                             _millis
                         _setMotores
 ---------------------------------------------------------------------------------
 (2) _estrategiaCiego                                      4     4      0   12014
                                             16 BANK0      4     4      0
                             _millis
                         _setMotores
 ---------------------------------------------------------------------------------
 (2) _estrategiaAtras                                      0     0      0   12014
                             _millis
                         _setMotores
 ---------------------------------------------------------------------------------
 (2) _estrategiaAdelante                                   0     0      0   12014
                             _millis
                         _setMotores
 ---------------------------------------------------------------------------------
 (2) _millis                                               4     0      4       0
                                             18 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   12014
                         _setMotores
 ---------------------------------------------------------------------------------
 (2) _setMotores                                          14    10      4   12014
                                             53 COMRAM     4     0      4
                                              6 BANK0     10    10      0
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    2984
                                             26 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     551
                                             44 COMRAM     9     5      4
                                              0 BANK0      6     6      0
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3761
                                             29 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2773
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _setMotores
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
   _loop
     _estrategiaAdelante
       _millis
       _setMotores
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
     _estrategiaAtras
       _millis
       _setMotores
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
     _estrategiaCiego
       _millis
       _setMotores
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
     _estrategiaClasica
       _millis
       _setMotores
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
     _millis
     _setMotores
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1B      27       5       24.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     39      4C       1       80.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      73      20        0.0%
DATA                 0      0      73       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Sep 03 18:58:50 2019

__size_of_estrategiaAdelante 00F6                           l33 01F2                           l34 0014  
                         l51 00A8                           l43 0080                           l35 004A  
                         l61 0122                           l53 00E4                           l62 0160  
                         l54 00F0                           l46 0076                           l38 0040  
                         l55 0106                           l47 0072                           l39 003C  
                         l64 0170                           l65 0174                           l90 0294  
                         l66 01DA                           l91 029E                           l83 0276  
                         l67 01E0                           l59 00FC                           l92 02A4  
                         l84 025C                           l68 01E6                           l77 03C0  
                         l93 02BE                           l85 0256                           l69 01EC  
                         l94 02DC                           l86 0270                           l78 0222  
                         l95 02FA                           l87 026A                           l79 0244  
                         l96 0332                           l88 0280                           l97 0348  
                         l89 028A                           l98 0366                           l99 0384  
                __CFG_BORV$0 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                          l100 03A2  
                        l110 05F4                          l120 06FC                          l114 05FA  
                        l115 0614                          l220 042C                          l108 0712  
                        l116 0660                          l133 0A02                          l117 0676  
                        l109 05D2                          l230 047C                          l222 0436  
                        l134 095A                          l150 0864                          l118 06AE  
                        l135 0992                          l151 089C                          l119 06C4  
                        l232 04CE                          l224 0486                          l216 0440  
                        l136 09CA                          l128 093E                          l152 08D4  
                        l144 0848                          l234 04DA                          l226 048E  
                        l218 0448                          l236 04E8                          l228 0472  
                        l149 090C                          l238 04F4                          l158 0D7E  
                        l470 0B86                          l542 0A40                          l463 0B34  
                        l464 0B2A                          l544 0A68                          l545 0A9A  
                        l466 0B68                          l546 0AAA                          l467 0B52  
                        l571 07FE                          l563 0762                          l548 0AC2  
                        l572 07F2                          l469 0B90                          l549 0AD2  
                        l565 07DA                          l574 081A                          l566 07CA  
               __CFG_CPB$OFF 000000                          _PR2 000FCB                 __CFG_CPD$OFF 000000  
                        _ISR 0008                 __CFG_BOR$OFF 000000                          wreg 000FE8  
               __CFG_LVP$OFF 000000                         ?_ISR 0001                 __CFG_WDT$OFF 000000  
                       u2030 0804                         u2110 04B2                         u2050 0412  
                       u2108 049E                         u2060 0422                         u2070 0458  
                       u2128 04B6                         u2080 0468                         u2160 022A  
                       u2090 049A                         u2280 05DA                         u2520 007A  
                       u2380 0938                         u2460 0842                         u2710 01C2  
                       u1911 0A28                         _PIE1 000F9D                         u1840 0B1C  
                       _PIE2 000FA0                         u2650 00F8                         u2490 0044  
                       u1931 0A50                         u2635 00EC                         u2636 00EE  
                       u2580 00BE                         u2575 00B0                         u1880 0B9A  
                       u2728 01C6                         u2576 00B2                         u1971 0744  
                       u1990 0780                         u2598 00C2                         u1995 0778  
                       _main 0D7A                 ___ftpack@arg 0013                         _init 0C64  
                       _loop 0012                 ___ftpack@exp 0016                         fsr0h 000FEA  
                       fsr1h 000FE2                         fsr2h 000FDA                         fsr0l 000FE9  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 004D  
                       prodh 000FF4                         prodl 000FF3                         start 000E  
              __CFG_IESO$OFF 000000                 ___ftmul@cntr 002B                 ___param_bank 000000  
               ___ftmul@sign 002C                        ??_ISR 0001      estrategiaClasica@estado 0047  
               ___fttol@exp1 0065                 ___fttol@lval 0061                __CFG_PLLDIV$5 000000  
             __CFG_CCP2MX$ON 000000                        ?_main 0001                        ?_init 0001  
                      ?_loop 0001              __end_of___ftmul 0B0C              __end_of___fttol 082C  
                      _T2CON 000FCA                        i2l248 0C18                __CFG_USBDIV$2 000000  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000               __CFG_EBTRB$OFF 000000                ___ftpack@sign 0017  
                      pclath 000FFA                        tablat 000FF5                        loop@m 0042  
                      status 000FD8                        wtemp6 004E               __CFG_MCLRE$OFF 000000  
            __initialization 0CFE                 __end_of_main 0D84                 __end_of_init 0CFE  
               __end_of_loop 0220              setMotores@dutyD 006E              setMotores@dutyI 006C  
                     ??_main 003A                ___fttol@sign1 0060                       ??_init 003A  
                     ??_loop 0074                __activetblptr 000002                       _CCPR1L 000FBE  
                     _CCPR2L 000FBB             __end_of___ftpack 0BBA             __end_of___lwtoft 0D68  
   __size_of_estrategiaCiego 0164                       _TMR2IF 007CF1     __size_of_estrategiaAtras 00F6  
      estrategiaCiego@estado 0046               __CFG_XINST$OFF 000000                    ??___ftmul 0024  
                  ??___fttol 0031                       _millis 0D68                       clear_0 0D24  
                     clear_1 0D30        ___ftmul@f3_as_product 0028                 __pdataCOMRAM 0049  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                 __accesstop 0060      __end_of__initialization 0D36              __CFG_PBADEN$OFF 000000  
             _setMotores$930 006A               _setMotores$929 0068                ___rparam_used 000001  
                 ___ftmul@f1 001E                   ___ftmul@f2 0021                   ___fttol@f1 002D  
             __pcstackCOMRAM 0001             setMotores@speedD 0038             setMotores@speedI 0036  
                 ___lwtoft@c 001B                   __pbssBANK0 007B            _estrategiaClasica 0220  
         ?_estrategiaClasica 0001   __end_of_estrategiaAdelante 0A18            ??_estrategiaCiego 0070  
          ??_estrategiaAtras 003A          ??_estrategiaClasica 0070                      ?_millis 0013  
                  ?___ftpack 0013                    ?___lwtoft 001B                      _INTCON3 000FF0  
  __end_of_estrategiaClasica 03FA              __CFG_VREGEN$OFF 000000                      __Hparam 0000  
                    __Lparam 0000                   _estadoMenu 0048        estrategiaAtras@estado 0049  
                    ___ftmul 0A18                      ___fttol 0734              __CFG_STVREN$OFF 000000  
                    __pcinit 0CFE                   ??___ftpack 0018              __size_of_millis 0012  
                    __ramtop 0800                      __ptext0 0D7A                      __ptext1 0012  
                    __ptext2 0220                      __ptext3 05D0                      __ptext4 082C  
                    __ptext5 0922                      __ptext6 0D68                      __ptext7 0C64  
                    __ptext8 03FA                      __ptext9 0D44                _millisCounter 007B  
                 ??___lwtoft 001E                 __size_of_ISR 0C5C                    _T2CONbits 000FCA  
             __pintcode_body 0BBA         end_of_initialization 0D36                __Lmediumconst 0000  
                    int_func 0BBA                   _setMotores 03FA                      postdec1 000FE5  
                    postinc0 000FEE             estrategiaCiego@m 003A             estrategiaAtras@m 007F  
                  _PORTAbits 000F80                    _PORTBbits 000F81                    _PORTCbits 000F82  
             loop@estrategia 004B                    _TRISAbits 000F92                    _TRISBbits 000F93  
                  _TRISCbits 000F94   __size_of_estrategiaClasica 01DA                  _CCP1CONbits 000FBD  
                _CCP2CONbits 000FBA                  ___ftmul@exp 0027                __pidataCOMRAM 0D84  
             __end_of_millis 0D7A          start_initialization 0CFE                  __end_of_ISR 0C64  
            _estrategiaCiego 05D0              _estrategiaAtras 082C                  ?_setMotores 0036  
           __CFG_LPT1OSC$OFF 000000                     ??_millis 0017           _estrategiaAdelante 0922  
          __size_of___ftpack 00AE                  __pbssCOMRAM 003A     estrategiaAdelante@estado 004A  
          __size_of___lwtoft 0024                __pcstackBANK0 0060          ?_estrategiaAdelante 0001  
       ??_estrategiaAdelante 003A                    __pintcode 0008                     ?___ftmul 001E  
                   ?___fttol 002D                    _direccion 004C          __size_of_setMotores 01D6  
    __end_of_estrategiaCiego 0734      __end_of_estrategiaAtras 0922                     _LATAbits 000F89  
                   _LATCbits 000F8B                     _PIE1bits 000F9D                     _UCFGbits 000F6F  
                   _RCONbits 000FD0             __CFG_WDTPS$32768 000000                     _UCONbits 000F6D  
                 _ADCON1bits 000FC1          estrategiaAdelante@m 0083                    copy_data0 0D12  
                   __Hrparam 0000                     __Lrparam 0000             __size_of___ftmul 00F4  
           __size_of___fttol 00F8                     ___ftpack 0B0C                     ___lwtoft 0D44  
           ?_estrategiaCiego 0001             ?_estrategiaAtras 0001                     __ptext10 0734  
                   __ptext11 0A18                     __ptext12 0B0C                     _loop$316 0079  
                   _loop$325 007A                 ??_setMotores 0066                __size_of_main 000A  
              __size_of_init 009A                __size_of_loop 020E                     int$flags 004D  
      __CFG_CPUDIV$OSC1_PLL2 000000                   _INTCONbits 000FF2           __end_of_setMotores 05D0  
         estrategiaClasica@m 003E                     intlevel2 0000           __CFG_FOSC$HSPLL_HS 000000  
