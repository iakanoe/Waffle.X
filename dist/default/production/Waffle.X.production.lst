

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Sep 07 16:50:46 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1,inline
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,inline
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,inline
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,inline
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,inline
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,inline
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,inline
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,inline
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    30  0000                     
    31                           ; Version 1.45
    32                           ; Generated 16/11/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F2550 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataCOMRAM
    67  000E8C                     __pidataCOMRAM:
    68                           	opt stack 0
    69                           
    70                           ;initializer for estrategiaAtras@estado
    71  000E8C  0B                 	db	11
    72                           
    73                           ;initializer for estrategiaAdelante@estado
    74  000E8D  0B                 	db	11
    75                           
    76                           ;initializer for estrategiaCiego@estado
    77  000E8E  0C                 	db	12
    78                           
    79                           ;initializer for estrategiaClasica@firstTime
    80  000E8F  01                 	db	1
    81                           
    82                           ;initializer for loop@estrategia
    83  000E90  03                 	db	3
    84                           
    85                           ;initializer for _direccion
    86  000E91  02                 	db	2
    87  0000                     _LATCbits	set	3979
    88  0000                     _INTCONbits	set	4082
    89  0000                     _PIE1bits	set	3997
    90  0000                     _RCONbits	set	4048
    91  0000                     _PIE2	set	4000
    92  0000                     _PIE1	set	3997
    93  0000                     _INTCON3	set	4080
    94  0000                     _CCP2CONbits	set	4026
    95  0000                     _CCPR2L	set	4027
    96  0000                     _CCP1CONbits	set	4029
    97  0000                     _CCPR1L	set	4030
    98  0000                     _PR2	set	4043
    99  0000                     _T2CONbits	set	4042
   100  0000                     _T2CON	set	4042
   101  0000                     _TRISBbits	set	3987
   102  0000                     _TRISCbits	set	3988
   103  0000                     _TRISAbits	set	3986
   104  0000                     _UCFGbits	set	3951
   105  0000                     _UCONbits	set	3949
   106  0000                     _ADCON1bits	set	4033
   107  0000                     _PORTCbits	set	3970
   108  0000                     _PORTBbits	set	3969
   109  0000                     _LATAbits	set	3977
   110  0000                     _PORTAbits	set	3968
   111  0000                     _TMR2IF	set	31985
   112                           
   113                           ; #config settings
   114  0000                     
   115                           	psect	cinit
   116  000E06                     __pcinit:
   117                           	opt stack 0
   118  000E06                     start_initialization:
   119                           	opt stack 0
   120  000E06                     __initialization:
   121                           	opt stack 0
   122                           
   123                           ; Initialize objects allocated to COMRAM (6 bytes)
   124                           ; load TBLPTR registers with __pidataCOMRAM
   125  000E06  0E8C               	movlw	low __pidataCOMRAM
   126  000E08  6EF6               	movwf	tblptrl,c
   127  000E0A  0E0E               	movlw	high __pidataCOMRAM
   128  000E0C  6EF7               	movwf	tblptrh,c
   129  000E0E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   130  000E10  6EF8               	movwf	tblptru,c
   131  000E12  EE00  F046         	lfsr	0,__pdataCOMRAM
   132  000E16  EE10 F006          	lfsr	1,6
   133  000E1A                     copy_data0:
   134  000E1A  0009               	tblrd		*+
   135  000E1C  CFF5 FFEE          	movff	tablat,postinc0
   136  000E20  50E5               	movf	postdec1,w,c
   137  000E22  50E1               	movf	fsr1l,w,c
   138  000E24  E1FA               	bnz	copy_data0
   139                           
   140                           ; Clear objects allocated to BANK0 (16 bytes)
   141  000E26  EE00  F079         	lfsr	0,__pbssBANK0
   142  000E2A  0E10               	movlw	16
   143  000E2C                     clear_0:
   144  000E2C  6AEE               	clrf	postinc0,c
   145  000E2E  06E8               	decf	wreg,f,c
   146  000E30  E1FD               	bnz	clear_0
   147                           
   148                           ; Clear objects allocated to COMRAM (10 bytes)
   149  000E32  EE00  F03C         	lfsr	0,__pbssCOMRAM
   150  000E36  0E0A               	movlw	10
   151  000E38                     clear_1:
   152  000E38  6AEE               	clrf	postinc0,c
   153  000E3A  06E8               	decf	wreg,f,c
   154  000E3C  E1FD               	bnz	clear_1
   155  000E3E                     end_of_initialization:
   156                           	opt stack 0
   157  000E3E                     __end_of__initialization:
   158                           	opt stack 0
   159  000E3E  904C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   160  000E40  924C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   161  000E42  0E00               	movlw	low (__Lmediumconst shr (0+16))
   162  000E44  6EF8               	movwf	tblptru,c
   163  000E46  0100               	movlb	0
   164  000E48  EF41  F007         	goto	_main	;jump to C main() function
   165                           tblptru	equ	0xFF8
   166                           tblptrh	equ	0xFF7
   167                           tblptrl	equ	0xFF6
   168                           tablat	equ	0xFF5
   169                           postinc0	equ	0xFEE
   170                           wreg	equ	0xFE8
   171                           postdec1	equ	0xFE5
   172                           fsr1l	equ	0xFE1
   173                           
   174                           	psect	bssCOMRAM
   175  00003C                     __pbssCOMRAM:
   176                           	opt stack 0
   177  00003C                     estrategiaClasica@m:
   178                           	opt stack 0
   179  00003C                     	ds	4
   180  000040                     loop@m:
   181                           	opt stack 0
   182  000040                     	ds	4
   183  000044                     estrategiaClasica@estado:
   184                           	opt stack 0
   185  000044                     	ds	1
   186  000045                     _estadoMenu:
   187                           	opt stack 0
   188  000045                     	ds	1
   189                           tblptru	equ	0xFF8
   190                           tblptrh	equ	0xFF7
   191                           tblptrl	equ	0xFF6
   192                           tablat	equ	0xFF5
   193                           postinc0	equ	0xFEE
   194                           wreg	equ	0xFE8
   195                           postdec1	equ	0xFE5
   196                           fsr1l	equ	0xFE1
   197                           
   198                           	psect	dataCOMRAM
   199  000046                     __pdataCOMRAM:
   200                           	opt stack 0
   201  000046                     estrategiaAtras@estado:
   202                           	opt stack 0
   203  000046                     	ds	1
   204  000047                     estrategiaAdelante@estado:
   205                           	opt stack 0
   206  000047                     	ds	1
   207  000048                     estrategiaCiego@estado:
   208                           	opt stack 0
   209  000048                     	ds	1
   210  000049                     estrategiaClasica@firstTime:
   211                           	opt stack 0
   212  000049                     	ds	1
   213  00004A                     loop@estrategia:
   214                           	opt stack 0
   215  00004A                     	ds	1
   216  00004B                     _direccion:
   217                           	opt stack 0
   218  00004B                     	ds	1
   219                           tblptru	equ	0xFF8
   220                           tblptrh	equ	0xFF7
   221                           tblptrl	equ	0xFF6
   222                           tablat	equ	0xFF5
   223                           postinc0	equ	0xFEE
   224                           wreg	equ	0xFE8
   225                           postdec1	equ	0xFE5
   226                           fsr1l	equ	0xFE1
   227                           
   228                           	psect	bssBANK0
   229  000079                     __pbssBANK0:
   230                           	opt stack 0
   231  000079                     _millisCounter:
   232                           	opt stack 0
   233  000079                     	ds	4
   234  00007D                     estrategiaAtras@m:
   235                           	opt stack 0
   236  00007D                     	ds	4
   237  000081                     estrategiaAdelante@m:
   238                           	opt stack 0
   239  000081                     	ds	4
   240  000085                     estrategiaCiego@m:
   241                           	opt stack 0
   242  000085                     	ds	4
   243                           tblptru	equ	0xFF8
   244                           tblptrh	equ	0xFF7
   245                           tblptrl	equ	0xFF6
   246                           tablat	equ	0xFF5
   247                           postinc0	equ	0xFEE
   248                           wreg	equ	0xFE8
   249                           postdec1	equ	0xFE5
   250                           fsr1l	equ	0xFE1
   251                           
   252                           	psect	cstackBANK0
   253  000060                     __pcstackBANK0:
   254                           	opt stack 0
   255  000060                     setMotores@speedI:
   256                           	opt stack 0
   257                           
   258                           ; 2 bytes @ 0x0
   259  000060                     	ds	2
   260  000062                     setMotores@speedD:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x2
   264  000062                     	ds	2
   265  000064                     ??_setMotores:
   266                           
   267                           ; 1 bytes @ 0x4
   268  000064                     	ds	2
   269  000066                     _setMotores$933:
   270                           	opt stack 0
   271                           
   272                           ; 2 bytes @ 0x6
   273  000066                     	ds	2
   274  000068                     _setMotores$934:
   275                           	opt stack 0
   276                           
   277                           ; 2 bytes @ 0x8
   278  000068                     	ds	2
   279  00006A                     setMotores@dutyI:
   280                           	opt stack 0
   281                           
   282                           ; 2 bytes @ 0xA
   283  00006A                     	ds	2
   284  00006C                     setMotores@dutyD:
   285                           	opt stack 0
   286                           
   287                           ; 2 bytes @ 0xC
   288  00006C                     	ds	2
   289  00006E                     ??_estrategiaClasica:
   290                           
   291                           ; 1 bytes @ 0xE
   292  00006E                     	ds	4
   293  000072                     ??_loop:
   294                           
   295                           ; 1 bytes @ 0x12
   296  000072                     	ds	5
   297  000077                     _loop$319:
   298                           	opt stack 0
   299                           
   300                           ; 1 bytes @ 0x17
   301  000077                     	ds	1
   302  000078                     _loop$328:
   303                           	opt stack 0
   304                           
   305                           ; 1 bytes @ 0x18
   306  000078                     	ds	1
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           tblptrl	equ	0xFF6
   310                           tablat	equ	0xFF5
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           postdec1	equ	0xFE5
   314                           fsr1l	equ	0xFE1
   315                           
   316                           	psect	cstackCOMRAM
   317  000001                     __pcstackCOMRAM:
   318                           	opt stack 0
   319  000001                     ??_ISR:
   320                           
   321                           ; 1 bytes @ 0x0
   322  000001                     	ds	18
   323  000013                     ?___ftpack:
   324                           	opt stack 0
   325  000013                     ?_millis:
   326                           	opt stack 0
   327  000013                     ___ftpack@arg:
   328                           	opt stack 0
   329                           
   330                           ; 3 bytes @ 0x12
   331  000013                     	ds	3
   332  000016                     ___ftpack@exp:
   333                           	opt stack 0
   334                           
   335                           ; 1 bytes @ 0x15
   336  000016                     	ds	1
   337  000017                     ___ftpack@sign:
   338                           	opt stack 0
   339                           
   340                           ; 1 bytes @ 0x16
   341  000017                     	ds	1
   342  000018                     ??___ftpack:
   343                           
   344                           ; 1 bytes @ 0x17
   345  000018                     	ds	3
   346  00001B                     ?___lwtoft:
   347                           	opt stack 0
   348  00001B                     ___lwtoft@c:
   349                           	opt stack 0
   350                           
   351                           ; 2 bytes @ 0x1A
   352  00001B                     	ds	3
   353  00001E                     ?___ftmul:
   354                           	opt stack 0
   355  00001E                     ___ftmul@f1:
   356                           	opt stack 0
   357                           
   358                           ; 3 bytes @ 0x1D
   359  00001E                     	ds	3
   360  000021                     ___ftmul@f2:
   361                           	opt stack 0
   362                           
   363                           ; 3 bytes @ 0x20
   364  000021                     	ds	3
   365  000024                     ??___ftmul:
   366                           
   367                           ; 1 bytes @ 0x23
   368  000024                     	ds	3
   369  000027                     ___ftmul@exp:
   370                           	opt stack 0
   371                           
   372                           ; 1 bytes @ 0x26
   373  000027                     	ds	1
   374  000028                     ___ftmul@f3_as_product:
   375                           	opt stack 0
   376                           
   377                           ; 3 bytes @ 0x27
   378  000028                     	ds	3
   379  00002B                     ___ftmul@cntr:
   380                           	opt stack 0
   381                           
   382                           ; 1 bytes @ 0x2A
   383  00002B                     	ds	1
   384  00002C                     ___ftmul@sign:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0x2B
   388  00002C                     	ds	1
   389  00002D                     ?___fttol:
   390                           	opt stack 0
   391  00002D                     ___fttol@f1:
   392                           	opt stack 0
   393                           
   394                           ; 3 bytes @ 0x2C
   395  00002D                     	ds	4
   396  000031                     ??___fttol:
   397                           
   398                           ; 1 bytes @ 0x30
   399  000031                     	ds	5
   400  000036                     ___fttol@sign1:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0x35
   404  000036                     	ds	1
   405  000037                     ___fttol@lval:
   406                           	opt stack 0
   407                           
   408                           ; 4 bytes @ 0x36
   409  000037                     	ds	4
   410  00003B                     ___fttol@exp1:
   411                           	opt stack 0
   412                           
   413                           ; 1 bytes @ 0x3A
   414  00003B                     	ds	1
   415  00003C                     tblptru	equ	0xFF8
   416                           tblptrh	equ	0xFF7
   417                           tblptrl	equ	0xFF6
   418                           tablat	equ	0xFF5
   419                           postinc0	equ	0xFEE
   420                           wreg	equ	0xFE8
   421                           postdec1	equ	0xFE5
   422                           fsr1l	equ	0xFE1
   423                           
   424                           ; 1 bytes @ 0x3B
   425 ;;
   426 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   427 ;;
   428 ;; *************** function _main *****************
   429 ;; Defined at:
   430 ;;		line 345 in file "main.c"
   431 ;; Parameters:    Size  Location     Type
   432 ;;		None
   433 ;; Auto vars:     Size  Location     Type
   434 ;;		None
   435 ;; Return value:  Size  Location     Type
   436 ;;                  1    wreg      void 
   437 ;; Registers used:
   438 ;;		wreg, status,2, status,0, cstack
   439 ;; Tracked objects:
   440 ;;		On entry : 0/0
   441 ;;		On exit  : 0/0
   442 ;;		Unchanged: 0/0
   443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   444 ;;      Params:         0       0       0       0       0       0       0       0       0
   445 ;;      Locals:         0       0       0       0       0       0       0       0       0
   446 ;;      Temps:          0       0       0       0       0       0       0       0       0
   447 ;;      Totals:         0       0       0       0       0       0       0       0       0
   448 ;;Total ram usage:        0 bytes
   449 ;; Hardware stack levels required when called:    6
   450 ;; This function calls:
   451 ;;		_init
   452 ;;		_loop
   453 ;; This function is called by:
   454 ;;		Startup code after reset
   455 ;; This function uses a non-reentrant model
   456 ;;
   457                           
   458                           	psect	text0
   459  000E82                     __ptext0:
   460                           	opt stack 0
   461  000E82                     _main:
   462                           	opt stack 25
   463                           
   464                           ;main.c: 346: init();
   465                           
   466                           ;incstack = 0
   467  000E82  ECB5  F006         	call	_init	;wreg free
   468  000E86                     l164:
   469  000E86  ECA8  F001         	call	_loop	;wreg free
   470  000E8A  D7FD               	goto	l164
   471  000E8C                     __end_of_main:
   472                           	opt stack 0
   473                           tblptru	equ	0xFF8
   474                           tblptrh	equ	0xFF7
   475                           tblptrl	equ	0xFF6
   476                           tablat	equ	0xFF5
   477                           postinc0	equ	0xFEE
   478                           wreg	equ	0xFE8
   479                           postdec1	equ	0xFE5
   480                           fsr1l	equ	0xFE1
   481                           
   482 ;; *************** function _loop *****************
   483 ;; Defined at:
   484 ;;		line 7 in file "main.c"
   485 ;; Parameters:    Size  Location     Type
   486 ;;		None
   487 ;; Auto vars:     Size  Location     Type
   488 ;;		None
   489 ;; Return value:  Size  Location     Type
   490 ;;                  1    wreg      void 
   491 ;; Registers used:
   492 ;;		wreg, status,2, status,0, cstack
   493 ;; Tracked objects:
   494 ;;		On entry : 0/0
   495 ;;		On exit  : 0/0
   496 ;;		Unchanged: 0/0
   497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   498 ;;      Params:         0       0       0       0       0       0       0       0       0
   499 ;;      Locals:         0       2       0       0       0       0       0       0       0
   500 ;;      Temps:          0       5       0       0       0       0       0       0       0
   501 ;;      Totals:         0       7       0       0       0       0       0       0       0
   502 ;;Total ram usage:        7 bytes
   503 ;; Hardware stack levels used:    1
   504 ;; Hardware stack levels required when called:    5
   505 ;; This function calls:
   506 ;;		_estrategiaAdelante
   507 ;;		_estrategiaAtras
   508 ;;		_estrategiaCiego
   509 ;;		_estrategiaClasica
   510 ;;		_millis
   511 ;;		_setMotores
   512 ;; This function is called by:
   513 ;;		_main
   514 ;; This function uses a non-reentrant model
   515 ;;
   516                           
   517                           	psect	text1
   518  000350                     __ptext1:
   519                           	opt stack 0
   520  000350                     _loop:
   521                           	opt stack 25
   522                           
   523                           ;main.c: 8: static unsigned long m = 0;
   524                           ;main.c: 9: static char estrategia = E_CLASICA;
   525                           ;main.c: 11: switch(estadoMenu){
   526                           
   527                           ;incstack = 0
   528  000350  D0F7               	goto	l33
   529  000352                     l34:
   530                           
   531                           ;main.c: 13: if((unsigned)!PORTAbits.RA1){
   532  000352  B280               	btfsc	3968,1,c	;volatile
   533  000354  D019               	goto	l35
   534                           
   535                           ;main.c: 14: LATAbits.LA2 = 1;
   536  000356  8489               	bsf	3977,2,c	;volatile
   537                           
   538                           ;main.c: 15: LATAbits.LA3 = 1;
   539  000358  8689               	bsf	3977,3,c	;volatile
   540                           
   541                           ;main.c: 16: LATAbits.LA4 = 1;
   542  00035A  8889               	bsf	3977,4,c	;volatile
   543                           
   544                           ;main.c: 17: m = millis();
   545  00035C  EC38  F007         	call	_millis	;wreg free
   546  000360  C013  F040         	movff	?_millis,loop@m
   547  000364  C014  F041         	movff	?_millis+1,loop@m+1
   548  000368  C015  F042         	movff	?_millis+2,loop@m+2
   549  00036C  C016  F043         	movff	?_millis+3,loop@m+3
   550                           
   551                           ;main.c: 18: direccion = DER;
   552  000370  0E02               	movlw	2
   553  000372  6E4B               	movwf	_direccion,c
   554                           
   555                           ;main.c: 19: estadoMenu = ESPERA;
   556  000374  0E02               	movlw	2
   557  000376  6E45               	movwf	_estadoMenu,c
   558                           
   559                           ;main.c: 20: while((unsigned)!PORTAbits.RA1)
   560  000378  D004               	goto	u2600
   561  00037A                     
   562                           ;main.c: 22: estadoMenu = LIMPIAR;
   563  00037A  0E01               	movlw	1
   564  00037C  6E45               	movwf	_estadoMenu,c
   565  00037E  AA80               	btfss	3968,5,c	;volatile
   566  000380  D7FC               	goto	l39
   567  000382                     u2600:
   568  000382  B280               	btfsc	3968,1,c	;volatile
   569  000384  0012               	return	
   570  000386  D7FB               	goto	l38
   571  000388                     l35:
   572                           
   573                           ;main.c: 24: }
   574                           ;main.c: 26: if((unsigned)!PORTAbits.RA5){
   575  000388  BA80               	btfsc	3968,5,c	;volatile
   576  00038A  D019               	goto	l43
   577                           
   578                           ;main.c: 27: LATAbits.LA2 = 1;
   579  00038C  8489               	bsf	3977,2,c	;volatile
   580                           
   581                           ;main.c: 28: LATAbits.LA3 = 1;
   582  00038E  8689               	bsf	3977,3,c	;volatile
   583                           
   584                           ;main.c: 29: LATAbits.LA4 = 1;
   585  000390  8889               	bsf	3977,4,c	;volatile
   586                           
   587                           ;main.c: 30: m = millis();
   588  000392  EC38  F007         	call	_millis	;wreg free
   589  000396  C013  F040         	movff	?_millis,loop@m
   590  00039A  C014  F041         	movff	?_millis+1,loop@m+1
   591  00039E  C015  F042         	movff	?_millis+2,loop@m+2
   592  0003A2  C016  F043         	movff	?_millis+3,loop@m+3
   593                           
   594                           ;main.c: 31: direccion = IZQ;
   595  0003A6  0E05               	movlw	5
   596  0003A8  6E4B               	movwf	_direccion,c
   597                           
   598                           ;main.c: 32: estadoMenu = ESPERA;
   599  0003AA  0E02               	movlw	2
   600  0003AC  6E45               	movwf	_estadoMenu,c
   601                           
   602                           ;main.c: 33: while((unsigned)!PORTAbits.RA5)
   603  0003AE  D004               	goto	u2630
   604  0003B0                     
   605                           ;main.c: 35: estadoMenu = LIMPIAR;
   606  0003B0  0E01               	movlw	1
   607  0003B2  6E45               	movwf	_estadoMenu,c
   608  0003B4  A280               	btfss	3968,1,c	;volatile
   609  0003B6  D7FC               	goto	l47
   610  0003B8                     u2630:
   611  0003B8  BA80               	btfsc	3968,5,c	;volatile
   612  0003BA  0012               	return	
   613  0003BC  D7FB               	goto	l46
   614  0003BE                     l43:
   615                           
   616                           ;main.c: 37: }
   617                           ;main.c: 39: setMotores(0, 0);
   618  0003BE  0E00               	movlw	0
   619  0003C0  0100               	movlb	0	; () banked
   620  0003C2  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
   621  0003C4  0E00               	movlw	0
   622  0003C6  6F60               	movwf	setMotores@speedI& (0+255),b
   623  0003C8  0E00               	movlw	0
   624  0003CA  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
   625  0003CC  0E00               	movlw	0
   626  0003CE  6F62               	movwf	setMotores@speedD& (0+255),b
   627  0003D0  ECB7  F002         	call	_setMotores	;wreg free
   628                           
   629                           ;main.c: 40: LATAbits.LA2 = (unsigned)((unsigned)!PORTBbits.RB5 || (unsigned)!PORTBbits.
      +                          RB4 || (unsigned)!PORTBbits.RB3);
   630  0003D4  0E01               	movlw	1
   631  0003D6  0100               	movlb	0	; () banked
   632  0003D8  6F77               	movwf	_loop$319& (0+255),b
   633                           
   634                           ; BSR set to: 0
   635  0003DA  BA81               	btfsc	3969,5,c	;volatile
   636                           
   637                           ; BSR set to: 0
   638  0003DC  A881               	btfss	3969,4,c	;volatile
   639  0003DE  D004               	goto	l51
   640                           
   641                           ; BSR set to: 0
   642  0003E0  A681               	btfss	3969,3,c	;volatile
   643  0003E2  D002               	goto	l51
   644                           
   645                           ; BSR set to: 0
   646  0003E4  0E00               	movlw	0
   647  0003E6  6F77               	movwf	_loop$319& (0+255),b
   648  0003E8                     l51:
   649                           
   650                           ; BSR set to: 0
   651                           
   652                           ; BSR set to: 0
   653  0003E8  B177               	btfsc	_loop$319& (0+255),0,b
   654  0003EA  D002               	bra	u2685
   655  0003EC  9489               	bcf	3977,2,c	;volatile
   656  0003EE  D001               	bra	u2686
   657  0003F0                     u2685:
   658  0003F0  8489               	bsf	3977,2,c	;volatile
   659  0003F2                     u2686:
   660                           
   661                           ;main.c: 41: LATAbits.LA3 = (unsigned)((unsigned)!PORTBbits.RB1);
   662  0003F2  B281               	btfsc	3969,1,c	;volatile
   663  0003F4  D004               	goto	u2690
   664  0003F6  0100               	movlb	0	; () banked
   665  0003F8  6B72               	clrf	??_loop& (0+255),b
   666  0003FA  2B72               	incf	??_loop& (0+255),f,b
   667  0003FC  D002               	goto	u2708
   668  0003FE                     u2690:
   669  0003FE  0100               	movlb	0	; () banked
   670  000400  6B72               	clrf	??_loop& (0+255),b
   671  000402                     u2708:
   672  000402  4772               	rlncf	??_loop& (0+255),f,b
   673  000404  4772               	rlncf	??_loop& (0+255),f,b
   674  000406  4772               	rlncf	??_loop& (0+255),f,b
   675  000408  5089               	movf	3977,w,c	;volatile
   676  00040A  1972               	xorwf	??_loop& (0+255),w,b
   677  00040C  0BF7               	andlw	-9
   678  00040E  1972               	xorwf	??_loop& (0+255),w,b
   679  000410  6E89               	movwf	3977,c	;volatile
   680                           
   681                           ; BSR set to: 0
   682                           ;main.c: 42: LATAbits.LA4 = (unsigned)((unsigned)!PORTCbits.RC5 || (unsigned)!PORTCbits.
      +                          RC4 || (unsigned)!PORTCbits.RC6);
   683  000412  0E01               	movlw	1
   684  000414  6F78               	movwf	_loop$328& (0+255),b
   685                           
   686                           ; BSR set to: 0
   687  000416  BA82               	btfsc	3970,5,c	;volatile
   688                           
   689                           ; BSR set to: 0
   690  000418  A882               	btfss	3970,4,c	;volatile
   691  00041A  D004               	goto	l53
   692                           
   693                           ; BSR set to: 0
   694  00041C  AC82               	btfss	3970,6,c	;volatile
   695  00041E  D002               	goto	l53
   696                           
   697                           ; BSR set to: 0
   698  000420  0E00               	movlw	0
   699  000422  6F78               	movwf	_loop$328& (0+255),b
   700  000424                     l53:
   701                           
   702                           ; BSR set to: 0
   703                           
   704                           ; BSR set to: 0
   705  000424  B178               	btfsc	_loop$328& (0+255),0,b
   706  000426  D002               	bra	u2745
   707  000428  9889               	bcf	3977,4,c	;volatile
   708  00042A  D001               	bra	u2746
   709  00042C                     u2745:
   710  00042C  8889               	bsf	3977,4,c	;volatile
   711  00042E                     u2746:
   712                           
   713                           ;main.c: 43: return;
   714  00042E  0012               	return	
   715  000430                     l54:
   716                           
   717                           ;main.c: 46: if((unsigned)!PORTAbits.RA1 || (unsigned)!PORTAbits.RA5){
   718  000430  A280               	btfss	3968,1,c	;volatile
   719  000432  D002               	goto	u2760
   720  000434  BA80               	btfsc	3968,5,c	;volatile
   721  000436  D007               	goto	l55
   722  000438                     u2760:
   723                           
   724                           ;main.c: 47: estadoMenu = MENU;
   725  000438  0E00               	movlw	0
   726  00043A  6E45               	movwf	_estadoMenu,c
   727  00043C  A280               	btfss	3968,1,c	;volatile
   728  00043E  D7FE               	goto	l59
   729  000440  BA80               	btfsc	3968,5,c	;volatile
   730  000442  0012               	return	
   731  000444  D7FB               	goto	l59
   732  000446                     l55:
   733                           
   734                           ;main.c: 50: }
   735                           ;main.c: 52: LATAbits.LA2 = 1;
   736  000446  8489               	bsf	3977,2,c	;volatile
   737                           
   738                           ;main.c: 53: LATAbits.LA3 = 0;
   739  000448  9689               	bcf	3977,3,c	;volatile
   740                           
   741                           ;main.c: 54: LATAbits.LA4 = 1;
   742  00044A  8889               	bsf	3977,4,c	;volatile
   743                           
   744                           ;main.c: 55: setMotores(1000, 1000);
   745  00044C  0E03               	movlw	3
   746  00044E  0100               	movlb	0	; () banked
   747  000450  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
   748  000452  0EE8               	movlw	232
   749  000454  6F60               	movwf	setMotores@speedI& (0+255),b
   750  000456  0E03               	movlw	3
   751  000458  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
   752  00045A  0EE8               	movlw	232
   753  00045C  6F62               	movwf	setMotores@speedD& (0+255),b
   754  00045E  ECB7  F002         	call	_setMotores	;wreg free
   755                           
   756                           ;main.c: 56: return;
   757  000462  0012               	return	
   758  000464                     
   759                           ;main.c: 59: if(millis() > (m + 4970U)){
   760  000464  EC38  F007         	call	_millis	;wreg free
   761  000468  0E6A               	movlw	106
   762  00046A  2440               	addwf	loop@m,w,c
   763  00046C  0100               	movlb	0	; () banked
   764  00046E  6F72               	movwf	??_loop& (0+255),b
   765  000470  0E13               	movlw	19
   766  000472  2041               	addwfc	loop@m+1,w,c
   767  000474  6F73               	movwf	(??_loop+1)& (0+255),b
   768  000476  0E00               	movlw	0
   769  000478  2042               	addwfc	loop@m+2,w,c
   770  00047A  6F74               	movwf	(??_loop+2)& (0+255),b
   771  00047C  0E00               	movlw	0
   772  00047E  2043               	addwfc	loop@m+3,w,c
   773  000480  6F75               	movwf	(??_loop+3)& (0+255),b
   774  000482  5013               	movf	?_millis,w,c
   775  000484  5D72               	subwf	??_loop& (0+255),w,b
   776  000486  5014               	movf	?_millis+1,w,c
   777  000488  5973               	subwfb	(??_loop+1)& (0+255),w,b
   778  00048A  5015               	movf	?_millis+2,w,c
   779  00048C  5974               	subwfb	(??_loop+2)& (0+255),w,b
   780  00048E  5016               	movf	?_millis+3,w,c
   781  000490  5975               	subwfb	(??_loop+3)& (0+255),w,b
   782  000492  B0D8               	btfsc	status,0,c
   783  000494  D006               	goto	l62
   784                           
   785                           ; BSR set to: 0
   786                           ;main.c: 64: estadoMenu = estrategia;
   787  000496  C04A  F045         	movff	loop@estrategia,_estadoMenu
   788                           
   789                           ;main.c: 66: LATAbits.LA2 = 0;
   790  00049A  9489               	bcf	3977,2,c	;volatile
   791                           
   792                           ;main.c: 67: LATAbits.LA3 = 0;
   793  00049C  9689               	bcf	3977,3,c	;volatile
   794                           
   795                           ;main.c: 68: LATAbits.LA4 = 1;
   796  00049E  8889               	bsf	3977,4,c	;volatile
   797                           
   798                           ;main.c: 69: return;
   799  0004A0  0012               	return	
   800  0004A2                     l62:
   801                           
   802                           ; BSR set to: 0
   803                           ;main.c: 70: }
   804                           ;main.c: 72: if((unsigned)!PORTCbits.RC7){
   805  0004A2  BE82               	btfsc	3970,7,c	;volatile
   806  0004A4  D00E               	goto	l67
   807                           
   808                           ; BSR set to: 0
   809                           ;main.c: 73: if(direccion == DER)
   810  0004A6  0E02               	movlw	2
   811  0004A8  184B               	xorwf	_direccion,w,c
   812  0004AA  A4D8               	btfss	status,2,c
   813  0004AC  D002               	goto	l64
   814                           
   815                           ; BSR set to: 0
   816                           ;main.c: 74: estrategia = E_ADELANTE;
   817  0004AE  0E05               	movlw	5
   818  0004B0  D007               	goto	L2
   819  0004B2                     l64:
   820                           
   821                           ; BSR set to: 0
   822                           ;main.c: 75: else if(direccion == IZQ)
   823                           
   824                           ; BSR set to: 0
   825  0004B2  0E05               	movlw	5
   826  0004B4  184B               	xorwf	_direccion,w,c
   827  0004B6  A4D8               	btfss	status,2,c
   828  0004B8  D002               	goto	l66
   829                           
   830                           ; BSR set to: 0
   831                           ;main.c: 76: estrategia = E_ATRAS;
   832  0004BA  0E06               	movlw	6
   833  0004BC  D001               	goto	L2
   834  0004BE                     l66:
   835                           
   836                           ; BSR set to: 0
   837                           ;main.c: 77: else
   838                           ;main.c: 78: estrategia = E_CIEGO;
   839                           
   840                           ; BSR set to: 0
   841  0004BE  0E04               	movlw	4
   842  0004C0                     L2:
   843  0004C0  6E4A               	movwf	loop@estrategia,c
   844  0004C2                     l67:
   845                           
   846                           ; BSR set to: 0
   847                           ;main.c: 79: }
   848                           ;main.c: 81: setMotores(0, 0);
   849                           
   850                           ; BSR set to: 0
   851                           
   852                           ; BSR set to: 0
   853                           
   854                           ; BSR set to: 0
   855  0004C2  0E00               	movlw	0
   856  0004C4  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
   857  0004C6  0E00               	movlw	0
   858  0004C8  6F60               	movwf	setMotores@speedI& (0+255),b
   859  0004CA  0E00               	movlw	0
   860  0004CC  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
   861  0004CE  0E00               	movlw	0
   862  0004D0  6F62               	movwf	setMotores@speedD& (0+255),b
   863  0004D2  ECB7  F002         	call	_setMotores	;wreg free
   864                           
   865                           ;main.c: 82: LATAbits.LA2 = 1;
   866  0004D6  8489               	bsf	3977,2,c	;volatile
   867                           
   868                           ;main.c: 83: LATAbits.LA3 = (unsigned)(millis() > (m + (4970U / 2)));
   869  0004D8  EC38  F007         	call	_millis	;wreg free
   870  0004DC  0EB5               	movlw	181
   871  0004DE  2440               	addwf	loop@m,w,c
   872  0004E0  0100               	movlb	0	; () banked
   873  0004E2  6F72               	movwf	??_loop& (0+255),b
   874  0004E4  0E09               	movlw	9
   875  0004E6  2041               	addwfc	loop@m+1,w,c
   876  0004E8  6F73               	movwf	(??_loop+1)& (0+255),b
   877  0004EA  0E00               	movlw	0
   878  0004EC  2042               	addwfc	loop@m+2,w,c
   879  0004EE  6F74               	movwf	(??_loop+2)& (0+255),b
   880  0004F0  0E00               	movlw	0
   881  0004F2  2043               	addwfc	loop@m+3,w,c
   882  0004F4  6F75               	movwf	(??_loop+3)& (0+255),b
   883  0004F6  5013               	movf	?_millis,w,c
   884  0004F8  5D72               	subwf	??_loop& (0+255),w,b
   885  0004FA  5014               	movf	?_millis+1,w,c
   886  0004FC  5973               	subwfb	(??_loop+1)& (0+255),w,b
   887  0004FE  5015               	movf	?_millis+2,w,c
   888  000500  5974               	subwfb	(??_loop+2)& (0+255),w,b
   889  000502  5016               	movf	?_millis+3,w,c
   890  000504  5975               	subwfb	(??_loop+3)& (0+255),w,b
   891  000506  B0D8               	btfsc	status,0,c
   892  000508  D003               	goto	u2830
   893  00050A  6B76               	clrf	(??_loop+4)& (0+255),b
   894  00050C  2B76               	incf	(??_loop+4)& (0+255),f,b
   895  00050E  D002               	goto	u2848
   896  000510                     u2830:
   897  000510  0100               	movlb	0	; () banked
   898  000512  6B76               	clrf	(??_loop+4)& (0+255),b
   899  000514                     u2848:
   900  000514  4776               	rlncf	(??_loop+4)& (0+255),f,b
   901  000516  4776               	rlncf	(??_loop+4)& (0+255),f,b
   902  000518  4776               	rlncf	(??_loop+4)& (0+255),f,b
   903  00051A  5089               	movf	3977,w,c	;volatile
   904  00051C  1976               	xorwf	(??_loop+4)& (0+255),w,b
   905  00051E  0BF7               	andlw	-9
   906  000520  1976               	xorwf	(??_loop+4)& (0+255),w,b
   907  000522  6E89               	movwf	3977,c	;volatile
   908                           
   909                           ; BSR set to: 0
   910                           ;main.c: 84: LATAbits.LA4 = 0;
   911  000524  9889               	bcf	3977,4,c	;volatile
   912                           
   913                           ; BSR set to: 0
   914                           ;main.c: 85: return;
   915  000526  0012               	return	
   916  000528                     
   917                           ;main.c: 88: estrategiaClasica();
   918                           
   919                           ; BSR set to: 0
   920  000528  EC09  F000         	call	_estrategiaClasica	;wreg free
   921                           
   922                           ;main.c: 89: return;
   923  00052C  0012               	return	
   924  00052E                     
   925                           ;main.c: 92: estrategiaCiego();
   926  00052E  ECA0  F003         	call	_estrategiaCiego	;wreg free
   927                           
   928                           ;main.c: 93: return;
   929  000532  0012               	return	
   930  000534                     
   931                           ;main.c: 96: estrategiaAdelante();
   932  000534  EC9A  F004         	call	_estrategiaAdelante	;wreg free
   933                           
   934                           ;main.c: 97: return;
   935  000538  0012               	return	
   936  00053A                     
   937                           ;main.c: 100: estrategiaAtras();
   938  00053A  EC1F  F004         	call	_estrategiaAtras	;wreg free
   939                           
   940                           ;main.c: 102: }
   941                           
   942                           ;main.c: 101: return;
   943  00053E  0012               	return	
   944  000540                     l33:
   945  000540  5045               	movf	_estadoMenu,w,c
   946                           
   947                           ; Switch size 1, requested type "time"
   948                           ; Number of cases is 7, Range of values is 0 to 6
   949                           ; switch strategies available:
   950                           ; Name         Instructions Cycles
   951                           ; simple_byte           22    12 (average)
   952                           ;	Chosen strategy is simple_byte
   953  000542  0A00               	xorlw	0	; case 0
   954  000544  B4D8               	btfsc	status,2,c
   955  000546  D705               	goto	l34
   956  000548  0A01               	xorlw	1	; case 1
   957  00054A  B4D8               	btfsc	status,2,c
   958  00054C  D771               	goto	l54
   959  00054E  0A03               	xorlw	3	; case 2
   960  000550  B4D8               	btfsc	status,2,c
   961  000552  D788               	goto	l61
   962  000554  0A01               	xorlw	1	; case 3
   963  000556  B4D8               	btfsc	status,2,c
   964  000558  D7E7               	goto	l68
   965  00055A  0A07               	xorlw	7	; case 4
   966  00055C  B4D8               	btfsc	status,2,c
   967  00055E  D7E7               	goto	l69
   968  000560  0A01               	xorlw	1	; case 5
   969  000562  B4D8               	btfsc	status,2,c
   970  000564  D7E7               	goto	l70
   971  000566  0A03               	xorlw	3	; case 6
   972  000568  A4D8               	btfss	status,2,c
   973  00056A  0012               	return	
   974  00056C  D7E6               	goto	l71
   975  00056E                     __end_of_loop:
   976                           	opt stack 0
   977                           tblptru	equ	0xFF8
   978                           tblptrh	equ	0xFF7
   979                           tblptrl	equ	0xFF6
   980                           tablat	equ	0xFF5
   981                           postinc0	equ	0xFEE
   982                           wreg	equ	0xFE8
   983                           postdec1	equ	0xFE5
   984                           fsr1l	equ	0xFE1
   985                           status	equ	0xFD8
   986                           
   987 ;; *************** function _estrategiaClasica *****************
   988 ;; Defined at:
   989 ;;		line 105 in file "main.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;		None
   992 ;; Auto vars:     Size  Location     Type
   993 ;;		None
   994 ;; Return value:  Size  Location     Type
   995 ;;                  1    wreg      void 
   996 ;; Registers used:
   997 ;;		wreg, status,2, status,0, cstack
   998 ;; Tracked objects:
   999 ;;		On entry : 0/0
  1000 ;;		On exit  : 0/0
  1001 ;;		Unchanged: 0/0
  1002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1003 ;;      Params:         0       0       0       0       0       0       0       0       0
  1004 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1005 ;;      Temps:          0       4       0       0       0       0       0       0       0
  1006 ;;      Totals:         0       4       0       0       0       0       0       0       0
  1007 ;;Total ram usage:        4 bytes
  1008 ;; Hardware stack levels used:    1
  1009 ;; Hardware stack levels required when called:    4
  1010 ;; This function calls:
  1011 ;;		_millis
  1012 ;;		_setMotores
  1013 ;; This function is called by:
  1014 ;;		_loop
  1015 ;; This function uses a non-reentrant model
  1016 ;;
  1017                           
  1018                           	psect	text2
  1019  000012                     __ptext2:
  1020                           	opt stack 0
  1021  000012                     _estrategiaClasica:
  1022                           	opt stack 25
  1023                           
  1024                           ;main.c: 106: static unsigned long m = 0;
  1025                           ;main.c: 107: static char firstTime = 1;
  1026                           ;main.c: 108: static char estado = ANALISIS;
  1027                           ;main.c: 110: if(firstTime){
  1028                           
  1029                           ;incstack = 0
  1030  000012  5049               	movf	estrategiaClasica@firstTime,w,c
  1031  000014  B4D8               	btfsc	status,2,c
  1032  000016  D179               	goto	l82
  1033                           
  1034                           ;main.c: 111: m = millis() - 1;
  1035  000018  EC38  F007         	call	_millis	;wreg free
  1036  00001C  0EFF               	movlw	255
  1037  00001E  2413               	addwf	?_millis,w,c
  1038  000020  6E3C               	movwf	estrategiaClasica@m,c
  1039  000022  0EFF               	movlw	255
  1040  000024  2014               	addwfc	?_millis+1,w,c
  1041  000026  6E3D               	movwf	estrategiaClasica@m+1,c
  1042  000028  0EFF               	movlw	255
  1043  00002A  2015               	addwfc	?_millis+2,w,c
  1044  00002C  6E3E               	movwf	estrategiaClasica@m+2,c
  1045  00002E  0EFF               	movlw	255
  1046  000030  2016               	addwfc	?_millis+3,w,c
  1047  000032  6E3F               	movwf	estrategiaClasica@m+3,c
  1048                           
  1049                           ;main.c: 112: firstTime = 0;
  1050  000034  0E00               	movlw	0
  1051  000036  6E49               	movwf	estrategiaClasica@firstTime,c
  1052                           
  1053                           ;main.c: 113: }
  1054                           ;main.c: 115: switch(estado){
  1055  000038  D168               	goto	l82
  1056  00003A                     l83:
  1057                           
  1058                           ;main.c: 117: if((unsigned)!PORTBbits.RB3 || (unsigned)!PORTCbits.RC6){
  1059  00003A  A681               	btfss	3969,3,c	;volatile
  1060  00003C  D002               	goto	u2250
  1061  00003E  BC82               	btfsc	3970,6,c	;volatile
  1062  000040  D00D               	goto	l84
  1063  000042                     u2250:
  1064                           
  1065                           ;main.c: 118: estado = ATRAS;
  1066  000042  0E0A               	movlw	10
  1067  000044  6E44               	movwf	estrategiaClasica@estado,c
  1068                           
  1069                           ;main.c: 119: m = millis();
  1070  000046  EC38  F007         	call	_millis	;wreg free
  1071  00004A  C013  F03C         	movff	?_millis,estrategiaClasica@m
  1072  00004E  C014  F03D         	movff	?_millis+1,estrategiaClasica@m+1
  1073  000052  C015  F03E         	movff	?_millis+2,estrategiaClasica@m+2
  1074  000056  C016  F03F         	movff	?_millis+3,estrategiaClasica@m+3
  1075                           
  1076                           ;main.c: 120: return;
  1077  00005A  0012               	return	
  1078  00005C                     l84:
  1079                           
  1080                           ;main.c: 121: }
  1081                           ;main.c: 123: if((unsigned)!PORTBbits.RB1){
  1082  00005C  B281               	btfsc	3969,1,c	;volatile
  1083  00005E  D017               	goto	l88
  1084                           
  1085                           ;main.c: 124: if((unsigned)!PORTBbits.RB4){
  1086  000060  B881               	btfsc	3969,4,c	;volatile
  1087  000062  D008               	goto	l89
  1088                           
  1089                           ;main.c: 125: if((unsigned)!PORTCbits.RC5){
  1090  000064  BA82               	btfsc	3970,5,c	;volatile
  1091  000066  D003               	goto	l90
  1092                           
  1093                           ;main.c: 126: estado = ATAQUE;
  1094  000068  0E01               	movlw	1
  1095  00006A  6E44               	movwf	estrategiaClasica@estado,c
  1096                           
  1097                           ;main.c: 127: return;
  1098  00006C  0012               	return	
  1099  00006E                     l90:
  1100                           
  1101                           ;main.c: 128: }
  1102                           ;main.c: 130: estado = IZQAV;
  1103  00006E  0E07               	movlw	7
  1104  000070  6E44               	movwf	estrategiaClasica@estado,c
  1105                           
  1106                           ;main.c: 131: return;
  1107  000072  0012               	return	
  1108  000074                     l89:
  1109                           
  1110                           ;main.c: 132: }
  1111                           ;main.c: 134: if((unsigned)!PORTCbits.RC5){
  1112  000074  BA82               	btfsc	3970,5,c	;volatile
  1113  000076  D008               	goto	l91
  1114                           
  1115                           ;main.c: 135: if((unsigned)!PORTBbits.RB4){
  1116  000078  B881               	btfsc	3969,4,c	;volatile
  1117  00007A  D003               	goto	l92
  1118                           
  1119                           ;main.c: 136: estado = ATAQUE;
  1120  00007C  0E01               	movlw	1
  1121  00007E  6E44               	movwf	estrategiaClasica@estado,c
  1122                           
  1123                           ;main.c: 137: return;
  1124  000080  0012               	return	
  1125  000082                     l92:
  1126                           
  1127                           ;main.c: 138: }
  1128                           ;main.c: 140: estado = DERAV;
  1129  000082  0E04               	movlw	4
  1130  000084  6E44               	movwf	estrategiaClasica@estado,c
  1131                           
  1132                           ;main.c: 141: return;
  1133  000086  0012               	return	
  1134  000088                     l91:
  1135                           
  1136                           ;main.c: 142: }
  1137                           ;main.c: 144: estado = ATAQUE;
  1138  000088  0E01               	movlw	1
  1139  00008A  6E44               	movwf	estrategiaClasica@estado,c
  1140                           
  1141                           ;main.c: 145: return;
  1142  00008C  0012               	return	
  1143  00008E                     l88:
  1144                           
  1145                           ;main.c: 146: }
  1146                           ;main.c: 148: if((unsigned)!PORTBbits.RB4){
  1147  00008E  B881               	btfsc	3969,4,c	;volatile
  1148  000090  D003               	goto	l93
  1149                           
  1150                           ;main.c: 149: estado = IZQA;
  1151  000092  0E06               	movlw	6
  1152  000094  6E44               	movwf	estrategiaClasica@estado,c
  1153                           
  1154                           ;main.c: 150: return;
  1155  000096  0012               	return	
  1156  000098                     l93:
  1157                           
  1158                           ;main.c: 151: }
  1159                           ;main.c: 153: if((unsigned)!PORTCbits.RC5){
  1160  000098  BA82               	btfsc	3970,5,c	;volatile
  1161  00009A  D003               	goto	l94
  1162                           
  1163                           ;main.c: 154: estado = DERA;
  1164  00009C  0E03               	movlw	3
  1165  00009E  6E44               	movwf	estrategiaClasica@estado,c
  1166                           
  1167                           ;main.c: 155: return;
  1168  0000A0  0012               	return	
  1169  0000A2                     l94:
  1170                           
  1171                           ;main.c: 156: }
  1172                           ;main.c: 158: if((unsigned)!PORTBbits.RB5){
  1173  0000A2  BA81               	btfsc	3969,5,c	;volatile
  1174  0000A4  D00D               	goto	l95
  1175                           
  1176                           ;main.c: 159: estado = IZQ;
  1177  0000A6  0E05               	movlw	5
  1178  0000A8  6E44               	movwf	estrategiaClasica@estado,c
  1179                           
  1180                           ;main.c: 160: m = millis();
  1181  0000AA  EC38  F007         	call	_millis	;wreg free
  1182  0000AE  C013  F03C         	movff	?_millis,estrategiaClasica@m
  1183  0000B2  C014  F03D         	movff	?_millis+1,estrategiaClasica@m+1
  1184  0000B6  C015  F03E         	movff	?_millis+2,estrategiaClasica@m+2
  1185  0000BA  C016  F03F         	movff	?_millis+3,estrategiaClasica@m+3
  1186                           
  1187                           ;main.c: 161: return;
  1188  0000BE  0012               	return	
  1189  0000C0                     l95:
  1190                           
  1191                           ;main.c: 162: }
  1192                           ;main.c: 164: if((unsigned)!PORTCbits.RC4){
  1193  0000C0  B882               	btfsc	3970,4,c	;volatile
  1194  0000C2  D00D               	goto	l96
  1195                           
  1196                           ;main.c: 165: estado = DER;
  1197  0000C4  0E02               	movlw	2
  1198  0000C6  6E44               	movwf	estrategiaClasica@estado,c
  1199                           
  1200                           ;main.c: 166: m = millis();
  1201  0000C8  EC38  F007         	call	_millis	;wreg free
  1202  0000CC  C013  F03C         	movff	?_millis,estrategiaClasica@m
  1203  0000D0  C014  F03D         	movff	?_millis+1,estrategiaClasica@m+1
  1204  0000D4  C015  F03E         	movff	?_millis+2,estrategiaClasica@m+2
  1205  0000D8  C016  F03F         	movff	?_millis+3,estrategiaClasica@m+3
  1206                           
  1207                           ;main.c: 167: return;
  1208  0000DC  0012               	return	
  1209  0000DE                     l96:
  1210                           
  1211                           ;main.c: 168: }
  1212                           ;main.c: 170: estado = direccion;
  1213  0000DE  C04B  F044         	movff	_direccion,estrategiaClasica@estado
  1214                           
  1215                           ;main.c: 171: return;
  1216  0000E2  0012               	return	
  1217  0000E4                     
  1218                           ;main.c: 174: setMotores(1000, 1000);
  1219  0000E4  0E03               	movlw	3
  1220  0000E6  0100               	movlb	0	; () banked
  1221  0000E8  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  1222  0000EA  0EE8               	movlw	232
  1223  0000EC  6F60               	movwf	setMotores@speedI& (0+255),b
  1224  0000EE  0E03               	movlw	3
  1225  0000F0  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  1226  0000F2  0EE8               	movlw	232
  1227  0000F4  6F62               	movwf	setMotores@speedD& (0+255),b
  1228  0000F6  ECB7  F002         	call	_setMotores	;wreg free
  1229                           
  1230                           ;main.c: 175: estado = ANALISIS;
  1231  0000FA  0E00               	movlw	0
  1232  0000FC  6E44               	movwf	estrategiaClasica@estado,c
  1233                           
  1234                           ;main.c: 176: return;
  1235  0000FE  0012               	return	
  1236  000100                     
  1237                           ;main.c: 179: setMotores(1000, 1000 / 2);
  1238  000100  0E03               	movlw	3
  1239  000102  0100               	movlb	0	; () banked
  1240  000104  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  1241  000106  0EE8               	movlw	232
  1242  000108  6F60               	movwf	setMotores@speedI& (0+255),b
  1243  00010A  0E01               	movlw	1
  1244  00010C  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  1245  00010E  0EF4               	movlw	244
  1246  000110  6F62               	movwf	setMotores@speedD& (0+255),b
  1247  000112  ECB7  F002         	call	_setMotores	;wreg free
  1248                           
  1249                           ;main.c: 180: direccion = DER;
  1250  000116  0E02               	movlw	2
  1251  000118  6E4B               	movwf	_direccion,c
  1252                           
  1253                           ;main.c: 181: m = millis();
  1254  00011A  EC38  F007         	call	_millis	;wreg free
  1255  00011E  C013  F03C         	movff	?_millis,estrategiaClasica@m
  1256  000122  C014  F03D         	movff	?_millis+1,estrategiaClasica@m+1
  1257  000126  C015  F03E         	movff	?_millis+2,estrategiaClasica@m+2
  1258  00012A  C016  F03F         	movff	?_millis+3,estrategiaClasica@m+3
  1259                           
  1260                           ;main.c: 182: estado = ANALISIS;
  1261  00012E  0E00               	movlw	0
  1262  000130  6E44               	movwf	estrategiaClasica@estado,c
  1263                           
  1264                           ;main.c: 183: return;
  1265  000132  0012               	return	
  1266  000134                     
  1267                           ;main.c: 186: setMotores(1000 / 2, 1000);
  1268  000134  0E01               	movlw	1
  1269  000136  0100               	movlb	0	; () banked
  1270  000138  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  1271  00013A  0EF4               	movlw	244
  1272  00013C  6F60               	movwf	setMotores@speedI& (0+255),b
  1273  00013E  0E03               	movlw	3
  1274  000140  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  1275  000142  0EE8               	movlw	232
  1276  000144  6F62               	movwf	setMotores@speedD& (0+255),b
  1277  000146  ECB7  F002         	call	_setMotores	;wreg free
  1278                           
  1279                           ;main.c: 187: direccion = IZQ;
  1280  00014A  0E05               	movlw	5
  1281  00014C  6E4B               	movwf	_direccion,c
  1282                           
  1283                           ;main.c: 188: m = millis();
  1284  00014E  EC38  F007         	call	_millis	;wreg free
  1285  000152  C013  F03C         	movff	?_millis,estrategiaClasica@m
  1286  000156  C014  F03D         	movff	?_millis+1,estrategiaClasica@m+1
  1287  00015A  C015  F03E         	movff	?_millis+2,estrategiaClasica@m+2
  1288  00015E  C016  F03F         	movff	?_millis+3,estrategiaClasica@m+3
  1289                           
  1290                           ;main.c: 189: estado = ANALISIS;
  1291  000162  0E00               	movlw	0
  1292  000164  6E44               	movwf	estrategiaClasica@estado,c
  1293                           
  1294                           ;main.c: 190: return;
  1295  000166  0012               	return	
  1296  000168                     
  1297                           ;main.c: 193: if(millis() > (m + 300U)){
  1298  000168  EC38  F007         	call	_millis	;wreg free
  1299  00016C  0E2C               	movlw	44
  1300  00016E  243C               	addwf	estrategiaClasica@m,w,c
  1301  000170  0100               	movlb	0	; () banked
  1302  000172  6F6E               	movwf	??_estrategiaClasica& (0+255),b
  1303  000174  0E01               	movlw	1
  1304  000176  203D               	addwfc	estrategiaClasica@m+1,w,c
  1305  000178  6F6F               	movwf	(??_estrategiaClasica+1)& (0+255),b
  1306  00017A  0E00               	movlw	0
  1307  00017C  203E               	addwfc	estrategiaClasica@m+2,w,c
  1308  00017E  6F70               	movwf	(??_estrategiaClasica+2)& (0+255),b
  1309  000180  0E00               	movlw	0
  1310  000182  203F               	addwfc	estrategiaClasica@m+3,w,c
  1311  000184  6F71               	movwf	(??_estrategiaClasica+3)& (0+255),b
  1312  000186  5013               	movf	?_millis,w,c
  1313  000188  5D6E               	subwf	??_estrategiaClasica& (0+255),w,b
  1314  00018A  5014               	movf	?_millis+1,w,c
  1315  00018C  596F               	subwfb	(??_estrategiaClasica+1)& (0+255),w,b
  1316  00018E  5015               	movf	?_millis+2,w,c
  1317  000190  5970               	subwfb	(??_estrategiaClasica+2)& (0+255),w,b
  1318  000192  5016               	movf	?_millis+3,w,c
  1319  000194  5971               	subwfb	(??_estrategiaClasica+3)& (0+255),w,b
  1320  000196  B0D8               	btfsc	status,0,c
  1321  000198  D003               	goto	l101
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;main.c: 194: estado = ANALISIS;
  1325  00019A  0E00               	movlw	0
  1326  00019C  6E44               	movwf	estrategiaClasica@estado,c
  1327                           
  1328                           ; BSR set to: 0
  1329                           ;main.c: 195: return;
  1330  00019E  0012               	return	
  1331  0001A0                     l101:
  1332                           
  1333                           ; BSR set to: 0
  1334                           ;main.c: 196: }
  1335                           ;main.c: 198: setMotores(-1000, -1000);
  1336                           
  1337                           ; BSR set to: 0
  1338  0001A0  0EFC               	movlw	252
  1339  0001A2  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  1340  0001A4  0E18               	movlw	24
  1341  0001A6  6F60               	movwf	setMotores@speedI& (0+255),b
  1342  0001A8  0EFC               	movlw	252
  1343  0001AA  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  1344  0001AC  0E18               	movlw	24
  1345  0001AE  6F62               	movwf	setMotores@speedD& (0+255),b
  1346  0001B0  ECB7  F002         	call	_setMotores	;wreg free
  1347                           
  1348                           ;main.c: 199: return;
  1349  0001B4  0012               	return	
  1350  0001B6                     
  1351                           ;main.c: 202: setMotores(0, 1000);
  1352  0001B6  0E00               	movlw	0
  1353  0001B8  0100               	movlb	0	; () banked
  1354  0001BA  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  1355  0001BC  0E00               	movlw	0
  1356  0001BE  6F60               	movwf	setMotores@speedI& (0+255),b
  1357  0001C0  0E03               	movlw	3
  1358  0001C2  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  1359  0001C4  0EE8               	movlw	232
  1360  0001C6  6F62               	movwf	setMotores@speedD& (0+255),b
  1361  0001C8  ECB7  F002         	call	_setMotores	;wreg free
  1362                           
  1363                           ;main.c: 203: direccion = IZQ;
  1364  0001CC  0E05               	movlw	5
  1365  0001CE  6E4B               	movwf	_direccion,c
  1366                           
  1367                           ;main.c: 204: m = millis();
  1368  0001D0  EC38  F007         	call	_millis	;wreg free
  1369  0001D4  C013  F03C         	movff	?_millis,estrategiaClasica@m
  1370  0001D8  C014  F03D         	movff	?_millis+1,estrategiaClasica@m+1
  1371  0001DC  C015  F03E         	movff	?_millis+2,estrategiaClasica@m+2
  1372  0001E0  C016  F03F         	movff	?_millis+3,estrategiaClasica@m+3
  1373                           
  1374                           ;main.c: 205: estado = ANALISIS;
  1375  0001E4  0E00               	movlw	0
  1376  0001E6  6E44               	movwf	estrategiaClasica@estado,c
  1377                           
  1378                           ;main.c: 206: return;
  1379  0001E8  0012               	return	
  1380  0001EA                     
  1381                           ;main.c: 209: setMotores(1000, 0);
  1382  0001EA  0E03               	movlw	3
  1383  0001EC  0100               	movlb	0	; () banked
  1384  0001EE  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  1385  0001F0  0EE8               	movlw	232
  1386  0001F2  6F60               	movwf	setMotores@speedI& (0+255),b
  1387  0001F4  0E00               	movlw	0
  1388  0001F6  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  1389  0001F8  0E00               	movlw	0
  1390  0001FA  6F62               	movwf	setMotores@speedD& (0+255),b
  1391  0001FC  ECB7  F002         	call	_setMotores	;wreg free
  1392                           
  1393                           ;main.c: 210: direccion = DER;
  1394  000200  0E02               	movlw	2
  1395  000202  6E4B               	movwf	_direccion,c
  1396                           
  1397                           ;main.c: 211: m = millis();
  1398  000204  EC38  F007         	call	_millis	;wreg free
  1399  000208  C013  F03C         	movff	?_millis,estrategiaClasica@m
  1400  00020C  C014  F03D         	movff	?_millis+1,estrategiaClasica@m+1
  1401  000210  C015  F03E         	movff	?_millis+2,estrategiaClasica@m+2
  1402  000214  C016  F03F         	movff	?_millis+3,estrategiaClasica@m+3
  1403                           
  1404                           ;main.c: 212: estado = ANALISIS;
  1405  000218  0E00               	movlw	0
  1406  00021A  6E44               	movwf	estrategiaClasica@estado,c
  1407                           
  1408                           ;main.c: 213: return;
  1409  00021C  0012               	return	
  1410  00021E                     
  1411                           ;main.c: 216: if(millis() > (m + 500U)){
  1412  00021E  EC38  F007         	call	_millis	;wreg free
  1413  000222  0EF4               	movlw	244
  1414  000224  243C               	addwf	estrategiaClasica@m,w,c
  1415  000226  0100               	movlb	0	; () banked
  1416  000228  6F6E               	movwf	??_estrategiaClasica& (0+255),b
  1417  00022A  0E01               	movlw	1
  1418  00022C  203D               	addwfc	estrategiaClasica@m+1,w,c
  1419  00022E  6F6F               	movwf	(??_estrategiaClasica+1)& (0+255),b
  1420  000230  0E00               	movlw	0
  1421  000232  203E               	addwfc	estrategiaClasica@m+2,w,c
  1422  000234  6F70               	movwf	(??_estrategiaClasica+2)& (0+255),b
  1423  000236  0E00               	movlw	0
  1424  000238  203F               	addwfc	estrategiaClasica@m+3,w,c
  1425  00023A  6F71               	movwf	(??_estrategiaClasica+3)& (0+255),b
  1426  00023C  5013               	movf	?_millis,w,c
  1427  00023E  5D6E               	subwf	??_estrategiaClasica& (0+255),w,b
  1428  000240  5014               	movf	?_millis+1,w,c
  1429  000242  596F               	subwfb	(??_estrategiaClasica+1)& (0+255),w,b
  1430  000244  5015               	movf	?_millis+2,w,c
  1431  000246  5970               	subwfb	(??_estrategiaClasica+2)& (0+255),w,b
  1432  000248  5016               	movf	?_millis+3,w,c
  1433  00024A  5971               	subwfb	(??_estrategiaClasica+3)& (0+255),w,b
  1434  00024C  B0D8               	btfsc	status,0,c
  1435  00024E  D005               	goto	l105
  1436                           
  1437                           ; BSR set to: 0
  1438                           ;main.c: 217: direccion = BUSCA_IZQ;
  1439  000250  0E09               	movlw	9
  1440  000252  6E4B               	movwf	_direccion,c
  1441                           
  1442                           ;main.c: 218: estado = ANALISIS;
  1443  000254  0E00               	movlw	0
  1444  000256  6E44               	movwf	estrategiaClasica@estado,c
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;main.c: 219: return;
  1448  000258  0012               	return	
  1449  00025A                     l105:
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;main.c: 220: }
  1453                           ;main.c: 222: setMotores(-1000, 1000);
  1454                           
  1455                           ; BSR set to: 0
  1456  00025A  0EFC               	movlw	252
  1457  00025C  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  1458  00025E  0E18               	movlw	24
  1459  000260  6F60               	movwf	setMotores@speedI& (0+255),b
  1460  000262  0E03               	movlw	3
  1461  000264  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  1462  000266  0EE8               	movlw	232
  1463  000268  6F62               	movwf	setMotores@speedD& (0+255),b
  1464  00026A  ECB7  F002         	call	_setMotores	;wreg free
  1465                           
  1466                           ;main.c: 223: direccion = IZQ;
  1467  00026E  0E05               	movlw	5
  1468  000270  6E4B               	movwf	_direccion,c
  1469                           
  1470                           ;main.c: 224: estado = ANALISIS;
  1471  000272  0E00               	movlw	0
  1472  000274  6E44               	movwf	estrategiaClasica@estado,c
  1473                           
  1474                           ;main.c: 225: return;
  1475  000276  0012               	return	
  1476  000278                     
  1477                           ;main.c: 228: if(millis() > (m + 500U)){
  1478  000278  EC38  F007         	call	_millis	;wreg free
  1479  00027C  0EF4               	movlw	244
  1480  00027E  243C               	addwf	estrategiaClasica@m,w,c
  1481  000280  0100               	movlb	0	; () banked
  1482  000282  6F6E               	movwf	??_estrategiaClasica& (0+255),b
  1483  000284  0E01               	movlw	1
  1484  000286  203D               	addwfc	estrategiaClasica@m+1,w,c
  1485  000288  6F6F               	movwf	(??_estrategiaClasica+1)& (0+255),b
  1486  00028A  0E00               	movlw	0
  1487  00028C  203E               	addwfc	estrategiaClasica@m+2,w,c
  1488  00028E  6F70               	movwf	(??_estrategiaClasica+2)& (0+255),b
  1489  000290  0E00               	movlw	0
  1490  000292  203F               	addwfc	estrategiaClasica@m+3,w,c
  1491  000294  6F71               	movwf	(??_estrategiaClasica+3)& (0+255),b
  1492  000296  5013               	movf	?_millis,w,c
  1493  000298  5D6E               	subwf	??_estrategiaClasica& (0+255),w,b
  1494  00029A  5014               	movf	?_millis+1,w,c
  1495  00029C  596F               	subwfb	(??_estrategiaClasica+1)& (0+255),w,b
  1496  00029E  5015               	movf	?_millis+2,w,c
  1497  0002A0  5970               	subwfb	(??_estrategiaClasica+2)& (0+255),w,b
  1498  0002A2  5016               	movf	?_millis+3,w,c
  1499  0002A4  5971               	subwfb	(??_estrategiaClasica+3)& (0+255),w,b
  1500  0002A6  B0D8               	btfsc	status,0,c
  1501  0002A8  D005               	goto	l107
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;main.c: 229: direccion = BUSCA_DER;
  1505  0002AA  0E08               	movlw	8
  1506  0002AC  6E4B               	movwf	_direccion,c
  1507                           
  1508                           ;main.c: 230: estado = ANALISIS;
  1509  0002AE  0E00               	movlw	0
  1510  0002B0  6E44               	movwf	estrategiaClasica@estado,c
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;main.c: 231: return;
  1514  0002B2  0012               	return	
  1515  0002B4                     l107:
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;main.c: 232: }
  1519                           ;main.c: 234: setMotores(1000, -1000);
  1520                           
  1521                           ; BSR set to: 0
  1522  0002B4  0E03               	movlw	3
  1523  0002B6  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  1524  0002B8  0EE8               	movlw	232
  1525  0002BA  6F60               	movwf	setMotores@speedI& (0+255),b
  1526  0002BC  0EFC               	movlw	252
  1527  0002BE  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  1528  0002C0  0E18               	movlw	24
  1529  0002C2  6F62               	movwf	setMotores@speedD& (0+255),b
  1530  0002C4  ECB7  F002         	call	_setMotores	;wreg free
  1531                           
  1532                           ;main.c: 235: direccion = DER;
  1533  0002C8  0E02               	movlw	2
  1534  0002CA  6E4B               	movwf	_direccion,c
  1535                           
  1536                           ;main.c: 236: estado = ANALISIS;
  1537  0002CC  0E00               	movlw	0
  1538  0002CE  6E44               	movwf	estrategiaClasica@estado,c
  1539                           
  1540                           ;main.c: 237: return;
  1541  0002D0  0012               	return	
  1542  0002D2                     
  1543                           ;main.c: 240: setMotores(700, -700);
  1544  0002D2  0E02               	movlw	2
  1545  0002D4  0100               	movlb	0	; () banked
  1546  0002D6  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  1547  0002D8  0EBC               	movlw	188
  1548  0002DA  6F60               	movwf	setMotores@speedI& (0+255),b
  1549  0002DC  0EFD               	movlw	253
  1550  0002DE  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  1551  0002E0  0E44               	movlw	68
  1552  0002E2  6F62               	movwf	setMotores@speedD& (0+255),b
  1553  0002E4  ECB7  F002         	call	_setMotores	;wreg free
  1554                           
  1555                           ;main.c: 241: estado = ANALISIS;
  1556  0002E8  0E00               	movlw	0
  1557  0002EA  6E44               	movwf	estrategiaClasica@estado,c
  1558                           
  1559                           ;main.c: 242: return;
  1560  0002EC  0012               	return	
  1561  0002EE                     
  1562                           ;main.c: 245: setMotores(-700, 700);
  1563  0002EE  0EFD               	movlw	253
  1564  0002F0  0100               	movlb	0	; () banked
  1565  0002F2  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  1566  0002F4  0E44               	movlw	68
  1567  0002F6  6F60               	movwf	setMotores@speedI& (0+255),b
  1568  0002F8  0E02               	movlw	2
  1569  0002FA  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  1570  0002FC  0EBC               	movlw	188
  1571  0002FE  6F62               	movwf	setMotores@speedD& (0+255),b
  1572  000300  ECB7  F002         	call	_setMotores	;wreg free
  1573                           
  1574                           ;main.c: 246: estado = ANALISIS;
  1575  000304  0E00               	movlw	0
  1576  000306  6E44               	movwf	estrategiaClasica@estado,c
  1577                           
  1578                           ;main.c: 248: }
  1579                           
  1580                           ;main.c: 247: return;
  1581  000308  0012               	return	
  1582  00030A                     l82:
  1583  00030A  5044               	movf	estrategiaClasica@estado,w,c
  1584                           
  1585                           ; Switch size 1, requested type "space"
  1586                           ; Number of cases is 11, Range of values is 0 to 10
  1587                           ; switch strategies available:
  1588                           ; Name         Instructions Cycles
  1589                           ; simple_byte           34    18 (average)
  1590                           ;	Chosen strategy is simple_byte
  1591  00030C  0A00               	xorlw	0	; case 0
  1592  00030E  B4D8               	btfsc	status,2,c
  1593  000310  D694               	goto	l83
  1594  000312  0A01               	xorlw	1	; case 1
  1595  000314  B4D8               	btfsc	status,2,c
  1596  000316  D6E6               	goto	l97
  1597  000318  0A03               	xorlw	3	; case 2
  1598  00031A  B4D8               	btfsc	status,2,c
  1599  00031C  D7AD               	goto	l106
  1600  00031E  0A01               	xorlw	1	; case 3
  1601  000320  B4D8               	btfsc	status,2,c
  1602  000322  D763               	goto	l103
  1603  000324  0A07               	xorlw	7	; case 4
  1604  000326  B4D8               	btfsc	status,2,c
  1605  000328  D6EB               	goto	l98
  1606  00032A  0A01               	xorlw	1	; case 5
  1607  00032C  B4D8               	btfsc	status,2,c
  1608  00032E  D777               	goto	l104
  1609  000330  0A03               	xorlw	3	; case 6
  1610  000332  B4D8               	btfsc	status,2,c
  1611  000334  D740               	goto	l102
  1612  000336  0A01               	xorlw	1	; case 7
  1613  000338  B4D8               	btfsc	status,2,c
  1614  00033A  D6FC               	goto	l99
  1615  00033C  0A0F               	xorlw	15	; case 8
  1616  00033E  B4D8               	btfsc	status,2,c
  1617  000340  D7C8               	goto	l108
  1618  000342  0A01               	xorlw	1	; case 9
  1619  000344  B4D8               	btfsc	status,2,c
  1620  000346  D7D3               	goto	l109
  1621  000348  0A03               	xorlw	3	; case 10
  1622  00034A  A4D8               	btfss	status,2,c
  1623  00034C  0012               	return	
  1624  00034E  D70C               	goto	l100
  1625  000350                     __end_of_estrategiaClasica:
  1626                           	opt stack 0
  1627                           tblptru	equ	0xFF8
  1628                           tblptrh	equ	0xFF7
  1629                           tblptrl	equ	0xFF6
  1630                           tablat	equ	0xFF5
  1631                           postinc0	equ	0xFEE
  1632                           wreg	equ	0xFE8
  1633                           postdec1	equ	0xFE5
  1634                           fsr1l	equ	0xFE1
  1635                           status	equ	0xFD8
  1636                           
  1637 ;; *************** function _estrategiaCiego *****************
  1638 ;; Defined at:
  1639 ;;		line 251 in file "main.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;		None
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;		None
  1644 ;; Return value:  Size  Location     Type
  1645 ;;                  1    wreg      void 
  1646 ;; Registers used:
  1647 ;;		wreg, status,2, status,0, cstack
  1648 ;; Tracked objects:
  1649 ;;		On entry : 0/0
  1650 ;;		On exit  : 0/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1653 ;;      Params:         0       0       0       0       0       0       0       0       0
  1654 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1655 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1656 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1657 ;;Total ram usage:        0 bytes
  1658 ;; Hardware stack levels used:    1
  1659 ;; Hardware stack levels required when called:    4
  1660 ;; This function calls:
  1661 ;;		_millis
  1662 ;;		_setMotores
  1663 ;; This function is called by:
  1664 ;;		_loop
  1665 ;; This function uses a non-reentrant model
  1666 ;;
  1667                           
  1668                           	psect	text3
  1669  000740                     __ptext3:
  1670                           	opt stack 0
  1671  000740                     _estrategiaCiego:
  1672                           	opt stack 25
  1673                           
  1674                           ;main.c: 252: static unsigned long m = 0;
  1675                           ;main.c: 253: static char estado = AVANZAR;
  1676                           ;main.c: 255: switch(estado){
  1677                           
  1678                           ;incstack = 0
  1679  000740  D073               	goto	l117
  1680  000742                     l118:
  1681                           
  1682                           ;main.c: 257: if(!(unsigned)!PORTBbits.RB3 && !(unsigned)!PORTCbits.RC6) return;
  1683  000742  A681               	btfss	3969,3,c	;volatile
  1684  000744  D002               	goto	l119
  1685  000746  BC82               	btfsc	3970,6,c	;volatile
  1686  000748  0012               	return	
  1687  00074A                     l119:
  1688                           
  1689                           ;main.c: 258: estado = ATRAS;
  1690  00074A  0E0A               	movlw	10
  1691  00074C  6E48               	movwf	estrategiaCiego@estado,c
  1692                           
  1693                           ;main.c: 259: m = millis() + 300U;
  1694  00074E  EC38  F007         	call	_millis	;wreg free
  1695  000752  0E2C               	movlw	44
  1696  000754  2413               	addwf	?_millis,w,c
  1697  000756  0100               	movlb	0	; () banked
  1698  000758  6F85               	movwf	estrategiaCiego@m& (0+255),b
  1699  00075A  0E01               	movlw	1
  1700  00075C  2014               	addwfc	?_millis+1,w,c
  1701  00075E  6F86               	movwf	(estrategiaCiego@m+1)& (0+255),b
  1702  000760  0E00               	movlw	0
  1703  000762  2015               	addwfc	?_millis+2,w,c
  1704  000764  6F87               	movwf	(estrategiaCiego@m+2)& (0+255),b
  1705  000766  0E00               	movlw	0
  1706  000768  2016               	addwfc	?_millis+3,w,c
  1707  00076A  6F88               	movwf	(estrategiaCiego@m+3)& (0+255),b
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;main.c: 260: setMotores(-1000, -1000);
  1711  00076C  0EFC               	movlw	252
  1712  00076E  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  1713  000770  0E18               	movlw	24
  1714  000772  6F60               	movwf	setMotores@speedI& (0+255),b
  1715  000774  0EFC               	movlw	252
  1716  000776  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  1717  000778  0E18               	movlw	24
  1718  00077A  6F62               	movwf	setMotores@speedD& (0+255),b
  1719  00077C  ECB7  F002         	call	_setMotores	;wreg free
  1720                           
  1721                           ;main.c: 261: return;
  1722  000780  0012               	return	
  1723  000782                     
  1724                           ;main.c: 264: if(millis() < m) return;
  1725  000782  EC38  F007         	call	_millis	;wreg free
  1726  000786  0100               	movlb	0	; () banked
  1727  000788  5185               	movf	estrategiaCiego@m& (0+255),w,b
  1728  00078A  5C13               	subwf	?_millis,w,c
  1729  00078C  5186               	movf	(estrategiaCiego@m+1)& (0+255),w,b
  1730  00078E  5814               	subwfb	?_millis+1,w,c
  1731  000790  5187               	movf	(estrategiaCiego@m+2)& (0+255),w,b
  1732  000792  5815               	subwfb	?_millis+2,w,c
  1733  000794  5188               	movf	(estrategiaCiego@m+3)& (0+255),w,b
  1734  000796  5816               	subwfb	?_millis+3,w,c
  1735  000798  A0D8               	btfss	status,0,c
  1736  00079A  0012               	return	
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;main.c: 265: if(direccion == DER) setMotores(1000, -1000);
  1740                           
  1741                           ; BSR set to: 0
  1742                           
  1743                           ; BSR set to: 0
  1744  00079C  0E02               	movlw	2
  1745  00079E  184B               	xorwf	_direccion,w,c
  1746  0007A0  A4D8               	btfss	status,2,c
  1747  0007A2  D00B               	goto	l123
  1748                           
  1749                           ; BSR set to: 0
  1750  0007A4  0E03               	movlw	3
  1751  0007A6  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  1752  0007A8  0EE8               	movlw	232
  1753  0007AA  6F60               	movwf	setMotores@speedI& (0+255),b
  1754  0007AC  0EFC               	movlw	252
  1755  0007AE  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  1756  0007B0  0E18               	movlw	24
  1757  0007B2  6F62               	movwf	setMotores@speedD& (0+255),b
  1758  0007B4  ECB7  F002         	call	_setMotores	;wreg free
  1759  0007B8  D00B               	goto	l124
  1760  0007BA                     l123:
  1761                           
  1762                           ;main.c: 266: else setMotores(-1000, 1000);
  1763  0007BA  0EFC               	movlw	252
  1764  0007BC  0100               	movlb	0	; () banked
  1765  0007BE  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  1766  0007C0  0E18               	movlw	24
  1767  0007C2  6F60               	movwf	setMotores@speedI& (0+255),b
  1768  0007C4  0E03               	movlw	3
  1769  0007C6  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  1770  0007C8  0EE8               	movlw	232
  1771  0007CA  6F62               	movwf	setMotores@speedD& (0+255),b
  1772  0007CC  ECB7  F002         	call	_setMotores	;wreg free
  1773  0007D0                     l124:
  1774                           
  1775                           ;main.c: 267: estado = GIRO;
  1776  0007D0  0E0E               	movlw	14
  1777  0007D2  6E48               	movwf	estrategiaCiego@estado,c
  1778                           
  1779                           ;main.c: 268: m = millis() + 500U;
  1780  0007D4  EC38  F007         	call	_millis	;wreg free
  1781  0007D8  0EF4               	movlw	244
  1782  0007DA  2413               	addwf	?_millis,w,c
  1783  0007DC  0100               	movlb	0	; () banked
  1784  0007DE  6F85               	movwf	estrategiaCiego@m& (0+255),b
  1785  0007E0  0E01               	movlw	1
  1786  0007E2  2014               	addwfc	?_millis+1,w,c
  1787  0007E4  6F86               	movwf	(estrategiaCiego@m+1)& (0+255),b
  1788  0007E6  0E00               	movlw	0
  1789  0007E8  2015               	addwfc	?_millis+2,w,c
  1790  0007EA  6F87               	movwf	(estrategiaCiego@m+2)& (0+255),b
  1791  0007EC  0E00               	movlw	0
  1792  0007EE  2016               	addwfc	?_millis+3,w,c
  1793  0007F0  6F88               	movwf	(estrategiaCiego@m+3)& (0+255),b
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;main.c: 269: return;
  1797  0007F2  0012               	return	
  1798  0007F4                     
  1799                           ;main.c: 272: if(millis() < m) return;
  1800                           
  1801                           ; BSR set to: 0
  1802  0007F4  EC38  F007         	call	_millis	;wreg free
  1803  0007F8  0100               	movlb	0	; () banked
  1804  0007FA  5185               	movf	estrategiaCiego@m& (0+255),w,b
  1805  0007FC  5C13               	subwf	?_millis,w,c
  1806  0007FE  5186               	movf	(estrategiaCiego@m+1)& (0+255),w,b
  1807  000800  5814               	subwfb	?_millis+1,w,c
  1808  000802  5187               	movf	(estrategiaCiego@m+2)& (0+255),w,b
  1809  000804  5815               	subwfb	?_millis+2,w,c
  1810  000806  5188               	movf	(estrategiaCiego@m+3)& (0+255),w,b
  1811  000808  5816               	subwfb	?_millis+3,w,c
  1812  00080A  A0D8               	btfss	status,0,c
  1813  00080C  0012               	return	
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;main.c: 273: estado = AVANZAR;
  1817                           
  1818                           ; BSR set to: 0
  1819                           
  1820                           ; BSR set to: 0
  1821  00080E  0E0C               	movlw	12
  1822  000810  6E48               	movwf	estrategiaCiego@estado,c
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;main.c: 274: setMotores(1000, 1000);
  1826  000812  0E03               	movlw	3
  1827  000814  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  1828  000816  0EE8               	movlw	232
  1829  000818  6F60               	movwf	setMotores@speedI& (0+255),b
  1830  00081A  0E03               	movlw	3
  1831  00081C  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  1832  00081E  0EE8               	movlw	232
  1833  000820  6F62               	movwf	setMotores@speedD& (0+255),b
  1834  000822  ECB7  F002         	call	_setMotores	;wreg free
  1835                           
  1836                           ;main.c: 276: }
  1837                           
  1838                           ;main.c: 275: return;
  1839  000826  0012               	return	
  1840  000828                     l117:
  1841  000828  5048               	movf	estrategiaCiego@estado,w,c
  1842                           
  1843                           ; Switch size 1, requested type "space"
  1844                           ; Number of cases is 3, Range of values is 10 to 14
  1845                           ; switch strategies available:
  1846                           ; Name         Instructions Cycles
  1847                           ; simple_byte           10     6 (average)
  1848                           ;	Chosen strategy is simple_byte
  1849  00082A  0A0A               	xorlw	10	; case 10
  1850  00082C  B4D8               	btfsc	status,2,c
  1851  00082E  D7A9               	goto	l121
  1852  000830  0A06               	xorlw	6	; case 12
  1853  000832  B4D8               	btfsc	status,2,c
  1854  000834  D786               	goto	l118
  1855  000836  0A02               	xorlw	2	; case 14
  1856  000838  A4D8               	btfss	status,2,c
  1857  00083A  0012               	return	
  1858  00083C  D7DB               	goto	l125
  1859  00083E                     __end_of_estrategiaCiego:
  1860                           	opt stack 0
  1861                           tblptru	equ	0xFF8
  1862                           tblptrh	equ	0xFF7
  1863                           tblptrl	equ	0xFF6
  1864                           tablat	equ	0xFF5
  1865                           postinc0	equ	0xFEE
  1866                           wreg	equ	0xFE8
  1867                           postdec1	equ	0xFE5
  1868                           fsr1l	equ	0xFE1
  1869                           status	equ	0xFD8
  1870                           
  1871 ;; *************** function _estrategiaAtras *****************
  1872 ;; Defined at:
  1873 ;;		line 312 in file "main.c"
  1874 ;; Parameters:    Size  Location     Type
  1875 ;;		None
  1876 ;; Auto vars:     Size  Location     Type
  1877 ;;		None
  1878 ;; Return value:  Size  Location     Type
  1879 ;;                  1    wreg      void 
  1880 ;; Registers used:
  1881 ;;		wreg, status,2, status,0, cstack
  1882 ;; Tracked objects:
  1883 ;;		On entry : 0/0
  1884 ;;		On exit  : 0/0
  1885 ;;		Unchanged: 0/0
  1886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1887 ;;      Params:         0       0       0       0       0       0       0       0       0
  1888 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1889 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1890 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1891 ;;Total ram usage:        0 bytes
  1892 ;; Hardware stack levels used:    1
  1893 ;; Hardware stack levels required when called:    4
  1894 ;; This function calls:
  1895 ;;		_millis
  1896 ;;		_setMotores
  1897 ;; This function is called by:
  1898 ;;		_loop
  1899 ;; This function uses a non-reentrant model
  1900 ;;
  1901                           
  1902                           	psect	text4
  1903  00083E                     __ptext4:
  1904                           	opt stack 0
  1905  00083E                     _estrategiaAtras:
  1906                           	opt stack 25
  1907                           
  1908                           ;main.c: 313: static unsigned long m = 0;
  1909                           ;main.c: 314: static char estado = POSICIONAR;
  1910                           ;main.c: 316: if((unsigned)!PORTBbits.RB5 || (unsigned)!PORTBbits.RB4 || (unsigned)!PORT
      +                          Bbits.RB1 || (unsigned)!PORTCbits.RC5 || (unsigned)!PORTCbits.RC4 || (unsigned)!PORTBbit
      +                          s.RB3 || (unsigned)!PORTCbits.RC6){
  1911                           
  1912                           ;incstack = 0
  1913  00083E  BA81               	btfsc	3969,5,c	;volatile
  1914  000840  A881               	btfss	3969,4,c	;volatile
  1915  000842  D008               	goto	u2570
  1916  000844  B281               	btfsc	3969,1,c	;volatile
  1917  000846  AA82               	btfss	3970,5,c	;volatile
  1918  000848  D005               	goto	u2570
  1919  00084A  B882               	btfsc	3970,4,c	;volatile
  1920  00084C  A681               	btfss	3969,3,c	;volatile
  1921  00084E  D002               	goto	u2570
  1922  000850  BC82               	btfsc	3970,6,c	;volatile
  1923  000852  D003               	goto	l150
  1924  000854                     u2570:
  1925                           
  1926                           ;main.c: 317: estadoMenu = E_CLASICA;
  1927  000854  0E03               	movlw	3
  1928  000856  6E45               	movwf	_estadoMenu,c
  1929                           
  1930                           ;main.c: 318: return;
  1931  000858  0012               	return	
  1932  00085A                     l150:
  1933                           
  1934                           ;main.c: 319: }
  1935                           ;main.c: 321: if(millis() < m)
  1936  00085A  EC38  F007         	call	_millis	;wreg free
  1937  00085E  0100               	movlb	0	; () banked
  1938  000860  517D               	movf	estrategiaAtras@m& (0+255),w,b
  1939  000862  5C13               	subwf	?_millis,w,c
  1940  000864  517E               	movf	(estrategiaAtras@m+1)& (0+255),w,b
  1941  000866  5814               	subwfb	?_millis+1,w,c
  1942  000868  517F               	movf	(estrategiaAtras@m+2)& (0+255),w,b
  1943  00086A  5815               	subwfb	?_millis+2,w,c
  1944  00086C  5180               	movf	(estrategiaAtras@m+3)& (0+255),w,b
  1945  00086E  5816               	subwfb	?_millis+3,w,c
  1946  000870  A0D8               	btfss	status,0,c
  1947  000872  0012               	return	
  1948  000874  D054               	goto	l155
  1949  000876                     
  1950                           ; BSR set to: 0
  1951                           ;main.c: 326: setMotores(0, -1000);
  1952                           
  1953                           ; BSR set to: 0
  1954  000876  0E00               	movlw	0
  1955  000878  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  1956  00087A  0E00               	movlw	0
  1957  00087C  6F60               	movwf	setMotores@speedI& (0+255),b
  1958  00087E  0EFC               	movlw	252
  1959  000880  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  1960  000882  0E18               	movlw	24
  1961  000884  6F62               	movwf	setMotores@speedD& (0+255),b
  1962  000886  ECB7  F002         	call	_setMotores	;wreg free
  1963                           
  1964                           ;main.c: 327: m = millis() + 800U;
  1965  00088A  EC38  F007         	call	_millis	;wreg free
  1966  00088E  0E20               	movlw	32
  1967  000890  2413               	addwf	?_millis,w,c
  1968  000892  0100               	movlb	0	; () banked
  1969  000894  6F7D               	movwf	estrategiaAtras@m& (0+255),b
  1970  000896  0E03               	movlw	3
  1971  000898  2014               	addwfc	?_millis+1,w,c
  1972  00089A  6F7E               	movwf	(estrategiaAtras@m+1)& (0+255),b
  1973  00089C  0E00               	movlw	0
  1974  00089E  2015               	addwfc	?_millis+2,w,c
  1975  0008A0  6F7F               	movwf	(estrategiaAtras@m+2)& (0+255),b
  1976  0008A2  0E00               	movlw	0
  1977  0008A4  2016               	addwfc	?_millis+3,w,c
  1978  0008A6  6F80               	movwf	(estrategiaAtras@m+3)& (0+255),b
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;main.c: 328: estado = AVANZAR;
  1982  0008A8  0E0C               	movlw	12
  1983  0008AA  6E46               	movwf	estrategiaAtras@estado,c
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;main.c: 329: return;
  1987  0008AC  0012               	return	
  1988  0008AE                     
  1989                           ; BSR set to: 0
  1990                           ;main.c: 332: setMotores(1000, 1000);
  1991                           
  1992                           ; BSR set to: 0
  1993  0008AE  0E03               	movlw	3
  1994  0008B0  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  1995  0008B2  0EE8               	movlw	232
  1996  0008B4  6F60               	movwf	setMotores@speedI& (0+255),b
  1997  0008B6  0E03               	movlw	3
  1998  0008B8  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  1999  0008BA  0EE8               	movlw	232
  2000  0008BC  6F62               	movwf	setMotores@speedD& (0+255),b
  2001  0008BE  ECB7  F002         	call	_setMotores	;wreg free
  2002                           
  2003                           ;main.c: 333: m = millis() + 100U;
  2004  0008C2  0E64               	movlw	100
  2005  0008C4  EC38  F007         	call	_millis	;wreg free
  2006  0008C8  2413               	addwf	?_millis,w,c
  2007  0008CA  0100               	movlb	0	; () banked
  2008  0008CC  6F7D               	movwf	estrategiaAtras@m& (0+255),b
  2009  0008CE  0E00               	movlw	0
  2010  0008D0  2014               	addwfc	?_millis+1,w,c
  2011  0008D2  6F7E               	movwf	(estrategiaAtras@m+1)& (0+255),b
  2012  0008D4  0E00               	movlw	0
  2013  0008D6  2015               	addwfc	?_millis+2,w,c
  2014  0008D8  6F7F               	movwf	(estrategiaAtras@m+2)& (0+255),b
  2015  0008DA  0E00               	movlw	0
  2016  0008DC  2016               	addwfc	?_millis+3,w,c
  2017  0008DE  6F80               	movwf	(estrategiaAtras@m+3)& (0+255),b
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;main.c: 334: estado = FRENAR;
  2021  0008E0  0E0D               	movlw	13
  2022  0008E2  6E46               	movwf	estrategiaAtras@estado,c
  2023                           
  2024                           ; BSR set to: 0
  2025                           ;main.c: 335: return;
  2026  0008E4  0012               	return	
  2027  0008E6                     
  2028                           ; BSR set to: 0
  2029                           ;main.c: 338: setMotores(0, 0);
  2030                           
  2031                           ; BSR set to: 0
  2032  0008E6  0E00               	movlw	0
  2033  0008E8  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  2034  0008EA  0E00               	movlw	0
  2035  0008EC  6F60               	movwf	setMotores@speedI& (0+255),b
  2036  0008EE  0E00               	movlw	0
  2037  0008F0  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  2038  0008F2  0E00               	movlw	0
  2039  0008F4  6F62               	movwf	setMotores@speedD& (0+255),b
  2040  0008F6  ECB7  F002         	call	_setMotores	;wreg free
  2041                           
  2042                           ;main.c: 339: m = millis() + 500U;
  2043  0008FA  EC38  F007         	call	_millis	;wreg free
  2044  0008FE  0EF4               	movlw	244
  2045  000900  2413               	addwf	?_millis,w,c
  2046  000902  0100               	movlb	0	; () banked
  2047  000904  6F7D               	movwf	estrategiaAtras@m& (0+255),b
  2048  000906  0E01               	movlw	1
  2049  000908  2014               	addwfc	?_millis+1,w,c
  2050  00090A  6F7E               	movwf	(estrategiaAtras@m+1)& (0+255),b
  2051  00090C  0E00               	movlw	0
  2052  00090E  2015               	addwfc	?_millis+2,w,c
  2053  000910  6F7F               	movwf	(estrategiaAtras@m+2)& (0+255),b
  2054  000912  0E00               	movlw	0
  2055  000914  2016               	addwfc	?_millis+3,w,c
  2056  000916  6F80               	movwf	(estrategiaAtras@m+3)& (0+255),b
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;main.c: 340: estado = AVANZAR;
  2060  000918  0E0C               	movlw	12
  2061  00091A  6E46               	movwf	estrategiaAtras@estado,c
  2062                           
  2063                           ; BSR set to: 0
  2064                           ;main.c: 342: }
  2065                           
  2066                           ; BSR set to: 0
  2067                           ;main.c: 341: return;
  2068  00091C  0012               	return	
  2069  00091E                     l155:
  2070                           
  2071                           ; BSR set to: 0
  2072                           
  2073                           ; BSR set to: 0
  2074  00091E  5046               	movf	estrategiaAtras@estado,w,c
  2075                           
  2076                           ; Switch size 1, requested type "space"
  2077                           ; Number of cases is 3, Range of values is 11 to 13
  2078                           ; switch strategies available:
  2079                           ; Name         Instructions Cycles
  2080                           ; simple_byte           10     6 (average)
  2081                           ;	Chosen strategy is simple_byte
  2082  000920  0A0B               	xorlw	11	; case 11
  2083  000922  B4D8               	btfsc	status,2,c
  2084  000924  D7A8               	goto	l156
  2085  000926  0A07               	xorlw	7	; case 12
  2086  000928  B4D8               	btfsc	status,2,c
  2087  00092A  D7C1               	goto	l157
  2088  00092C  0A01               	xorlw	1	; case 13
  2089  00092E  A4D8               	btfss	status,2,c
  2090  000930  0012               	return	
  2091  000932  D7D9               	goto	l158
  2092  000934                     __end_of_estrategiaAtras:
  2093                           	opt stack 0
  2094                           tblptru	equ	0xFF8
  2095                           tblptrh	equ	0xFF7
  2096                           tblptrl	equ	0xFF6
  2097                           tablat	equ	0xFF5
  2098                           postinc0	equ	0xFEE
  2099                           wreg	equ	0xFE8
  2100                           postdec1	equ	0xFE5
  2101                           fsr1l	equ	0xFE1
  2102                           status	equ	0xFD8
  2103                           
  2104 ;; *************** function _estrategiaAdelante *****************
  2105 ;; Defined at:
  2106 ;;		line 279 in file "main.c"
  2107 ;; Parameters:    Size  Location     Type
  2108 ;;		None
  2109 ;; Auto vars:     Size  Location     Type
  2110 ;;		None
  2111 ;; Return value:  Size  Location     Type
  2112 ;;                  1    wreg      void 
  2113 ;; Registers used:
  2114 ;;		wreg, status,2, status,0, cstack
  2115 ;; Tracked objects:
  2116 ;;		On entry : 0/0
  2117 ;;		On exit  : 0/0
  2118 ;;		Unchanged: 0/0
  2119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2120 ;;      Params:         0       0       0       0       0       0       0       0       0
  2121 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2122 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2123 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2124 ;;Total ram usage:        0 bytes
  2125 ;; Hardware stack levels used:    1
  2126 ;; Hardware stack levels required when called:    4
  2127 ;; This function calls:
  2128 ;;		_millis
  2129 ;;		_setMotores
  2130 ;; This function is called by:
  2131 ;;		_loop
  2132 ;; This function uses a non-reentrant model
  2133 ;;
  2134                           
  2135                           	psect	text5
  2136  000934                     __ptext5:
  2137                           	opt stack 0
  2138  000934                     _estrategiaAdelante:
  2139                           	opt stack 25
  2140                           
  2141                           ;main.c: 280: static unsigned long m = 0;
  2142                           ;main.c: 281: static char estado = POSICIONAR;
  2143                           ;main.c: 283: if((unsigned)!PORTBbits.RB5 || (unsigned)!PORTBbits.RB4 || (unsigned)!PORT
      +                          Bbits.RB1 || (unsigned)!PORTCbits.RC5 || (unsigned)!PORTCbits.RC4 || (unsigned)!PORTBbit
      +                          s.RB3 || (unsigned)!PORTCbits.RC6){
  2144                           
  2145                           ;incstack = 0
  2146  000934  BA81               	btfsc	3969,5,c	;volatile
  2147  000936  A881               	btfss	3969,4,c	;volatile
  2148  000938  D008               	goto	u2490
  2149  00093A  B281               	btfsc	3969,1,c	;volatile
  2150  00093C  AA82               	btfss	3970,5,c	;volatile
  2151  00093E  D005               	goto	u2490
  2152  000940  B882               	btfsc	3970,4,c	;volatile
  2153  000942  A681               	btfss	3969,3,c	;volatile
  2154  000944  D002               	goto	u2490
  2155  000946  BC82               	btfsc	3970,6,c	;volatile
  2156  000948  D003               	goto	l134
  2157  00094A                     u2490:
  2158                           
  2159                           ;main.c: 284: estadoMenu = E_CLASICA;
  2160  00094A  0E03               	movlw	3
  2161  00094C  6E45               	movwf	_estadoMenu,c
  2162                           
  2163                           ;main.c: 285: return;
  2164  00094E  0012               	return	
  2165  000950                     l134:
  2166                           
  2167                           ;main.c: 286: }
  2168                           ;main.c: 288: if(millis() < m)
  2169  000950  EC38  F007         	call	_millis	;wreg free
  2170  000954  0100               	movlb	0	; () banked
  2171  000956  5181               	movf	estrategiaAdelante@m& (0+255),w,b
  2172  000958  5C13               	subwf	?_millis,w,c
  2173  00095A  5182               	movf	(estrategiaAdelante@m+1)& (0+255),w,b
  2174  00095C  5814               	subwfb	?_millis+1,w,c
  2175  00095E  5183               	movf	(estrategiaAdelante@m+2)& (0+255),w,b
  2176  000960  5815               	subwfb	?_millis+2,w,c
  2177  000962  5184               	movf	(estrategiaAdelante@m+3)& (0+255),w,b
  2178  000964  5816               	subwfb	?_millis+3,w,c
  2179  000966  A0D8               	btfss	status,0,c
  2180  000968  0012               	return	
  2181  00096A  D054               	goto	l139
  2182  00096C                     
  2183                           ; BSR set to: 0
  2184                           ;main.c: 293: setMotores(1000, 0);
  2185                           
  2186                           ; BSR set to: 0
  2187  00096C  0E03               	movlw	3
  2188  00096E  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  2189  000970  0EE8               	movlw	232
  2190  000972  6F60               	movwf	setMotores@speedI& (0+255),b
  2191  000974  0E00               	movlw	0
  2192  000976  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  2193  000978  0E00               	movlw	0
  2194  00097A  6F62               	movwf	setMotores@speedD& (0+255),b
  2195  00097C  ECB7  F002         	call	_setMotores	;wreg free
  2196                           
  2197                           ;main.c: 294: m = millis() + 400U;
  2198  000980  EC38  F007         	call	_millis	;wreg free
  2199  000984  0E90               	movlw	144
  2200  000986  2413               	addwf	?_millis,w,c
  2201  000988  0100               	movlb	0	; () banked
  2202  00098A  6F81               	movwf	estrategiaAdelante@m& (0+255),b
  2203  00098C  0E01               	movlw	1
  2204  00098E  2014               	addwfc	?_millis+1,w,c
  2205  000990  6F82               	movwf	(estrategiaAdelante@m+1)& (0+255),b
  2206  000992  0E00               	movlw	0
  2207  000994  2015               	addwfc	?_millis+2,w,c
  2208  000996  6F83               	movwf	(estrategiaAdelante@m+2)& (0+255),b
  2209  000998  0E00               	movlw	0
  2210  00099A  2016               	addwfc	?_millis+3,w,c
  2211  00099C  6F84               	movwf	(estrategiaAdelante@m+3)& (0+255),b
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;main.c: 295: estado = AVANZAR;
  2215  00099E  0E0C               	movlw	12
  2216  0009A0  6E47               	movwf	estrategiaAdelante@estado,c
  2217                           
  2218                           ; BSR set to: 0
  2219                           ;main.c: 296: return;
  2220  0009A2  0012               	return	
  2221  0009A4                     
  2222                           ; BSR set to: 0
  2223                           ;main.c: 299: setMotores(1000, 1000);
  2224                           
  2225                           ; BSR set to: 0
  2226  0009A4  0E03               	movlw	3
  2227  0009A6  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  2228  0009A8  0EE8               	movlw	232
  2229  0009AA  6F60               	movwf	setMotores@speedI& (0+255),b
  2230  0009AC  0E03               	movlw	3
  2231  0009AE  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  2232  0009B0  0EE8               	movlw	232
  2233  0009B2  6F62               	movwf	setMotores@speedD& (0+255),b
  2234  0009B4  ECB7  F002         	call	_setMotores	;wreg free
  2235                           
  2236                           ;main.c: 300: m = millis() + 100U;
  2237  0009B8  0E64               	movlw	100
  2238  0009BA  EC38  F007         	call	_millis	;wreg free
  2239  0009BE  2413               	addwf	?_millis,w,c
  2240  0009C0  0100               	movlb	0	; () banked
  2241  0009C2  6F81               	movwf	estrategiaAdelante@m& (0+255),b
  2242  0009C4  0E00               	movlw	0
  2243  0009C6  2014               	addwfc	?_millis+1,w,c
  2244  0009C8  6F82               	movwf	(estrategiaAdelante@m+1)& (0+255),b
  2245  0009CA  0E00               	movlw	0
  2246  0009CC  2015               	addwfc	?_millis+2,w,c
  2247  0009CE  6F83               	movwf	(estrategiaAdelante@m+2)& (0+255),b
  2248  0009D0  0E00               	movlw	0
  2249  0009D2  2016               	addwfc	?_millis+3,w,c
  2250  0009D4  6F84               	movwf	(estrategiaAdelante@m+3)& (0+255),b
  2251                           
  2252                           ; BSR set to: 0
  2253                           ;main.c: 301: estado = FRENAR;
  2254  0009D6  0E0D               	movlw	13
  2255  0009D8  6E47               	movwf	estrategiaAdelante@estado,c
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;main.c: 302: return;
  2259  0009DA  0012               	return	
  2260  0009DC                     
  2261                           ; BSR set to: 0
  2262                           ;main.c: 305: setMotores(0, 0);
  2263                           
  2264                           ; BSR set to: 0
  2265  0009DC  0E00               	movlw	0
  2266  0009DE  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  2267  0009E0  0E00               	movlw	0
  2268  0009E2  6F60               	movwf	setMotores@speedI& (0+255),b
  2269  0009E4  0E00               	movlw	0
  2270  0009E6  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  2271  0009E8  0E00               	movlw	0
  2272  0009EA  6F62               	movwf	setMotores@speedD& (0+255),b
  2273  0009EC  ECB7  F002         	call	_setMotores	;wreg free
  2274                           
  2275                           ;main.c: 306: m = millis() + 500U;
  2276  0009F0  EC38  F007         	call	_millis	;wreg free
  2277  0009F4  0EF4               	movlw	244
  2278  0009F6  2413               	addwf	?_millis,w,c
  2279  0009F8  0100               	movlb	0	; () banked
  2280  0009FA  6F81               	movwf	estrategiaAdelante@m& (0+255),b
  2281  0009FC  0E01               	movlw	1
  2282  0009FE  2014               	addwfc	?_millis+1,w,c
  2283  000A00  6F82               	movwf	(estrategiaAdelante@m+1)& (0+255),b
  2284  000A02  0E00               	movlw	0
  2285  000A04  2015               	addwfc	?_millis+2,w,c
  2286  000A06  6F83               	movwf	(estrategiaAdelante@m+2)& (0+255),b
  2287  000A08  0E00               	movlw	0
  2288  000A0A  2016               	addwfc	?_millis+3,w,c
  2289  000A0C  6F84               	movwf	(estrategiaAdelante@m+3)& (0+255),b
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;main.c: 307: estado = AVANZAR;
  2293  000A0E  0E0C               	movlw	12
  2294  000A10  6E47               	movwf	estrategiaAdelante@estado,c
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;main.c: 309: }
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;main.c: 308: return;
  2301  000A12  0012               	return	
  2302  000A14                     l139:
  2303                           
  2304                           ; BSR set to: 0
  2305                           
  2306                           ; BSR set to: 0
  2307  000A14  5047               	movf	estrategiaAdelante@estado,w,c
  2308                           
  2309                           ; Switch size 1, requested type "space"
  2310                           ; Number of cases is 3, Range of values is 11 to 13
  2311                           ; switch strategies available:
  2312                           ; Name         Instructions Cycles
  2313                           ; simple_byte           10     6 (average)
  2314                           ;	Chosen strategy is simple_byte
  2315  000A16  0A0B               	xorlw	11	; case 11
  2316  000A18  B4D8               	btfsc	status,2,c
  2317  000A1A  D7A8               	goto	l140
  2318  000A1C  0A07               	xorlw	7	; case 12
  2319  000A1E  B4D8               	btfsc	status,2,c
  2320  000A20  D7C1               	goto	l141
  2321  000A22  0A01               	xorlw	1	; case 13
  2322  000A24  A4D8               	btfss	status,2,c
  2323  000A26  0012               	return	
  2324  000A28  D7D9               	goto	l142
  2325  000A2A                     __end_of_estrategiaAdelante:
  2326                           	opt stack 0
  2327                           tblptru	equ	0xFF8
  2328                           tblptrh	equ	0xFF7
  2329                           tblptrl	equ	0xFF6
  2330                           tablat	equ	0xFF5
  2331                           postinc0	equ	0xFEE
  2332                           wreg	equ	0xFE8
  2333                           postdec1	equ	0xFE5
  2334                           fsr1l	equ	0xFE1
  2335                           status	equ	0xFD8
  2336                           
  2337 ;; *************** function _millis *****************
  2338 ;; Defined at:
  2339 ;;		line 87 in file "funciones.c"
  2340 ;; Parameters:    Size  Location     Type
  2341 ;;		None
  2342 ;; Auto vars:     Size  Location     Type
  2343 ;;		None
  2344 ;; Return value:  Size  Location     Type
  2345 ;;                  4   18[COMRAM] unsigned long 
  2346 ;; Registers used:
  2347 ;;		None
  2348 ;; Tracked objects:
  2349 ;;		On entry : 0/0
  2350 ;;		On exit  : 0/0
  2351 ;;		Unchanged: 0/0
  2352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2353 ;;      Params:         4       0       0       0       0       0       0       0       0
  2354 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2355 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2356 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2357 ;;Total ram usage:        4 bytes
  2358 ;; Hardware stack levels used:    1
  2359 ;; Hardware stack levels required when called:    1
  2360 ;; This function calls:
  2361 ;;		Nothing
  2362 ;; This function is called by:
  2363 ;;		_loop
  2364 ;;		_estrategiaClasica
  2365 ;;		_estrategiaCiego
  2366 ;;		_estrategiaAdelante
  2367 ;;		_estrategiaAtras
  2368 ;; This function uses a non-reentrant model
  2369 ;;
  2370                           
  2371                           	psect	text6
  2372  000E70                     __ptext6:
  2373                           	opt stack 0
  2374  000E70                     _millis:
  2375                           	opt stack 28
  2376                           
  2377                           ;funciones.c: 88: return millisCounter;
  2378                           
  2379                           ;incstack = 0
  2380  000E70  C079  F013         	movff	_millisCounter,?_millis
  2381  000E74  C07A  F014         	movff	_millisCounter+1,?_millis+1
  2382  000E78  C07B  F015         	movff	_millisCounter+2,?_millis+2
  2383  000E7C  C07C  F016         	movff	_millisCounter+3,?_millis+3
  2384  000E80  0012               	return		;funcret
  2385  000E82                     __end_of_millis:
  2386                           	opt stack 0
  2387                           tblptru	equ	0xFF8
  2388                           tblptrh	equ	0xFF7
  2389                           tblptrl	equ	0xFF6
  2390                           tablat	equ	0xFF5
  2391                           postinc0	equ	0xFEE
  2392                           wreg	equ	0xFE8
  2393                           postdec1	equ	0xFE5
  2394                           fsr1l	equ	0xFE1
  2395                           status	equ	0xFD8
  2396                           
  2397 ;; *************** function _init *****************
  2398 ;; Defined at:
  2399 ;;		line 5 in file "funciones.c"
  2400 ;; Parameters:    Size  Location     Type
  2401 ;;		None
  2402 ;; Auto vars:     Size  Location     Type
  2403 ;;		None
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  1    wreg      void 
  2406 ;; Registers used:
  2407 ;;		wreg, status,2, status,0, cstack
  2408 ;; Tracked objects:
  2409 ;;		On entry : 0/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2413 ;;      Params:         0       0       0       0       0       0       0       0       0
  2414 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2415 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2416 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2417 ;;Total ram usage:        0 bytes
  2418 ;; Hardware stack levels used:    1
  2419 ;; Hardware stack levels required when called:    4
  2420 ;; This function calls:
  2421 ;;		_setMotores
  2422 ;; This function is called by:
  2423 ;;		_main
  2424 ;; This function uses a non-reentrant model
  2425 ;;
  2426                           
  2427                           	psect	text7
  2428  000D6A                     __ptext7:
  2429                           	opt stack 0
  2430  000D6A                     _init:
  2431                           	opt stack 26
  2432                           
  2433                           ;funciones.c: 7: ADCON1bits.PCFG = 0b1111;
  2434                           
  2435                           ;incstack = 0
  2436  000D6A  80C1               	bsf	4033,0,c	;volatile
  2437  000D6C  82C1               	bsf	4033,1,c	;volatile
  2438  000D6E  84C1               	bsf	4033,2,c	;volatile
  2439  000D70  86C1               	bsf	4033,3,c	;volatile
  2440                           
  2441                           ;funciones.c: 10: UCONbits.USBEN = 0;
  2442  000D72  966D               	bcf	3949,3,c	;volatile
  2443                           
  2444                           ;funciones.c: 11: UCFGbits.UTRDIS = 1;
  2445  000D74  866F               	bsf	3951,3,c	;volatile
  2446                           
  2447                           ;funciones.c: 14: TRISAbits.RA1 = INPUT;
  2448  000D76  8292               	bsf	3986,1,c	;volatile
  2449                           
  2450                           ;funciones.c: 15: TRISAbits.RA5 = INPUT;
  2451  000D78  8A92               	bsf	3986,5,c	;volatile
  2452                           
  2453                           ;funciones.c: 16: TRISCbits.RC7 = INPUT;
  2454  000D7A  8E94               	bsf	3988,7,c	;volatile
  2455                           
  2456                           ;funciones.c: 17: TRISAbits.RA2 = OUTPUT;
  2457  000D7C  9492               	bcf	3986,2,c	;volatile
  2458                           
  2459                           ;funciones.c: 18: TRISAbits.RA3 = OUTPUT;
  2460  000D7E  9692               	bcf	3986,3,c	;volatile
  2461                           
  2462                           ;funciones.c: 19: TRISAbits.RA4 = OUTPUT;
  2463  000D80  9892               	bcf	3986,4,c	;volatile
  2464                           
  2465                           ;funciones.c: 20: TRISBbits.RB5 = INPUT;
  2466  000D82  8A93               	bsf	3987,5,c	;volatile
  2467                           
  2468                           ;funciones.c: 21: TRISBbits.RB4 = INPUT;
  2469  000D84  8893               	bsf	3987,4,c	;volatile
  2470                           
  2471                           ;funciones.c: 22: TRISBbits.RB1 = INPUT;
  2472  000D86  8293               	bsf	3987,1,c	;volatile
  2473                           
  2474                           ;funciones.c: 25: TRISBbits.RB3 = INPUT;
  2475  000D88  8693               	bsf	3987,3,c	;volatile
  2476                           
  2477                           ;funciones.c: 26: TRISCbits.RC6 = INPUT;
  2478  000D8A  8C94               	bsf	3988,6,c	;volatile
  2479                           
  2480                           ;funciones.c: 27: TRISCbits.RC1 = OUTPUT;
  2481  000D8C  9294               	bcf	3988,1,c	;volatile
  2482                           
  2483                           ;funciones.c: 28: TRISCbits.RC2 = OUTPUT;
  2484  000D8E  9494               	bcf	3988,2,c	;volatile
  2485                           
  2486                           ;funciones.c: 29: TRISCbits.RC0 = OUTPUT;
  2487  000D90  9094               	bcf	3988,0,c	;volatile
  2488                           
  2489                           ;funciones.c: 30: TRISAbits.RA0 = OUTPUT;
  2490  000D92  9092               	bcf	3986,0,c	;volatile
  2491                           
  2492                           ;funciones.c: 33: T2CON = 0;
  2493  000D94  0E00               	movlw	0
  2494  000D96  6ECA               	movwf	4042,c	;volatile
  2495                           
  2496                           ;funciones.c: 34: T2CONbits.TOUTPS=11;
  2497  000D98  50CA               	movf	4042,w,c	;volatile
  2498  000D9A  0B87               	andlw	-121
  2499  000D9C  0958               	iorlw	88
  2500  000D9E  6ECA               	movwf	4042,c	;volatile
  2501                           
  2502                           ;funciones.c: 35: T2CONbits.T2CKPS=1;
  2503  000DA0  50CA               	movf	4042,w,c	;volatile
  2504  000DA2  0BFC               	andlw	-4
  2505  000DA4  0901               	iorlw	1
  2506  000DA6  6ECA               	movwf	4042,c	;volatile
  2507                           
  2508                           ;funciones.c: 36: PR2=249;
  2509  000DA8  0EF9               	movlw	249
  2510  000DAA  6ECB               	movwf	4043,c	;volatile
  2511                           
  2512                           ;funciones.c: 37: T2CONbits.TMR2ON=1;
  2513  000DAC  84CA               	bsf	4042,2,c	;volatile
  2514                           
  2515                           ;funciones.c: 40: CCPR1L=0;
  2516  000DAE  0E00               	movlw	0
  2517  000DB0  6EBE               	movwf	4030,c	;volatile
  2518                           
  2519                           ;funciones.c: 41: CCP1CONbits.DC1B=0;
  2520  000DB2  0ECF               	movlw	-49
  2521  000DB4  16BD               	andwf	4029,f,c	;volatile
  2522                           
  2523                           ;funciones.c: 42: CCP1CONbits.CCP1M=12;
  2524  000DB6  50BD               	movf	4029,w,c	;volatile
  2525  000DB8  0BF0               	andlw	-16
  2526  000DBA  090C               	iorlw	12
  2527  000DBC  6EBD               	movwf	4029,c	;volatile
  2528                           
  2529                           ;funciones.c: 43: CCPR2L=0;
  2530  000DBE  0E00               	movlw	0
  2531  000DC0  6EBB               	movwf	4027,c	;volatile
  2532                           
  2533                           ;funciones.c: 44: CCP2CONbits.DC2B=0;
  2534  000DC2  0ECF               	movlw	-49
  2535  000DC4  16BA               	andwf	4026,f,c	;volatile
  2536                           
  2537                           ;funciones.c: 45: CCP2CONbits.CCP2M=12;
  2538  000DC6  50BA               	movf	4026,w,c	;volatile
  2539  000DC8  0BF0               	andlw	-16
  2540  000DCA  090C               	iorlw	12
  2541  000DCC  6EBA               	movwf	4026,c	;volatile
  2542                           
  2543                           ;funciones.c: 48: INTCON3=0;
  2544  000DCE  0E00               	movlw	0
  2545  000DD0  6EF0               	movwf	intcon3,c	;volatile
  2546                           
  2547                           ;funciones.c: 49: PIE1=0;
  2548  000DD2  0E00               	movlw	0
  2549  000DD4  6E9D               	movwf	3997,c	;volatile
  2550                           
  2551                           ;funciones.c: 50: PIE2=0;
  2552  000DD6  0E00               	movlw	0
  2553  000DD8  6EA0               	movwf	4000,c	;volatile
  2554                           
  2555                           ;funciones.c: 51: RCONbits.IPEN=0;
  2556  000DDA  9ED0               	bcf	4048,7,c	;volatile
  2557                           
  2558                           ;funciones.c: 52: PIE1bits.TMR2IE=1;
  2559  000DDC  829D               	bsf	3997,1,c	;volatile
  2560                           
  2561                           ;funciones.c: 53: INTCONbits.PEIE_GIEL=1;
  2562  000DDE  8CF2               	bsf	intcon,6,c	;volatile
  2563                           
  2564                           ;funciones.c: 54: INTCONbits.GIE_GIEH=1;
  2565  000DE0  8EF2               	bsf	intcon,7,c	;volatile
  2566                           
  2567                           ;funciones.c: 55: RCONbits.IPEN = 0;
  2568  000DE2  9ED0               	bcf	4048,7,c	;volatile
  2569                           
  2570                           ;funciones.c: 56: INTCONbits.PEIE = 1;
  2571  000DE4  8CF2               	bsf	intcon,6,c	;volatile
  2572                           
  2573                           ;funciones.c: 57: INTCONbits.GIE = 1;
  2574  000DE6  8EF2               	bsf	intcon,7,c	;volatile
  2575                           
  2576                           ;funciones.c: 60: setMotores(0, 0);
  2577  000DE8  0E00               	movlw	0
  2578  000DEA  0100               	movlb	0	; () banked
  2579  000DEC  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  2580  000DEE  0E00               	movlw	0
  2581  000DF0  6F60               	movwf	setMotores@speedI& (0+255),b
  2582  000DF2  0E00               	movlw	0
  2583  000DF4  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  2584  000DF6  0E00               	movlw	0
  2585  000DF8  6F62               	movwf	setMotores@speedD& (0+255),b
  2586  000DFA  ECB7  F002         	call	_setMotores	;wreg free
  2587                           
  2588                           ;funciones.c: 61: LATAbits.LA2 = 0;
  2589  000DFE  9489               	bcf	3977,2,c	;volatile
  2590                           
  2591                           ;funciones.c: 62: LATAbits.LA3 = 0;
  2592  000E00  9689               	bcf	3977,3,c	;volatile
  2593                           
  2594                           ;funciones.c: 63: LATAbits.LA4 = 0;
  2595  000E02  9889               	bcf	3977,4,c	;volatile
  2596  000E04  0012               	return		;funcret
  2597  000E06                     __end_of_init:
  2598                           	opt stack 0
  2599                           tblptru	equ	0xFF8
  2600                           tblptrh	equ	0xFF7
  2601                           tblptrl	equ	0xFF6
  2602                           tablat	equ	0xFF5
  2603                           intcon	equ	0xFF2
  2604                           intcon3	equ	0xFF0
  2605                           postinc0	equ	0xFEE
  2606                           wreg	equ	0xFE8
  2607                           postdec1	equ	0xFE5
  2608                           fsr1l	equ	0xFE1
  2609                           status	equ	0xFD8
  2610                           
  2611 ;; *************** function _setMotores *****************
  2612 ;; Defined at:
  2613 ;;		line 66 in file "funciones.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;  speedI          2    0[BANK0 ] int 
  2616 ;;  speedD          2    2[BANK0 ] int 
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;  dutyD           2   12[BANK0 ] unsigned int 
  2619 ;;  dutyI           2   10[BANK0 ] unsigned int 
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  1    wreg      void 
  2622 ;; Registers used:
  2623 ;;		wreg, status,2, status,0, cstack
  2624 ;; Tracked objects:
  2625 ;;		On entry : 0/0
  2626 ;;		On exit  : 0/0
  2627 ;;		Unchanged: 0/0
  2628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2629 ;;      Params:         0       4       0       0       0       0       0       0       0
  2630 ;;      Locals:         0       8       0       0       0       0       0       0       0
  2631 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2632 ;;      Totals:         0      14       0       0       0       0       0       0       0
  2633 ;;Total ram usage:       14 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; Hardware stack levels required when called:    3
  2636 ;; This function calls:
  2637 ;;		___ftmul
  2638 ;;		___fttol
  2639 ;;		___lwtoft
  2640 ;; This function is called by:
  2641 ;;		_loop
  2642 ;;		_estrategiaClasica
  2643 ;;		_estrategiaCiego
  2644 ;;		_estrategiaAdelante
  2645 ;;		_estrategiaAtras
  2646 ;;		_init
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           	psect	text8
  2651  00056E                     __ptext8:
  2652                           	opt stack 0
  2653  00056E                     _setMotores:
  2654                           	opt stack 26
  2655                           
  2656                           ;funciones.c: 67: speedD = -speedD;
  2657                           
  2658                           ;incstack = 0
  2659  00056E  0100               	movlb	0	; () banked
  2660  000570  6D62               	negf	setMotores@speedD& (0+255),b
  2661  000572  1F63               	comf	(setMotores@speedD+1)& (0+255),f,b
  2662  000574  B0D8               	btfsc	status,0,c
  2663  000576  2B63               	incf	(setMotores@speedD+1)& (0+255),f,b
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;funciones.c: 69: speedI = (speedI > 1000 ? 1000 : (speedI < -1000 ? -1000 : speedI));
  2667  000578  BF61               	btfsc	(setMotores@speedI+1)& (0+255),7,b
  2668  00057A  D006               	goto	u2130
  2669  00057C  0EE9               	movlw	233
  2670  00057E  5D60               	subwf	setMotores@speedI& (0+255),w,b
  2671  000580  0E03               	movlw	3
  2672  000582  5961               	subwfb	(setMotores@speedI+1)& (0+255),w,b
  2673  000584  B0D8               	btfsc	status,0,c
  2674  000586  D016               	goto	l222
  2675  000588                     u2130:
  2676                           
  2677                           ; BSR set to: 0
  2678  000588  AF61               	btfss	(setMotores@speedI+1)& (0+255),7,b
  2679  00058A  D006               	goto	u2140
  2680  00058C  0E18               	movlw	24
  2681  00058E  5D60               	subwf	setMotores@speedI& (0+255),w,b
  2682  000590  0EFC               	movlw	252
  2683  000592  5961               	subwfb	(setMotores@speedI+1)& (0+255),w,b
  2684  000594  A0D8               	btfss	status,0,c
  2685  000596  D005               	goto	l226
  2686  000598                     u2140:
  2687                           
  2688                           ; BSR set to: 0
  2689  000598  C060  F066         	movff	setMotores@speedI,_setMotores$933
  2690  00059C  C061  F067         	movff	setMotores@speedI+1,_setMotores$933+1
  2691  0005A0  D004               	goto	l228
  2692  0005A2                     l226:
  2693                           
  2694                           ; BSR set to: 0
  2695                           
  2696                           ; BSR set to: 0
  2697  0005A2  0EFC               	movlw	252
  2698  0005A4  6F67               	movwf	(_setMotores$933+1)& (0+255),b
  2699  0005A6  0E18               	movlw	24
  2700  0005A8  6F66               	movwf	_setMotores$933& (0+255),b
  2701  0005AA                     l228:
  2702                           
  2703                           ; BSR set to: 0
  2704                           
  2705                           ; BSR set to: 0
  2706  0005AA  C066  F060         	movff	_setMotores$933,setMotores@speedI
  2707  0005AE  C067  F061         	movff	_setMotores$933+1,setMotores@speedI+1
  2708  0005B2  D004               	goto	l224
  2709  0005B4                     l222:
  2710                           
  2711                           ; BSR set to: 0
  2712                           
  2713                           ; BSR set to: 0
  2714  0005B4  0E03               	movlw	3
  2715  0005B6  6F61               	movwf	(setMotores@speedI+1)& (0+255),b
  2716  0005B8  0EE8               	movlw	232
  2717  0005BA  6F60               	movwf	setMotores@speedI& (0+255),b
  2718  0005BC                     l224:
  2719                           
  2720                           ; BSR set to: 0
  2721                           ;funciones.c: 70: speedD = (speedD > 1000 ? 1000 : (speedD < -1000 ? -1000 : speedD));
  2722                           
  2723                           ; BSR set to: 0
  2724  0005BC  BF63               	btfsc	(setMotores@speedD+1)& (0+255),7,b
  2725  0005BE  D006               	goto	u2150
  2726  0005C0  0EE9               	movlw	233
  2727  0005C2  5D62               	subwf	setMotores@speedD& (0+255),w,b
  2728  0005C4  0E03               	movlw	3
  2729  0005C6  5963               	subwfb	(setMotores@speedD+1)& (0+255),w,b
  2730  0005C8  B0D8               	btfsc	status,0,c
  2731  0005CA  D016               	goto	l230
  2732  0005CC                     u2150:
  2733                           
  2734                           ; BSR set to: 0
  2735  0005CC  AF63               	btfss	(setMotores@speedD+1)& (0+255),7,b
  2736  0005CE  D006               	goto	u2160
  2737  0005D0  0E18               	movlw	24
  2738  0005D2  5D62               	subwf	setMotores@speedD& (0+255),w,b
  2739  0005D4  0EFC               	movlw	252
  2740  0005D6  5963               	subwfb	(setMotores@speedD+1)& (0+255),w,b
  2741  0005D8  A0D8               	btfss	status,0,c
  2742  0005DA  D005               	goto	l234
  2743  0005DC                     u2160:
  2744                           
  2745                           ; BSR set to: 0
  2746  0005DC  C062  F068         	movff	setMotores@speedD,_setMotores$934
  2747  0005E0  C063  F069         	movff	setMotores@speedD+1,_setMotores$934+1
  2748  0005E4  D004               	goto	l236
  2749  0005E6                     l234:
  2750                           
  2751                           ; BSR set to: 0
  2752                           
  2753                           ; BSR set to: 0
  2754  0005E6  0EFC               	movlw	252
  2755  0005E8  6F69               	movwf	(_setMotores$934+1)& (0+255),b
  2756  0005EA  0E18               	movlw	24
  2757  0005EC  6F68               	movwf	_setMotores$934& (0+255),b
  2758  0005EE                     l236:
  2759                           
  2760                           ; BSR set to: 0
  2761                           
  2762                           ; BSR set to: 0
  2763  0005EE  C068  F062         	movff	_setMotores$934,setMotores@speedD
  2764  0005F2  C069  F063         	movff	_setMotores$934+1,setMotores@speedD+1
  2765  0005F6  D004               	goto	l232
  2766  0005F8                     l230:
  2767                           
  2768                           ; BSR set to: 0
  2769                           
  2770                           ; BSR set to: 0
  2771  0005F8  0E03               	movlw	3
  2772  0005FA  6F63               	movwf	(setMotores@speedD+1)& (0+255),b
  2773  0005FC  0EE8               	movlw	232
  2774  0005FE  6F62               	movwf	setMotores@speedD& (0+255),b
  2775  000600                     l232:
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;funciones.c: 72: LATAbits.LA0 = (unsigned)(speedI < 0);
  2779                           
  2780                           ; BSR set to: 0
  2781  000600  AF61               	btfss	(setMotores@speedI+1)& (0+255),7,b
  2782  000602  D003               	goto	u2170
  2783  000604  6B64               	clrf	??_setMotores& (0+255),b
  2784  000606  2B64               	incf	??_setMotores& (0+255),f,b
  2785  000608  D002               	goto	u2188
  2786  00060A                     u2170:
  2787  00060A  0100               	movlb	0	; () banked
  2788  00060C  6B64               	clrf	??_setMotores& (0+255),b
  2789  00060E                     u2188:
  2790  00060E  5089               	movf	3977,w,c	;volatile
  2791  000610  1964               	xorwf	??_setMotores& (0+255),w,b
  2792  000612  0BFE               	andlw	-2
  2793  000614  1964               	xorwf	??_setMotores& (0+255),w,b
  2794  000616  6E89               	movwf	3977,c	;volatile
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;funciones.c: 73: LATCbits.LC0 = (unsigned)(speedD < 0);
  2798  000618  AF63               	btfss	(setMotores@speedD+1)& (0+255),7,b
  2799  00061A  D003               	goto	u2190
  2800  00061C  6B64               	clrf	??_setMotores& (0+255),b
  2801  00061E  2B64               	incf	??_setMotores& (0+255),f,b
  2802  000620  D002               	goto	u2208
  2803  000622                     u2190:
  2804  000622  0100               	movlb	0	; () banked
  2805  000624  6B64               	clrf	??_setMotores& (0+255),b
  2806  000626                     u2208:
  2807  000626  508B               	movf	3979,w,c	;volatile
  2808  000628  1964               	xorwf	??_setMotores& (0+255),w,b
  2809  00062A  0BFE               	andlw	-2
  2810  00062C  1964               	xorwf	??_setMotores& (0+255),w,b
  2811  00062E  6E8B               	movwf	3979,c	;volatile
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;funciones.c: 75: unsigned int dutyI = (unsigned)(speedI < 0 ? 1000+speedI : speedI);
  2815  000630  BF61               	btfsc	(setMotores@speedI+1)& (0+255),7,b
  2816  000632  D005               	goto	l238
  2817                           
  2818                           ; BSR set to: 0
  2819  000634  C060  F06A         	movff	setMotores@speedI,setMotores@dutyI
  2820  000638  C061  F06B         	movff	setMotores@speedI+1,setMotores@dutyI+1
  2821  00063C  D006               	goto	l240
  2822  00063E                     l238:
  2823                           
  2824                           ; BSR set to: 0
  2825                           
  2826                           ; BSR set to: 0
  2827  00063E  0EE8               	movlw	232
  2828  000640  2560               	addwf	setMotores@speedI& (0+255),w,b
  2829  000642  6F6A               	movwf	setMotores@dutyI& (0+255),b
  2830  000644  0E03               	movlw	3
  2831  000646  2161               	addwfc	(setMotores@speedI+1)& (0+255),w,b
  2832  000648  6F6B               	movwf	(setMotores@dutyI+1)& (0+255),b
  2833  00064A                     l240:
  2834                           
  2835                           ; BSR set to: 0
  2836                           ;funciones.c: 76: unsigned int dutyD = (unsigned)(speedD < 0 ? 1000+speedD : speedD);
  2837  00064A  BF63               	btfsc	(setMotores@speedD+1)& (0+255),7,b
  2838  00064C  D005               	goto	l242
  2839                           
  2840                           ; BSR set to: 0
  2841  00064E  C062  F06C         	movff	setMotores@speedD,setMotores@dutyD
  2842  000652  C063  F06D         	movff	setMotores@speedD+1,setMotores@dutyD+1
  2843  000656  D006               	goto	l244
  2844  000658                     l242:
  2845                           
  2846                           ; BSR set to: 0
  2847                           
  2848                           ; BSR set to: 0
  2849  000658  0EE8               	movlw	232
  2850  00065A  2562               	addwf	setMotores@speedD& (0+255),w,b
  2851  00065C  6F6C               	movwf	setMotores@dutyD& (0+255),b
  2852  00065E  0E03               	movlw	3
  2853  000660  2163               	addwfc	(setMotores@speedD+1)& (0+255),w,b
  2854  000662  6F6D               	movwf	(setMotores@dutyD+1)& (0+255),b
  2855  000664                     l244:
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;funciones.c: 78: dutyI *= 1.023;
  2859                           
  2860                           ; BSR set to: 0
  2861  000664  0EF2               	movlw	242
  2862  000666  6E21               	movwf	___ftmul@f2,c
  2863  000668  0E82               	movlw	130
  2864  00066A  6E22               	movwf	___ftmul@f2+1,c
  2865  00066C  0E3F               	movlw	63
  2866  00066E  6E23               	movwf	___ftmul@f2+2,c
  2867  000670  C06A  F01B         	movff	setMotores@dutyI,___lwtoft@c
  2868  000674  C06B  F01C         	movff	setMotores@dutyI+1,___lwtoft@c+1
  2869  000678  EC26  F007         	call	___lwtoft	;wreg free
  2870  00067C  C01B  F01E         	movff	?___lwtoft,___ftmul@f1
  2871  000680  C01C  F01F         	movff	?___lwtoft+1,___ftmul@f1+1
  2872  000684  C01D  F020         	movff	?___lwtoft+2,___ftmul@f1+2
  2873  000688  EC8F  F005         	call	___ftmul	;wreg free
  2874  00068C  C01E  F02D         	movff	?___ftmul,___fttol@f1
  2875  000690  C01F  F02E         	movff	?___ftmul+1,___fttol@f1+1
  2876  000694  C020  F02F         	movff	?___ftmul+2,___fttol@f1+2
  2877  000698  EC15  F005         	call	___fttol	;wreg free
  2878  00069C  C02D  F06A         	movff	?___fttol,setMotores@dutyI
  2879  0006A0  C02E  F06B         	movff	?___fttol+1,setMotores@dutyI+1
  2880                           
  2881                           ;funciones.c: 79: dutyD *= 1.023;
  2882  0006A4  0EF2               	movlw	242
  2883  0006A6  6E21               	movwf	___ftmul@f2,c
  2884  0006A8  0E82               	movlw	130
  2885  0006AA  6E22               	movwf	___ftmul@f2+1,c
  2886  0006AC  0E3F               	movlw	63
  2887  0006AE  6E23               	movwf	___ftmul@f2+2,c
  2888  0006B0  C06C  F01B         	movff	setMotores@dutyD,___lwtoft@c
  2889  0006B4  C06D  F01C         	movff	setMotores@dutyD+1,___lwtoft@c+1
  2890  0006B8  EC26  F007         	call	___lwtoft	;wreg free
  2891  0006BC  C01B  F01E         	movff	?___lwtoft,___ftmul@f1
  2892  0006C0  C01C  F01F         	movff	?___lwtoft+1,___ftmul@f1+1
  2893  0006C4  C01D  F020         	movff	?___lwtoft+2,___ftmul@f1+2
  2894  0006C8  EC8F  F005         	call	___ftmul	;wreg free
  2895  0006CC  C01E  F02D         	movff	?___ftmul,___fttol@f1
  2896  0006D0  C01F  F02E         	movff	?___ftmul+1,___fttol@f1+1
  2897  0006D4  C020  F02F         	movff	?___ftmul+2,___fttol@f1+2
  2898  0006D8  EC15  F005         	call	___fttol	;wreg free
  2899  0006DC  C02D  F06C         	movff	?___fttol,setMotores@dutyD
  2900  0006E0  C02E  F06D         	movff	?___fttol+1,setMotores@dutyD+1
  2901                           
  2902                           ;funciones.c: 81: CCPR1L = dutyI / 4;
  2903  0006E4  C06A  F064         	movff	setMotores@dutyI,??_setMotores
  2904  0006E8  C06B  F065         	movff	setMotores@dutyI+1,??_setMotores+1
  2905  0006EC  0100               	movlb	0	; () banked
  2906  0006EE  90D8               	bcf	status,0,c
  2907  0006F0  3365               	rrcf	(??_setMotores+1)& (0+255),f,b
  2908  0006F2  3364               	rrcf	??_setMotores& (0+255),f,b
  2909  0006F4  90D8               	bcf	status,0,c
  2910  0006F6  3365               	rrcf	(??_setMotores+1)& (0+255),f,b
  2911  0006F8  3364               	rrcf	??_setMotores& (0+255),f,b
  2912  0006FA  5164               	movf	??_setMotores& (0+255),w,b
  2913  0006FC  6EBE               	movwf	4030,c	;volatile
  2914                           
  2915                           ;funciones.c: 82: CCPR2L = dutyD / 4;
  2916  0006FE  C06C  F064         	movff	setMotores@dutyD,??_setMotores
  2917  000702  C06D  F065         	movff	setMotores@dutyD+1,??_setMotores+1
  2918  000706  90D8               	bcf	status,0,c
  2919  000708  3365               	rrcf	(??_setMotores+1)& (0+255),f,b
  2920  00070A  3364               	rrcf	??_setMotores& (0+255),f,b
  2921  00070C  90D8               	bcf	status,0,c
  2922  00070E  3365               	rrcf	(??_setMotores+1)& (0+255),f,b
  2923  000710  3364               	rrcf	??_setMotores& (0+255),f,b
  2924  000712  5164               	movf	??_setMotores& (0+255),w,b
  2925  000714  6EBB               	movwf	4027,c	;volatile
  2926                           
  2927                           ;funciones.c: 83: CCP1CONbits.DC1B = dutyI % 4;
  2928  000716  C06A  F064         	movff	setMotores@dutyI,??_setMotores
  2929  00071A  0E03               	movlw	3
  2930  00071C  1764               	andwf	??_setMotores& (0+255),f,b
  2931  00071E  3B64               	swapf	??_setMotores& (0+255),f,b
  2932  000720  50BD               	movf	4029,w,c	;volatile
  2933  000722  1964               	xorwf	??_setMotores& (0+255),w,b
  2934  000724  0BCF               	andlw	-49
  2935  000726  1964               	xorwf	??_setMotores& (0+255),w,b
  2936  000728  6EBD               	movwf	4029,c	;volatile
  2937                           
  2938                           ;funciones.c: 84: CCP2CONbits.DC2B = dutyD % 4;
  2939  00072A  C06C  F064         	movff	setMotores@dutyD,??_setMotores
  2940  00072E  0E03               	movlw	3
  2941  000730  1764               	andwf	??_setMotores& (0+255),f,b
  2942  000732  3B64               	swapf	??_setMotores& (0+255),f,b
  2943  000734  50BA               	movf	4026,w,c	;volatile
  2944  000736  1964               	xorwf	??_setMotores& (0+255),w,b
  2945  000738  0BCF               	andlw	-49
  2946  00073A  1964               	xorwf	??_setMotores& (0+255),w,b
  2947  00073C  6EBA               	movwf	4026,c	;volatile
  2948                           
  2949                           ; BSR set to: 0
  2950  00073E  0012               	return		;funcret
  2951  000740                     __end_of_setMotores:
  2952                           	opt stack 0
  2953                           tblptru	equ	0xFF8
  2954                           tblptrh	equ	0xFF7
  2955                           tblptrl	equ	0xFF6
  2956                           tablat	equ	0xFF5
  2957                           intcon	equ	0xFF2
  2958                           intcon3	equ	0xFF0
  2959                           postinc0	equ	0xFEE
  2960                           wreg	equ	0xFE8
  2961                           postdec1	equ	0xFE5
  2962                           fsr1l	equ	0xFE1
  2963                           status	equ	0xFD8
  2964                           
  2965 ;; *************** function ___lwtoft *****************
  2966 ;; Defined at:
  2967 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;  c               2   26[COMRAM] unsigned int 
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;		None
  2972 ;; Return value:  Size  Location     Type
  2973 ;;                  3   26[COMRAM] float 
  2974 ;; Registers used:
  2975 ;;		wreg, status,2, status,0, cstack
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/0
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2981 ;;      Params:         3       0       0       0       0       0       0       0       0
  2982 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2983 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2984 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2985 ;;Total ram usage:        3 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; Hardware stack levels required when called:    2
  2988 ;; This function calls:
  2989 ;;		___ftpack
  2990 ;; This function is called by:
  2991 ;;		_setMotores
  2992 ;; This function uses a non-reentrant model
  2993 ;;
  2994                           
  2995                           	psect	text9
  2996  000E4C                     __ptext9:
  2997                           	opt stack 0
  2998  000E4C                     ___lwtoft:
  2999                           	opt stack 26
  3000                           
  3001                           ; BSR set to: 0
  3002                           ;incstack = 0
  3003  000E4C  C01B  F013         	movff	___lwtoft@c,___ftpack@arg
  3004  000E50  C01C  F014         	movff	___lwtoft@c+1,___ftpack@arg+1
  3005  000E54  6A15               	clrf	___ftpack@arg+2,c
  3006  000E56  0E8E               	movlw	142
  3007  000E58  6E16               	movwf	___ftpack@exp,c
  3008  000E5A  0E00               	movlw	0
  3009  000E5C  6E17               	movwf	___ftpack@sign,c
  3010  000E5E  EC09  F006         	call	___ftpack	;wreg free
  3011  000E62  C013  F01B         	movff	?___ftpack,?___lwtoft
  3012  000E66  C014  F01C         	movff	?___ftpack+1,?___lwtoft+1
  3013  000E6A  C015  F01D         	movff	?___ftpack+2,?___lwtoft+2
  3014  000E6E  0012               	return	
  3015  000E70                     __end_of___lwtoft:
  3016                           	opt stack 0
  3017                           tblptru	equ	0xFF8
  3018                           tblptrh	equ	0xFF7
  3019                           tblptrl	equ	0xFF6
  3020                           tablat	equ	0xFF5
  3021                           intcon	equ	0xFF2
  3022                           intcon3	equ	0xFF0
  3023                           postinc0	equ	0xFEE
  3024                           wreg	equ	0xFE8
  3025                           postdec1	equ	0xFE5
  3026                           fsr1l	equ	0xFE1
  3027                           status	equ	0xFD8
  3028                           
  3029 ;; *************** function ___fttol *****************
  3030 ;; Defined at:
  3031 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;  f1              3   44[COMRAM] float 
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;  lval            4   54[COMRAM] unsigned long 
  3036 ;;  exp1            1   58[COMRAM] unsigned char 
  3037 ;;  sign1           1   53[COMRAM] unsigned char 
  3038 ;; Return value:  Size  Location     Type
  3039 ;;                  4   44[COMRAM] long 
  3040 ;; Registers used:
  3041 ;;		wreg, status,2, status,0
  3042 ;; Tracked objects:
  3043 ;;		On entry : 0/0
  3044 ;;		On exit  : 0/0
  3045 ;;		Unchanged: 0/0
  3046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3047 ;;      Params:         4       0       0       0       0       0       0       0       0
  3048 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3049 ;;      Temps:          5       0       0       0       0       0       0       0       0
  3050 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3051 ;;Total ram usage:       15 bytes
  3052 ;; Hardware stack levels used:    1
  3053 ;; Hardware stack levels required when called:    1
  3054 ;; This function calls:
  3055 ;;		Nothing
  3056 ;; This function is called by:
  3057 ;;		_setMotores
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           	psect	text10
  3062  000A2A                     __ptext10:
  3063                           	opt stack 0
  3064  000A2A                     ___fttol:
  3065                           	opt stack 27
  3066                           
  3067                           ;incstack = 0
  3068  000A2A  C02F  F031         	movff	___fttol@f1+2,??___fttol
  3069  000A2E  6A32               	clrf	(??___fttol+1)& (0+255),c
  3070  000A30  6A33               	clrf	(??___fttol+2)& (0+255),c
  3071  000A32  342E               	rlcf	___fttol@f1+1,w,c
  3072  000A34  3631               	rlcf	??___fttol& (0+255),f,c
  3073  000A36  E301               	bnc	u2051
  3074  000A38  8032               	bsf	(??___fttol+1)& (0+255),0,c
  3075  000A3A                     u2051:
  3076  000A3A  5031               	movf	??___fttol,w,c
  3077  000A3C  6E3B               	movwf	___fttol@exp1,c
  3078  000A3E  503B               	movf	___fttol@exp1,w,c
  3079  000A40  A4D8               	btfss	status,2,c
  3080  000A42  D009               	goto	l569
  3081  000A44  0E00               	movlw	0
  3082  000A46  6E2D               	movwf	?___fttol,c
  3083  000A48  0E00               	movlw	0
  3084  000A4A  6E2E               	movwf	?___fttol+1,c
  3085  000A4C  0E00               	movlw	0
  3086  000A4E  6E2F               	movwf	?___fttol+2,c
  3087  000A50  0E00               	movlw	0
  3088  000A52  6E30               	movwf	?___fttol+3,c
  3089  000A54  0012               	return	
  3090  000A56                     l569:
  3091  000A56  0E17               	movlw	23
  3092  000A58  6E31               	movwf	??___fttol& (0+255),c
  3093  000A5A  C02D  F032         	movff	___fttol@f1,??___fttol+1
  3094  000A5E  C02E  F033         	movff	___fttol@f1+1,??___fttol+2
  3095  000A62  C02F  F034         	movff	___fttol@f1+2,??___fttol+3
  3096  000A66  2831               	incf	??___fttol,w,c
  3097  000A68  6E35               	movwf	(??___fttol+4)& (0+255),c
  3098  000A6A  D004               	goto	u2070
  3099  000A6C                     u2075:
  3100  000A6C  90D8               	bcf	status,0,c
  3101  000A6E  3234               	rrcf	??___fttol+3,f,c
  3102  000A70  3233               	rrcf	??___fttol+2,f,c
  3103  000A72  3232               	rrcf	??___fttol+1,f,c
  3104  000A74                     u2070:
  3105  000A74  2E35               	decfsz	(??___fttol+4)& (0+255),f,c
  3106  000A76  D7FA               	goto	u2075
  3107  000A78  5032               	movf	??___fttol+1,w,c
  3108  000A7A  6E36               	movwf	___fttol@sign1,c
  3109  000A7C  8E2E               	bsf	___fttol@f1+1,7,c
  3110  000A7E  0EFF               	movlw	255
  3111  000A80  162D               	andwf	___fttol@f1,f,c
  3112  000A82  0EFF               	movlw	255
  3113  000A84  162E               	andwf	___fttol@f1+1,f,c
  3114  000A86  0E00               	movlw	0
  3115  000A88  162F               	andwf	___fttol@f1+2,f,c
  3116  000A8A  502D               	movf	___fttol@f1,w,c
  3117  000A8C  6E37               	movwf	___fttol@lval,c
  3118  000A8E  502E               	movf	___fttol@f1+1,w,c
  3119  000A90  6E38               	movwf	___fttol@lval+1,c
  3120  000A92  502F               	movf	___fttol@f1+2,w,c
  3121  000A94  6E39               	movwf	___fttol@lval+2,c
  3122  000A96  6A3A               	clrf	___fttol@lval+3,c
  3123  000A98  0E8E               	movlw	142
  3124  000A9A  5E3B               	subwf	___fttol@exp1,f,c
  3125  000A9C  AE3B               	btfss	___fttol@exp1,7,c
  3126  000A9E  D016               	goto	l571
  3127  000AA0  503B               	movf	___fttol@exp1,w,c
  3128  000AA2  0A80               	xorlw	128
  3129  000AA4  0F8F               	addlw	143
  3130  000AA6  B0D8               	btfsc	status,0,c
  3131  000AA8  D009               	goto	l572
  3132  000AAA  0E00               	movlw	0
  3133  000AAC  6E2D               	movwf	?___fttol,c
  3134  000AAE  0E00               	movlw	0
  3135  000AB0  6E2E               	movwf	?___fttol+1,c
  3136  000AB2  0E00               	movlw	0
  3137  000AB4  6E2F               	movwf	?___fttol+2,c
  3138  000AB6  0E00               	movlw	0
  3139  000AB8  6E30               	movwf	?___fttol+3,c
  3140  000ABA  0012               	return	
  3141  000ABC                     l572:
  3142  000ABC  90D8               	bcf	status,0,c
  3143  000ABE  323A               	rrcf	___fttol@lval+3,f,c
  3144  000AC0  3239               	rrcf	___fttol@lval+2,f,c
  3145  000AC2  3238               	rrcf	___fttol@lval+1,f,c
  3146  000AC4  3237               	rrcf	___fttol@lval,f,c
  3147  000AC6  3E3B               	incfsz	___fttol@exp1,f,c
  3148  000AC8  D7F9               	goto	l572
  3149  000ACA  D015               	goto	u2110
  3150  000ACC                     l571:
  3151  000ACC  0E17               	movlw	23
  3152  000ACE  643B               	cpfsgt	___fttol@exp1,c
  3153  000AD0  D00F               	goto	l577
  3154  000AD2  0E00               	movlw	0
  3155  000AD4  6E2D               	movwf	?___fttol,c
  3156  000AD6  0E00               	movlw	0
  3157  000AD8  6E2E               	movwf	?___fttol+1,c
  3158  000ADA  0E00               	movlw	0
  3159  000ADC  6E2F               	movwf	?___fttol+2,c
  3160  000ADE  0E00               	movlw	0
  3161  000AE0  6E30               	movwf	?___fttol+3,c
  3162  000AE2  0012               	return	
  3163  000AE4  90D8               	bcf	status,0,c
  3164  000AE6  3637               	rlcf	___fttol@lval,f,c
  3165  000AE8  3638               	rlcf	___fttol@lval+1,f,c
  3166  000AEA  3639               	rlcf	___fttol@lval+2,f,c
  3167  000AEC  363A               	rlcf	___fttol@lval+3,f,c
  3168  000AEE  063B               	decf	___fttol@exp1,f,c
  3169  000AF0                     l577:
  3170  000AF0  503B               	movf	___fttol@exp1,w,c
  3171  000AF2  A4D8               	btfss	status,2,c
  3172  000AF4  D7F7               	goto	l578
  3173  000AF6                     u2110:
  3174  000AF6  5036               	movf	___fttol@sign1,w,c
  3175  000AF8  B4D8               	btfsc	status,2,c
  3176  000AFA  D008               	goto	l580
  3177  000AFC  1E3A               	comf	___fttol@lval+3,f,c
  3178  000AFE  1E39               	comf	___fttol@lval+2,f,c
  3179  000B00  1E38               	comf	___fttol@lval+1,f,c
  3180  000B02  6C37               	negf	___fttol@lval,c
  3181  000B04  0E00               	movlw	0
  3182  000B06  2238               	addwfc	___fttol@lval+1,f,c
  3183  000B08  2239               	addwfc	___fttol@lval+2,f,c
  3184  000B0A  223A               	addwfc	___fttol@lval+3,f,c
  3185  000B0C                     l580:
  3186  000B0C  C037  F02D         	movff	___fttol@lval,?___fttol
  3187  000B10  C038  F02E         	movff	___fttol@lval+1,?___fttol+1
  3188  000B14  C039  F02F         	movff	___fttol@lval+2,?___fttol+2
  3189  000B18  C03A  F030         	movff	___fttol@lval+3,?___fttol+3
  3190  000B1C  0012               	return	
  3191  000B1E                     __end_of___fttol:
  3192                           	opt stack 0
  3193                           tblptru	equ	0xFF8
  3194                           tblptrh	equ	0xFF7
  3195                           tblptrl	equ	0xFF6
  3196                           tablat	equ	0xFF5
  3197                           intcon	equ	0xFF2
  3198                           intcon3	equ	0xFF0
  3199                           postinc0	equ	0xFEE
  3200                           wreg	equ	0xFE8
  3201                           postdec1	equ	0xFE5
  3202                           fsr1l	equ	0xFE1
  3203                           status	equ	0xFD8
  3204                           
  3205 ;; *************** function ___ftmul *****************
  3206 ;; Defined at:
  3207 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
  3208 ;; Parameters:    Size  Location     Type
  3209 ;;  f1              3   29[COMRAM] float 
  3210 ;;  f2              3   32[COMRAM] float 
  3211 ;; Auto vars:     Size  Location     Type
  3212 ;;  f3_as_produc    3   39[COMRAM] unsigned um
  3213 ;;  sign            1   43[COMRAM] unsigned char 
  3214 ;;  cntr            1   42[COMRAM] unsigned char 
  3215 ;;  exp             1   38[COMRAM] unsigned char 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;                  3   29[COMRAM] float 
  3218 ;; Registers used:
  3219 ;;		wreg, status,2, status,0, cstack
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3225 ;;      Params:         6       0       0       0       0       0       0       0       0
  3226 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3227 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3228 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3229 ;;Total ram usage:       15 bytes
  3230 ;; Hardware stack levels used:    1
  3231 ;; Hardware stack levels required when called:    2
  3232 ;; This function calls:
  3233 ;;		___ftpack
  3234 ;; This function is called by:
  3235 ;;		_setMotores
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           	psect	text11
  3240  000B1E                     __ptext11:
  3241                           	opt stack 0
  3242  000B1E                     ___ftmul:
  3243                           	opt stack 26
  3244                           
  3245                           ;incstack = 0
  3246  000B1E  C020  F024         	movff	___ftmul@f1+2,??___ftmul
  3247  000B22  6A25               	clrf	(??___ftmul+1)& (0+255),c
  3248  000B24  6A26               	clrf	(??___ftmul+2)& (0+255),c
  3249  000B26  341F               	rlcf	___ftmul@f1+1,w,c
  3250  000B28  3624               	rlcf	??___ftmul& (0+255),f,c
  3251  000B2A  E301               	bnc	u1991
  3252  000B2C  8025               	bsf	(??___ftmul+1)& (0+255),0,c
  3253  000B2E                     u1991:
  3254  000B2E  5024               	movf	??___ftmul,w,c
  3255  000B30  6E27               	movwf	___ftmul@exp,c
  3256  000B32  5027               	movf	___ftmul@exp,w,c
  3257  000B34  A4D8               	btfss	status,2,c
  3258  000B36  D007               	goto	l548
  3259  000B38  0E00               	movlw	0
  3260  000B3A  6E1E               	movwf	?___ftmul,c
  3261  000B3C  0E00               	movlw	0
  3262  000B3E  6E1F               	movwf	?___ftmul+1,c
  3263  000B40  0E00               	movlw	0
  3264  000B42  6E20               	movwf	?___ftmul+2,c
  3265  000B44  0012               	return	
  3266  000B46                     l548:
  3267  000B46  C023  F024         	movff	___ftmul@f2+2,??___ftmul
  3268  000B4A  6A25               	clrf	(??___ftmul+1)& (0+255),c
  3269  000B4C  6A26               	clrf	(??___ftmul+2)& (0+255),c
  3270  000B4E  3422               	rlcf	___ftmul@f2+1,w,c
  3271  000B50  3624               	rlcf	??___ftmul& (0+255),f,c
  3272  000B52  E301               	bnc	u2011
  3273  000B54  8025               	bsf	(??___ftmul+1)& (0+255),0,c
  3274  000B56                     u2011:
  3275  000B56  5024               	movf	??___ftmul,w,c
  3276  000B58  6E2C               	movwf	___ftmul@sign,c
  3277  000B5A  502C               	movf	___ftmul@sign,w,c
  3278  000B5C  A4D8               	btfss	status,2,c
  3279  000B5E  D007               	goto	l550
  3280  000B60  0E00               	movlw	0
  3281  000B62  6E1E               	movwf	?___ftmul,c
  3282  000B64  0E00               	movlw	0
  3283  000B66  6E1F               	movwf	?___ftmul+1,c
  3284  000B68  0E00               	movlw	0
  3285  000B6A  6E20               	movwf	?___ftmul+2,c
  3286  000B6C  0012               	return	
  3287  000B6E                     l550:
  3288  000B6E  502C               	movf	___ftmul@sign,w,c
  3289  000B70  0F7B               	addlw	123
  3290  000B72  2627               	addwf	___ftmul@exp,f,c
  3291  000B74  C020  F02C         	movff	___ftmul@f1+2,___ftmul@sign
  3292  000B78  5023               	movf	___ftmul@f2+2,w,c
  3293  000B7A  1A2C               	xorwf	___ftmul@sign,f,c
  3294  000B7C  0E80               	movlw	128
  3295  000B7E  162C               	andwf	___ftmul@sign,f,c
  3296  000B80  8E1F               	bsf	___ftmul@f1+1,7,c
  3297  000B82  8E22               	bsf	___ftmul@f2+1,7,c
  3298  000B84  0EFF               	movlw	255
  3299  000B86  1621               	andwf	___ftmul@f2,f,c
  3300  000B88  0EFF               	movlw	255
  3301  000B8A  1622               	andwf	___ftmul@f2+1,f,c
  3302  000B8C  0E00               	movlw	0
  3303  000B8E  1623               	andwf	___ftmul@f2+2,f,c
  3304  000B90  0E00               	movlw	0
  3305  000B92  6E28               	movwf	___ftmul@f3_as_product,c
  3306  000B94  0E00               	movlw	0
  3307  000B96  6E29               	movwf	___ftmul@f3_as_product+1,c
  3308  000B98  0E00               	movlw	0
  3309  000B9A  6E2A               	movwf	___ftmul@f3_as_product+2,c
  3310  000B9C  0E07               	movlw	7
  3311  000B9E  6E2B               	movwf	___ftmul@cntr,c
  3312  000BA0  A01E               	btfss	___ftmul@f1,0,c
  3313  000BA2  D006               	goto	l552
  3314  000BA4  5021               	movf	___ftmul@f2,w,c
  3315  000BA6  2628               	addwf	___ftmul@f3_as_product,f,c
  3316  000BA8  5022               	movf	___ftmul@f2+1,w,c
  3317  000BAA  2229               	addwfc	___ftmul@f3_as_product+1,f,c
  3318  000BAC  5023               	movf	___ftmul@f2+2,w,c
  3319  000BAE  222A               	addwfc	___ftmul@f3_as_product+2,f,c
  3320  000BB0                     l552:
  3321  000BB0  90D8               	bcf	status,0,c
  3322  000BB2  3220               	rrcf	___ftmul@f1+2,f,c
  3323  000BB4  321F               	rrcf	___ftmul@f1+1,f,c
  3324  000BB6  321E               	rrcf	___ftmul@f1,f,c
  3325  000BB8  90D8               	bcf	status,0,c
  3326  000BBA  3621               	rlcf	___ftmul@f2,f,c
  3327  000BBC  3622               	rlcf	___ftmul@f2+1,f,c
  3328  000BBE  3623               	rlcf	___ftmul@f2+2,f,c
  3329  000BC0  2E2B               	decfsz	___ftmul@cntr,f,c
  3330  000BC2  D7EE               	goto	l551
  3331  000BC4  0E09               	movlw	9
  3332  000BC6  6E2B               	movwf	___ftmul@cntr,c
  3333  000BC8  A01E               	btfss	___ftmul@f1,0,c
  3334  000BCA  D006               	goto	l555
  3335  000BCC  5021               	movf	___ftmul@f2,w,c
  3336  000BCE  2628               	addwf	___ftmul@f3_as_product,f,c
  3337  000BD0  5022               	movf	___ftmul@f2+1,w,c
  3338  000BD2  2229               	addwfc	___ftmul@f3_as_product+1,f,c
  3339  000BD4  5023               	movf	___ftmul@f2+2,w,c
  3340  000BD6  222A               	addwfc	___ftmul@f3_as_product+2,f,c
  3341  000BD8                     l555:
  3342  000BD8  90D8               	bcf	status,0,c
  3343  000BDA  3220               	rrcf	___ftmul@f1+2,f,c
  3344  000BDC  321F               	rrcf	___ftmul@f1+1,f,c
  3345  000BDE  321E               	rrcf	___ftmul@f1,f,c
  3346  000BE0  90D8               	bcf	status,0,c
  3347  000BE2  322A               	rrcf	___ftmul@f3_as_product+2,f,c
  3348  000BE4  3229               	rrcf	___ftmul@f3_as_product+1,f,c
  3349  000BE6  3228               	rrcf	___ftmul@f3_as_product,f,c
  3350  000BE8  2E2B               	decfsz	___ftmul@cntr,f,c
  3351  000BEA  D7EE               	goto	l554
  3352  000BEC  C028  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  3353  000BF0  C029  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3354  000BF4  C02A  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3355  000BF8  C027  F016         	movff	___ftmul@exp,___ftpack@exp
  3356  000BFC  C02C  F017         	movff	___ftmul@sign,___ftpack@sign
  3357  000C00  EC09  F006         	call	___ftpack	;wreg free
  3358  000C04  C013  F01E         	movff	?___ftpack,?___ftmul
  3359  000C08  C014  F01F         	movff	?___ftpack+1,?___ftmul+1
  3360  000C0C  C015  F020         	movff	?___ftpack+2,?___ftmul+2
  3361  000C10  0012               	return	
  3362  000C12                     __end_of___ftmul:
  3363                           	opt stack 0
  3364                           tblptru	equ	0xFF8
  3365                           tblptrh	equ	0xFF7
  3366                           tblptrl	equ	0xFF6
  3367                           tablat	equ	0xFF5
  3368                           intcon	equ	0xFF2
  3369                           intcon3	equ	0xFF0
  3370                           postinc0	equ	0xFEE
  3371                           wreg	equ	0xFE8
  3372                           postdec1	equ	0xFE5
  3373                           fsr1l	equ	0xFE1
  3374                           status	equ	0xFD8
  3375                           
  3376 ;; *************** function ___ftpack *****************
  3377 ;; Defined at:
  3378 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;  arg             3   18[COMRAM] unsigned um
  3381 ;;  exp             1   21[COMRAM] unsigned char 
  3382 ;;  sign            1   22[COMRAM] unsigned char 
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;		None
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  3   18[COMRAM] float 
  3387 ;; Registers used:
  3388 ;;		wreg, status,2, status,0
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3394 ;;      Params:         5       0       0       0       0       0       0       0       0
  3395 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3396 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3397 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3398 ;;Total ram usage:        8 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; Hardware stack levels required when called:    1
  3401 ;; This function calls:
  3402 ;;		Nothing
  3403 ;; This function is called by:
  3404 ;;		___ftmul
  3405 ;;		___lwtoft
  3406 ;; This function uses a non-reentrant model
  3407 ;;
  3408                           
  3409                           	psect	text12
  3410  000C12                     __ptext12:
  3411                           	opt stack 0
  3412  000C12                     ___ftpack:
  3413                           	opt stack 26
  3414                           
  3415                           ;incstack = 0
  3416  000C12  5016               	movf	___ftpack@exp,w,c
  3417  000C14  B4D8               	btfsc	status,2,c
  3418  000C16  D005               	goto	u1920
  3419  000C18  5013               	movf	___ftpack@arg,w,c
  3420  000C1A  1014               	iorwf	___ftpack@arg+1,w,c
  3421  000C1C  1015               	iorwf	___ftpack@arg+2,w,c
  3422  000C1E  A4D8               	btfss	status,2,c
  3423  000C20  D00C               	goto	l469
  3424  000C22                     u1920:
  3425  000C22  0E00               	movlw	0
  3426  000C24  6E13               	movwf	?___ftpack,c
  3427  000C26  0E00               	movlw	0
  3428  000C28  6E14               	movwf	?___ftpack+1,c
  3429  000C2A  0E00               	movlw	0
  3430  000C2C  6E15               	movwf	?___ftpack+2,c
  3431  000C2E  0012               	return	
  3432  000C30  2A16               	incf	___ftpack@exp,f,c
  3433  000C32  90D8               	bcf	status,0,c
  3434  000C34  3215               	rrcf	___ftpack@arg+2,f,c
  3435  000C36  3214               	rrcf	___ftpack@arg+1,f,c
  3436  000C38  3213               	rrcf	___ftpack@arg,f,c
  3437  000C3A                     l469:
  3438  000C3A  0E00               	movlw	0
  3439  000C3C  1413               	andwf	___ftpack@arg,w,c
  3440  000C3E  6E18               	movwf	??___ftpack& (0+255),c
  3441  000C40  0E00               	movlw	0
  3442  000C42  1414               	andwf	___ftpack@arg+1,w,c
  3443  000C44  6E19               	movwf	(??___ftpack+1)& (0+255),c
  3444  000C46  0EFE               	movlw	254
  3445  000C48  1415               	andwf	___ftpack@arg+2,w,c
  3446  000C4A  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  3447  000C4C  5018               	movf	??___ftpack,w,c
  3448  000C4E  1019               	iorwf	??___ftpack+1,w,c
  3449  000C50  101A               	iorwf	??___ftpack+2,w,c
  3450  000C52  B4D8               	btfsc	status,2,c
  3451  000C54  D00C               	goto	l472
  3452  000C56  D7EC               	goto	l470
  3453  000C58  2A16               	incf	___ftpack@exp,f,c
  3454  000C5A  0E01               	movlw	1
  3455  000C5C  2613               	addwf	___ftpack@arg,f,c
  3456  000C5E  0E00               	movlw	0
  3457  000C60  2214               	addwfc	___ftpack@arg+1,f,c
  3458  000C62  0E00               	movlw	0
  3459  000C64  2215               	addwfc	___ftpack@arg+2,f,c
  3460  000C66  90D8               	bcf	status,0,c
  3461  000C68  3215               	rrcf	___ftpack@arg+2,f,c
  3462  000C6A  3214               	rrcf	___ftpack@arg+1,f,c
  3463  000C6C  3213               	rrcf	___ftpack@arg,f,c
  3464  000C6E                     l472:
  3465  000C6E  0E00               	movlw	0
  3466  000C70  1413               	andwf	___ftpack@arg,w,c
  3467  000C72  6E18               	movwf	??___ftpack& (0+255),c
  3468  000C74  0E00               	movlw	0
  3469  000C76  1414               	andwf	___ftpack@arg+1,w,c
  3470  000C78  6E19               	movwf	(??___ftpack+1)& (0+255),c
  3471  000C7A  0EFF               	movlw	255
  3472  000C7C  1415               	andwf	___ftpack@arg+2,w,c
  3473  000C7E  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  3474  000C80  5018               	movf	??___ftpack,w,c
  3475  000C82  1019               	iorwf	??___ftpack+1,w,c
  3476  000C84  101A               	iorwf	??___ftpack+2,w,c
  3477  000C86  B4D8               	btfsc	status,2,c
  3478  000C88  D006               	goto	l475
  3479  000C8A  D7E6               	goto	l473
  3480  000C8C  0616               	decf	___ftpack@exp,f,c
  3481  000C8E  90D8               	bcf	status,0,c
  3482  000C90  3613               	rlcf	___ftpack@arg,f,c
  3483  000C92  3614               	rlcf	___ftpack@arg+1,f,c
  3484  000C94  3615               	rlcf	___ftpack@arg+2,f,c
  3485  000C96                     l475:
  3486  000C96  BE14               	btfsc	___ftpack@arg+1,7,c
  3487  000C98  D003               	goto	u1960
  3488  000C9A  0E02               	movlw	2
  3489  000C9C  6016               	cpfslt	___ftpack@exp,c
  3490  000C9E  D7F6               	goto	l476
  3491  000CA0                     u1960:
  3492  000CA0  A016               	btfss	___ftpack@exp,0,c
  3493  000CA2  9E14               	bcf	___ftpack@arg+1,7,c
  3494  000CA4  90D8               	bcf	status,0,c
  3495  000CA6  3216               	rrcf	___ftpack@exp,f,c
  3496  000CA8  5016               	movf	___ftpack@exp,w,c
  3497  000CAA  1215               	iorwf	___ftpack@arg+2,f,c
  3498  000CAC  5017               	movf	___ftpack@sign,w,c
  3499  000CAE  A4D8               	btfss	status,2,c
  3500  000CB0  8E15               	bsf	___ftpack@arg+2,7,c
  3501  000CB2  C013  F013         	movff	___ftpack@arg,?___ftpack
  3502  000CB6  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  3503  000CBA  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  3504  000CBE  0012               	return	
  3505  000CC0                     __end_of___ftpack:
  3506                           	opt stack 0
  3507                           tblptru	equ	0xFF8
  3508                           tblptrh	equ	0xFF7
  3509                           tblptrl	equ	0xFF6
  3510                           tablat	equ	0xFF5
  3511                           intcon	equ	0xFF2
  3512                           intcon3	equ	0xFF0
  3513                           postinc0	equ	0xFEE
  3514                           wreg	equ	0xFE8
  3515                           postdec1	equ	0xFE5
  3516                           fsr1l	equ	0xFE1
  3517                           status	equ	0xFD8
  3518                           
  3519 ;; *************** function _ISR *****************
  3520 ;; Defined at:
  3521 ;;		line 91 in file "funciones.c"
  3522 ;; Parameters:    Size  Location     Type
  3523 ;;		None
  3524 ;; Auto vars:     Size  Location     Type
  3525 ;;		None
  3526 ;; Return value:  Size  Location     Type
  3527 ;;                  1    wreg      void 
  3528 ;; Registers used:
  3529 ;;		wreg, status,2, status,0
  3530 ;; Tracked objects:
  3531 ;;		On entry : 0/0
  3532 ;;		On exit  : 0/0
  3533 ;;		Unchanged: 0/0
  3534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3535 ;;      Params:         0       0       0       0       0       0       0       0       0
  3536 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3537 ;;      Temps:         18       0       0       0       0       0       0       0       0
  3538 ;;      Totals:        18       0       0       0       0       0       0       0       0
  3539 ;;Total ram usage:       18 bytes
  3540 ;; Hardware stack levels used:    1
  3541 ;; This function calls:
  3542 ;;		Nothing
  3543 ;; This function is called by:
  3544 ;;		Interrupt level 2
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           	psect	intcode
  3549  000008                     __pintcode:
  3550                           	opt stack 0
  3551  000008                     _ISR:
  3552                           	opt stack 25
  3553                           
  3554                           ;incstack = 0
  3555  000008  824C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3556  00000A  ED60  F006         	call	int_func,f	;refresh shadow registers
  3557                           tblptru	equ	0xFF8
  3558                           tblptrh	equ	0xFF7
  3559                           tblptrl	equ	0xFF6
  3560                           tablat	equ	0xFF5
  3561                           intcon	equ	0xFF2
  3562                           intcon3	equ	0xFF0
  3563                           postinc0	equ	0xFEE
  3564                           wreg	equ	0xFE8
  3565                           postdec1	equ	0xFE5
  3566                           fsr1l	equ	0xFE1
  3567                           status	equ	0xFD8
  3568                           
  3569                           	psect	intcode_body
  3570  000CC0                     __pintcode_body:
  3571                           	opt stack 25
  3572  000CC0                     int_func:
  3573                           	opt stack 25
  3574  000CC0  0006               	pop		; remove dummy address from shadow register refresh
  3575  000CC2  CFFA F001          	movff	pclath,??_ISR
  3576  000CC6  CFFB F002          	movff	pclatu,??_ISR+1
  3577  000CCA  CFE9 F003          	movff	fsr0l,??_ISR+2
  3578  000CCE  CFEA F004          	movff	fsr0h,??_ISR+3
  3579  000CD2  CFE1 F005          	movff	fsr1l,??_ISR+4
  3580  000CD6  CFE2 F006          	movff	fsr1h,??_ISR+5
  3581  000CDA  CFD9 F007          	movff	fsr2l,??_ISR+6
  3582  000CDE  CFDA F008          	movff	fsr2h,??_ISR+7
  3583  000CE2  CFF3 F009          	movff	prodl,??_ISR+8
  3584  000CE6  CFF4 F00A          	movff	prodh,??_ISR+9
  3585  000CEA  CFF6 F00B          	movff	tblptrl,??_ISR+10
  3586  000CEE  CFF7 F00C          	movff	tblptrh,??_ISR+11
  3587  000CF2  CFF8 F00D          	movff	tblptru,??_ISR+12
  3588  000CF6  CFF5 F00E          	movff	tablat,??_ISR+13
  3589  000CFA  C04C  F00F         	movff	btemp,??_ISR+14
  3590  000CFE  C04D  F010         	movff	btemp+1,??_ISR+15
  3591  000D02  C04E  F011         	movff	btemp+2,??_ISR+16
  3592  000D06  C04F  F012         	movff	btemp+3,??_ISR+17
  3593                           
  3594                           ;funciones.c: 92: if(!TMR2IF) return;
  3595  000D0A  A29E               	btfss	3998,1,c	;volatile
  3596  000D0C  D008               	goto	i2l254
  3597                           
  3598                           ;funciones.c: 93: TMR2IF = 0;
  3599  000D0E  929E               	bcf	3998,1,c	;volatile
  3600                           
  3601                           ;funciones.c: 94: millisCounter++;
  3602  000D10  0E01               	movlw	1
  3603  000D12  0100               	movlb	0	; () banked
  3604  000D14  2779               	addwf	_millisCounter& (0+255),f,b
  3605  000D16  0E00               	movlw	0
  3606  000D18  237A               	addwfc	(_millisCounter+1)& (0+255),f,b
  3607  000D1A  237B               	addwfc	(_millisCounter+2)& (0+255),f,b
  3608  000D1C  237C               	addwfc	(_millisCounter+3)& (0+255),f,b
  3609  000D1E                     i2l254:
  3610  000D1E  C012  F04F         	movff	??_ISR+17,btemp+3
  3611  000D22  C011  F04E         	movff	??_ISR+16,btemp+2
  3612  000D26  C010  F04D         	movff	??_ISR+15,btemp+1
  3613  000D2A  C00F  F04C         	movff	??_ISR+14,btemp
  3614  000D2E  C00E  FFF5         	movff	??_ISR+13,tablat
  3615  000D32  C00D  FFF8         	movff	??_ISR+12,tblptru
  3616  000D36  C00C  FFF7         	movff	??_ISR+11,tblptrh
  3617  000D3A  C00B  FFF6         	movff	??_ISR+10,tblptrl
  3618  000D3E  C00A  FFF4         	movff	??_ISR+9,prodh
  3619  000D42  C009  FFF3         	movff	??_ISR+8,prodl
  3620  000D46  C008  FFDA         	movff	??_ISR+7,fsr2h
  3621  000D4A  C007  FFD9         	movff	??_ISR+6,fsr2l
  3622  000D4E  C006  FFE2         	movff	??_ISR+5,fsr1h
  3623  000D52  C005  FFE1         	movff	??_ISR+4,fsr1l
  3624  000D56  C004  FFEA         	movff	??_ISR+3,fsr0h
  3625  000D5A  C003  FFE9         	movff	??_ISR+2,fsr0l
  3626  000D5E  C002  FFFB         	movff	??_ISR+1,pclatu
  3627  000D62  C001  FFFA         	movff	??_ISR,pclath
  3628  000D66  924C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3629  000D68  0011               	retfie		f
  3630  000D6A                     __end_of_ISR:
  3631                           	opt stack 0
  3632  0000                     pclatu	equ	0xFFB
  3633                           pclath	equ	0xFFA
  3634                           tblptru	equ	0xFF8
  3635                           tblptrh	equ	0xFF7
  3636                           tblptrl	equ	0xFF6
  3637                           tablat	equ	0xFF5
  3638                           prodh	equ	0xFF4
  3639                           prodl	equ	0xFF3
  3640                           intcon	equ	0xFF2
  3641                           intcon3	equ	0xFF0
  3642                           postinc0	equ	0xFEE
  3643                           fsr0h	equ	0xFEA
  3644                           fsr0l	equ	0xFE9
  3645                           wreg	equ	0xFE8
  3646                           postdec1	equ	0xFE5
  3647                           fsr1h	equ	0xFE2
  3648                           fsr1l	equ	0xFE1
  3649                           fsr2h	equ	0xFDA
  3650                           fsr2l	equ	0xFD9
  3651                           status	equ	0xFD8
  3652                           pclatu	equ	0xFFB
  3653                           pclath	equ	0xFFA
  3654                           tblptru	equ	0xFF8
  3655                           tblptrh	equ	0xFF7
  3656                           tblptrl	equ	0xFF6
  3657                           tablat	equ	0xFF5
  3658                           prodh	equ	0xFF4
  3659                           prodl	equ	0xFF3
  3660                           intcon	equ	0xFF2
  3661                           intcon3	equ	0xFF0
  3662                           postinc0	equ	0xFEE
  3663                           fsr0h	equ	0xFEA
  3664                           fsr0l	equ	0xFE9
  3665                           wreg	equ	0xFE8
  3666                           postdec1	equ	0xFE5
  3667                           fsr1h	equ	0xFE2
  3668                           fsr1l	equ	0xFE1
  3669                           fsr2h	equ	0xFDA
  3670                           fsr2l	equ	0xFD9
  3671                           status	equ	0xFD8
  3672                           
  3673                           	psect	rparam
  3674  0000                     pclatu	equ	0xFFB
  3675                           pclath	equ	0xFFA
  3676                           tblptru	equ	0xFF8
  3677                           tblptrh	equ	0xFF7
  3678                           tblptrl	equ	0xFF6
  3679                           tablat	equ	0xFF5
  3680                           prodh	equ	0xFF4
  3681                           prodl	equ	0xFF3
  3682                           intcon	equ	0xFF2
  3683                           intcon3	equ	0xFF0
  3684                           postinc0	equ	0xFEE
  3685                           fsr0h	equ	0xFEA
  3686                           fsr0l	equ	0xFE9
  3687                           wreg	equ	0xFE8
  3688                           postdec1	equ	0xFE5
  3689                           fsr1h	equ	0xFE2
  3690                           fsr1l	equ	0xFE1
  3691                           fsr2h	equ	0xFDA
  3692                           fsr2l	equ	0xFD9
  3693                           status	equ	0xFD8
  3694                           
  3695                           	psect	temp
  3696  00004C                     btemp:
  3697                           	opt stack 0
  3698  00004C                     	ds	1
  3699  0000                     int$flags	set	btemp
  3700  0000                     wtemp6	set	btemp+1
  3701                           pclatu	equ	0xFFB
  3702                           pclath	equ	0xFFA
  3703                           tblptru	equ	0xFF8
  3704                           tblptrh	equ	0xFF7
  3705                           tblptrl	equ	0xFF6
  3706                           tablat	equ	0xFF5
  3707                           prodh	equ	0xFF4
  3708                           prodl	equ	0xFF3
  3709                           intcon	equ	0xFF2
  3710                           intcon3	equ	0xFF0
  3711                           postinc0	equ	0xFEE
  3712                           fsr0h	equ	0xFEA
  3713                           fsr0l	equ	0xFE9
  3714                           wreg	equ	0xFE8
  3715                           postdec1	equ	0xFE5
  3716                           fsr1h	equ	0xFE2
  3717                           fsr1l	equ	0xFE1
  3718                           fsr2h	equ	0xFDA
  3719                           fsr2l	equ	0xFD9
  3720                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         26
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     59      75
    BANK0           160     25      41
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _setMotores->___fttol
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    ___ftmul->___lwtoft

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_loop
    _loop->_estrategiaClasica
    _estrategiaClasica->_setMotores
    _estrategiaCiego->_setMotores
    _estrategiaAtras->_setMotores
    _estrategiaAdelante->_setMotores
    _init->_setMotores

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   74318
                               _init
                               _loop
 ---------------------------------------------------------------------------------
 (1) _loop                                                 7     7      0   61944
                                             18 BANK0      7     7      0
                 _estrategiaAdelante
                    _estrategiaAtras
                    _estrategiaCiego
                  _estrategiaClasica
                             _millis
                         _setMotores
 ---------------------------------------------------------------------------------
 (2) _estrategiaClasica                                    4     4      0   12374
                                             14 BANK0      4     4      0
                             _millis
                         _setMotores
 ---------------------------------------------------------------------------------
 (2) _estrategiaCiego                                      0     0      0   12374
                             _millis
                         _setMotores
 ---------------------------------------------------------------------------------
 (2) _estrategiaAtras                                      0     0      0   12374
                             _millis
                         _setMotores
 ---------------------------------------------------------------------------------
 (2) _estrategiaAdelante                                   0     0      0   12374
                             _millis
                         _setMotores
 ---------------------------------------------------------------------------------
 (2) _millis                                               4     0      4       0
                                             18 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0   12374
                         _setMotores
 ---------------------------------------------------------------------------------
 (2) _setMotores                                          14    10      4   12374
                                              0 BANK0     14    10      4
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (3) ___lwtoft                                             3     0      3    2984
                                             26 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     551
                                             44 COMRAM    15    11      4
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3761
                                             29 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2773
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                 18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init
     _setMotores
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack
   _loop
     _estrategiaAdelante
       _millis
       _setMotores
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
     _estrategiaAtras
       _millis
       _setMotores
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
     _estrategiaCiego
       _millis
       _setMotores
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
     _estrategiaClasica
       _millis
       _setMotores
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft
           ___ftpack
     _millis
     _setMotores
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lwtoft
         ___ftpack

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     19      29       5       25.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     3B      4B       1       79.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      74      20        0.0%
DATA                 0      0      74       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Sep 07 16:50:46 2019

__size_of_estrategiaAdelante 00F6                           l33 0540                           l34 0352  
                         l51 03E8                           l43 03BE                           l35 0388  
                         l61 0464                           l53 0424                           l70 0534  
                         l62 04A2                           l54 0430                           l46 03B4  
                         l38 037E                           l71 053A                           l55 0446  
                         l47 03B0                           l39 037A                           l64 04B2  
                         l82 030A                           l90 006E                           l66 04BE  
                         l91 0088                           l83 003A                           l67 04C2  
                         l59 043C                           l92 0082                           l84 005C  
                         l68 0528                           l93 0098                           l69 052E  
                         l94 00A2                           l95 00C0                           l96 00DE  
                         l88 008E                           l97 00E4                           l89 0074  
                         l98 0100                           l99 0134                  __CFG_BORV$0 000000  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                          l100 0168                          l101 01A0  
                        l102 01B6                          l103 01EA                          l104 021E  
                        l121 0782                          l105 025A                          l106 0278  
                        l123 07BA                          l107 02B4                          l140 096C  
                        l124 07D0                          l108 02D2                          l141 09A4  
                        l117 0828                          l125 07F4                          l109 02EE  
                        l230 05F8                          l222 05B4                          l142 09DC  
                        l134 0950                          l150 085A                          l118 0742  
                        l119 074A                          l240 064A                          l232 0600  
                        l224 05BC                          l242 0658                          l234 05E6  
                        l226 05A2                          l139 0A14                          l155 091E  
                        l244 0664                          l236 05EE                          l228 05AA  
                        l156 0876                          l164 0E86                          l157 08AE  
                        l238 063E                          l158 08E6                          l470 0C30  
                        l550 0B6E                          l551 0BA0                          l472 0C6E  
                        l552 0BB0                          l473 0C58                          l554 0BC8  
                        l475 0C96                          l555 0BD8                          l571 0ACC  
                        l476 0C8C                          l548 0B46                          l580 0B0C  
                        l572 0ABC                          l469 0C3A                          l577 0AF0  
                        l569 0A56                          l578 0AE4                 __CFG_CPB$OFF 000000  
                        _PR2 000FCB                 __CFG_CPD$OFF 000000                          _ISR 0008  
               __CFG_BOR$OFF 000000                          wreg 000FE8                 __CFG_LVP$OFF 000000  
                       ?_ISR 0001                 __CFG_WDT$OFF 000000                         u2011 0B56  
                       u2110 0AF6                         u2130 0588                         u2051 0A3A  
                       u2140 0598                         u2070 0A74                         u2150 05CC  
                       u2208 0626                         u2160 05DC                         u2170 060A  
                       u2250 0042                         u2075 0A6C                         u2190 0622  
                       u2600 0382                         u2188 060E                         u2630 03B8  
                       _PIE1 000F9D                         u1920 0C22                         _PIE2 000FA0  
                       u2490 094A                         u2570 0854                         u2708 0402  
                       u2830 0510                         u1960 0CA0                         u2760 0438  
                       u2745 042C                         u2746 042E                         u2690 03FE  
                       u2685 03F0                         u2686 03F2                         u1991 0B2E  
                       u2848 0514                         _main 0E82                 ___ftpack@arg 0013  
                       _init 0D6A                         _loop 0350                 ___ftpack@exp 0016  
                       fsr0h 000FEA                         fsr1h 000FE2                         fsr2h 000FDA  
                       fsr0l 000FE9                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 004C                         prodh 000FF4                         prodl 000FF3  
                       start 000E                __CFG_IESO$OFF 000000                 ___ftmul@cntr 002B  
               ___param_bank 000000                 ___ftmul@sign 002C                        ??_ISR 0001  
    estrategiaClasica@estado 0044                 ___fttol@exp1 003B                 ___fttol@lval 0037  
              __CFG_PLLDIV$5 000000               __CFG_CCP2MX$ON 000000                        ?_main 0001  
                      ?_init 0001                        ?_loop 0001              __end_of___ftmul 0C12  
            __end_of___fttol 0B1E                        _T2CON 000FCA                        i2l254 0D1E  
              __CFG_USBDIV$2 000000                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
             __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000               __CFG_EBTRB$OFF 000000  
              ___ftpack@sign 0017                        pclath 000FFA                        tablat 000FF5  
                      loop@m 0040                        status 000FD8                        wtemp6 004D  
             __CFG_MCLRE$OFF 000000              __initialization 0E06                 __end_of_main 0E8C  
               __end_of_init 0E06                 __end_of_loop 056E              setMotores@dutyD 006C  
            setMotores@dutyI 006A                       ??_main 003C                ___fttol@sign1 0036  
                     ??_init 003C                       ??_loop 0072                __activetblptr 000002  
                     _CCPR1L 000FBE                       _CCPR2L 000FBB             __end_of___ftpack 0CC0  
           __end_of___lwtoft 0E70     __size_of_estrategiaCiego 00FE                       _TMR2IF 007CF1  
   __size_of_estrategiaAtras 00F6        estrategiaCiego@estado 0048               __CFG_XINST$OFF 000000  
                  ??___ftmul 0024                    ??___fttol 0031                       _millis 0E70  
                     clear_0 0E2C                       clear_1 0E38        ___ftmul@f3_as_product 0028  
               __pdataCOMRAM 0046                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8                   __accesstop 0060      __end_of__initialization 0E3E  
            __CFG_PBADEN$OFF 000000               _setMotores$933 0066               _setMotores$934 0068  
              ___rparam_used 000001                   ___ftmul@f1 001E                   ___ftmul@f2 0021  
                 ___fttol@f1 002D               __pcstackCOMRAM 0001             setMotores@speedD 0062  
           setMotores@speedI 0060                   ___lwtoft@c 001B                   __pbssBANK0 0079  
          _estrategiaClasica 0012           ?_estrategiaClasica 0001   __end_of_estrategiaAdelante 0A2A  
          ??_estrategiaCiego 003C            ??_estrategiaAtras 003C          ??_estrategiaClasica 006E  
                    ?_millis 0013                    ?___ftpack 0013                    ?___lwtoft 001B  
                    _INTCON3 000FF0   estrategiaClasica@firstTime 0049    __end_of_estrategiaClasica 0350  
            __CFG_VREGEN$OFF 000000                      __Hparam 0000                      __Lparam 0000  
                 _estadoMenu 0045        estrategiaAtras@estado 0046                      ___ftmul 0B1E  
                    ___fttol 0A2A              __CFG_STVREN$OFF 000000                      __pcinit 0E06  
                 ??___ftpack 0018              __size_of_millis 0012                      __ramtop 0800  
                    __ptext0 0E82                      __ptext1 0350                      __ptext2 0012  
                    __ptext3 0740                      __ptext4 083E                      __ptext5 0934  
                    __ptext6 0E70                      __ptext7 0D6A                      __ptext8 056E  
                    __ptext9 0E4C                _millisCounter 0079                   ??___lwtoft 001E  
               __size_of_ISR 0D62                    _T2CONbits 000FCA               __pintcode_body 0CC0  
       end_of_initialization 0E3E                __Lmediumconst 0000                      int_func 0CC0  
                 _setMotores 056E                      postdec1 000FE5                      postinc0 000FEE  
           estrategiaCiego@m 0085             estrategiaAtras@m 007D                    _PORTAbits 000F80  
                  _PORTBbits 000F81                    _PORTCbits 000F82               loop@estrategia 004A  
                  _TRISAbits 000F92                    _TRISBbits 000F93                    _TRISCbits 000F94  
 __size_of_estrategiaClasica 033E                  _CCP1CONbits 000FBD                  _CCP2CONbits 000FBA  
                ___ftmul@exp 0027                __pidataCOMRAM 0E8C               __end_of_millis 0E82  
        start_initialization 0E06                  __end_of_ISR 0D6A              _estrategiaCiego 0740  
            _estrategiaAtras 083E                  ?_setMotores 0060             __CFG_LPT1OSC$OFF 000000  
                   ??_millis 0017           _estrategiaAdelante 0934            __size_of___ftpack 00AE  
                __pbssCOMRAM 003C     estrategiaAdelante@estado 0047            __size_of___lwtoft 0024  
              __pcstackBANK0 0060          ?_estrategiaAdelante 0001         ??_estrategiaAdelante 003C  
                  __pintcode 0008                     ?___ftmul 001E                     ?___fttol 002D  
                  _direccion 004B          __size_of_setMotores 01D2      __end_of_estrategiaCiego 083E  
    __end_of_estrategiaAtras 0934                     _LATAbits 000F89                     _LATCbits 000F8B  
                   _PIE1bits 000F9D                     _UCFGbits 000F6F                     _RCONbits 000FD0  
           __CFG_WDTPS$32768 000000                     _UCONbits 000F6D                   _ADCON1bits 000FC1  
        estrategiaAdelante@m 0081                    copy_data0 0E1A                     __Hrparam 0000  
                   __Lrparam 0000             __size_of___ftmul 00F4             __size_of___fttol 00F4  
                   ___ftpack 0C12                     ___lwtoft 0E4C             ?_estrategiaCiego 0001  
           ?_estrategiaAtras 0001                     __ptext10 0A2A                     __ptext11 0B1E  
                   __ptext12 0C12                     _loop$319 0077                     _loop$328 0078  
               ??_setMotores 0064                __size_of_main 000A                __size_of_init 009C  
              __size_of_loop 021E                     int$flags 004C        __CFG_CPUDIV$OSC1_PLL2 000000  
                 _INTCONbits 000FF2           __end_of_setMotores 0740           estrategiaClasica@m 003C  
                   intlevel2 0000           __CFG_FOSC$HSPLL_HS 000000  
